# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class StartProcessInstanceFormDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'variables': 'dict(str, VariableValueDto)',
        'business_key': 'str'
    }

    attribute_map = {
        'variables': 'variables',
        'business_key': 'businessKey'
    }

    def __init__(self, variables=None, business_key=None, local_vars_configuration=None):  # noqa: E501
        """StartProcessInstanceFormDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._variables = None
        self._business_key = None
        self.discriminator = None

        if variables is not None:
            self.variables = variables
        if business_key is not None:
            self.business_key = business_key

    @property
    def variables(self):
        """Gets the variables of this StartProcessInstanceFormDto.  # noqa: E501


        :return: The variables of this StartProcessInstanceFormDto.  # noqa: E501
        :rtype: dict(str, VariableValueDto)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this StartProcessInstanceFormDto.


        :param variables: The variables of this StartProcessInstanceFormDto.  # noqa: E501
        :type: dict(str, VariableValueDto)
        """

        self._variables = variables

    @property
    def business_key(self):
        """Gets the business_key of this StartProcessInstanceFormDto.  # noqa: E501

        The business key the process instance is to be initialized with. The business key uniquely identifies the process instance in the context of the given process definition.  # noqa: E501

        :return: The business_key of this StartProcessInstanceFormDto.  # noqa: E501
        :rtype: str
        """
        return self._business_key

    @business_key.setter
    def business_key(self, business_key):
        """Sets the business_key of this StartProcessInstanceFormDto.

        The business key the process instance is to be initialized with. The business key uniquely identifies the process instance in the context of the given process definition.  # noqa: E501

        :param business_key: The business_key of this StartProcessInstanceFormDto.  # noqa: E501
        :type: str
        """

        self._business_key = business_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartProcessInstanceFormDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StartProcessInstanceFormDto):
            return True

        return self.to_dict() != other.to_dict()
