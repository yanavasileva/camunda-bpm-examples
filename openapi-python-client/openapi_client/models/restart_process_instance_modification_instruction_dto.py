# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RestartProcessInstanceModificationInstructionDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'activity_id': 'str',
        'transition_id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'activity_id': 'activityId',
        'transition_id': 'transitionId'
    }

    def __init__(self, type=None, activity_id=None, transition_id=None, local_vars_configuration=None):  # noqa: E501
        """RestartProcessInstanceModificationInstructionDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._activity_id = None
        self._transition_id = None
        self.discriminator = None

        self.type = type
        if activity_id is not None:
            self.activity_id = activity_id
        if transition_id is not None:
            self.transition_id = transition_id

    @property
    def type(self):
        """Gets the type of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501

        **Mandatory**. One of the following values: `startBeforeActivity`, `startAfterActivity`, `startTransition`.  * A `startBeforeActivity` instruction requests to enter a given activity. * A `startAfterActivity` instruction requests to execute the single outgoing sequence flow of a given activity. * A `startTransition` instruction requests to execute a specific sequence flow.  # noqa: E501

        :return: The type of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RestartProcessInstanceModificationInstructionDto.

        **Mandatory**. One of the following values: `startBeforeActivity`, `startAfterActivity`, `startTransition`.  * A `startBeforeActivity` instruction requests to enter a given activity. * A `startAfterActivity` instruction requests to execute the single outgoing sequence flow of a given activity. * A `startTransition` instruction requests to execute a specific sequence flow.  # noqa: E501

        :param type: The type of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["startBeforeActivity", "startAfterActivity", "startTransition"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def activity_id(self):
        """Gets the activity_id of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501

        **Can be used with instructions of types** `startBeforeActivity` and `startAfterActivity`. Specifies the sequence flow to start.  # noqa: E501

        :return: The activity_id of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this RestartProcessInstanceModificationInstructionDto.

        **Can be used with instructions of types** `startBeforeActivity` and `startAfterActivity`. Specifies the sequence flow to start.  # noqa: E501

        :param activity_id: The activity_id of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def transition_id(self):
        """Gets the transition_id of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501

        **Can be used with instructions of types** `startTransition`. Specifies the sequence flow to start.  # noqa: E501

        :return: The transition_id of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501
        :rtype: str
        """
        return self._transition_id

    @transition_id.setter
    def transition_id(self, transition_id):
        """Sets the transition_id of this RestartProcessInstanceModificationInstructionDto.

        **Can be used with instructions of types** `startTransition`. Specifies the sequence flow to start.  # noqa: E501

        :param transition_id: The transition_id of this RestartProcessInstanceModificationInstructionDto.  # noqa: E501
        :type: str
        """

        self._transition_id = transition_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestartProcessInstanceModificationInstructionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RestartProcessInstanceModificationInstructionDto):
            return True

        return self.to_dict() != other.to_dict()
