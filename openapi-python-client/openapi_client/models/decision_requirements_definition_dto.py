# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DecisionRequirementsDefinitionDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'key': 'str',
        'name': 'str',
        'category': 'str',
        'version': 'int',
        'resource': 'str',
        'deployment_id': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'name': 'name',
        'category': 'category',
        'version': 'version',
        'resource': 'resource',
        'deployment_id': 'deploymentId',
        'tenant_id': 'tenantId'
    }

    def __init__(self, id=None, key=None, name=None, category=None, version=None, resource=None, deployment_id=None, tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """DecisionRequirementsDefinitionDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._key = None
        self._name = None
        self._category = None
        self._version = None
        self._resource = None
        self._deployment_id = None
        self._tenant_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if version is not None:
            self.version = version
        if resource is not None:
            self.resource = resource
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def id(self):
        """Gets the id of this DecisionRequirementsDefinitionDto.  # noqa: E501

        The id of the decision requirements definition  # noqa: E501

        :return: The id of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DecisionRequirementsDefinitionDto.

        The id of the decision requirements definition  # noqa: E501

        :param id: The id of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this DecisionRequirementsDefinitionDto.  # noqa: E501

        The key of the decision requirements definition, i.e., the id of the DMN 1.0 XML decision definition.  # noqa: E501

        :return: The key of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DecisionRequirementsDefinitionDto.

        The key of the decision requirements definition, i.e., the id of the DMN 1.0 XML decision definition.  # noqa: E501

        :param key: The key of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this DecisionRequirementsDefinitionDto.  # noqa: E501

        The name of the decision requirements definition.  # noqa: E501

        :return: The name of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DecisionRequirementsDefinitionDto.

        The name of the decision requirements definition.  # noqa: E501

        :param name: The name of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this DecisionRequirementsDefinitionDto.  # noqa: E501

        The category of the decision requirements definition.  # noqa: E501

        :return: The category of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DecisionRequirementsDefinitionDto.

        The category of the decision requirements definition.  # noqa: E501

        :param category: The category of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def version(self):
        """Gets the version of this DecisionRequirementsDefinitionDto.  # noqa: E501

        The version of the decision requirements definition that the engine assigned to it.  # noqa: E501

        :return: The version of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DecisionRequirementsDefinitionDto.

        The version of the decision requirements definition that the engine assigned to it.  # noqa: E501

        :param version: The version of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def resource(self):
        """Gets the resource of this DecisionRequirementsDefinitionDto.  # noqa: E501

        The file name of the decision requirements definition.  # noqa: E501

        :return: The resource of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this DecisionRequirementsDefinitionDto.

        The file name of the decision requirements definition.  # noqa: E501

        :param resource: The resource of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def deployment_id(self):
        """Gets the deployment_id of this DecisionRequirementsDefinitionDto.  # noqa: E501

        The deployment id of the decision requirements definition.  # noqa: E501

        :return: The deployment_id of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this DecisionRequirementsDefinitionDto.

        The deployment id of the decision requirements definition.  # noqa: E501

        :param deployment_id: The deployment_id of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this DecisionRequirementsDefinitionDto.  # noqa: E501

        The tenant id of the decisionrequirements definition.  # noqa: E501

        :return: The tenant_id of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this DecisionRequirementsDefinitionDto.

        The tenant id of the decisionrequirements definition.  # noqa: E501

        :param tenant_id: The tenant_id of this DecisionRequirementsDefinitionDto.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecisionRequirementsDefinitionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DecisionRequirementsDefinitionDto):
            return True

        return self.to_dict() != other.to_dict()
