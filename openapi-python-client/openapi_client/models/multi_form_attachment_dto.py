# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MultiFormAttachmentDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attachment_name': 'str',
        'attachment_description': 'str',
        'attachment_type': 'str',
        'url': 'str',
        'content': 'file'
    }

    attribute_map = {
        'attachment_name': 'attachment-name',
        'attachment_description': 'attachment-description',
        'attachment_type': 'attachment-type',
        'url': 'url',
        'content': 'content'
    }

    def __init__(self, attachment_name=None, attachment_description=None, attachment_type=None, url=None, content=None, local_vars_configuration=None):  # noqa: E501
        """MultiFormAttachmentDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attachment_name = None
        self._attachment_description = None
        self._attachment_type = None
        self._url = None
        self._content = None
        self.discriminator = None

        if attachment_name is not None:
            self.attachment_name = attachment_name
        if attachment_description is not None:
            self.attachment_description = attachment_description
        if attachment_type is not None:
            self.attachment_type = attachment_type
        if url is not None:
            self.url = url
        self.content = content

    @property
    def attachment_name(self):
        """Gets the attachment_name of this MultiFormAttachmentDto.  # noqa: E501

        The name of the attachment.  # noqa: E501

        :return: The attachment_name of this MultiFormAttachmentDto.  # noqa: E501
        :rtype: str
        """
        return self._attachment_name

    @attachment_name.setter
    def attachment_name(self, attachment_name):
        """Sets the attachment_name of this MultiFormAttachmentDto.

        The name of the attachment.  # noqa: E501

        :param attachment_name: The attachment_name of this MultiFormAttachmentDto.  # noqa: E501
        :type: str
        """

        self._attachment_name = attachment_name

    @property
    def attachment_description(self):
        """Gets the attachment_description of this MultiFormAttachmentDto.  # noqa: E501

        The description of the attachment.  # noqa: E501

        :return: The attachment_description of this MultiFormAttachmentDto.  # noqa: E501
        :rtype: str
        """
        return self._attachment_description

    @attachment_description.setter
    def attachment_description(self, attachment_description):
        """Sets the attachment_description of this MultiFormAttachmentDto.

        The description of the attachment.  # noqa: E501

        :param attachment_description: The attachment_description of this MultiFormAttachmentDto.  # noqa: E501
        :type: str
        """

        self._attachment_description = attachment_description

    @property
    def attachment_type(self):
        """Gets the attachment_type of this MultiFormAttachmentDto.  # noqa: E501

        The type of the attachment.  # noqa: E501

        :return: The attachment_type of this MultiFormAttachmentDto.  # noqa: E501
        :rtype: str
        """
        return self._attachment_type

    @attachment_type.setter
    def attachment_type(self, attachment_type):
        """Sets the attachment_type of this MultiFormAttachmentDto.

        The type of the attachment.  # noqa: E501

        :param attachment_type: The attachment_type of this MultiFormAttachmentDto.  # noqa: E501
        :type: str
        """

        self._attachment_type = attachment_type

    @property
    def url(self):
        """Gets the url of this MultiFormAttachmentDto.  # noqa: E501

        The url to the remote content of the attachment.  # noqa: E501

        :return: The url of this MultiFormAttachmentDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MultiFormAttachmentDto.

        The url to the remote content of the attachment.  # noqa: E501

        :param url: The url of this MultiFormAttachmentDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def content(self):
        """Gets the content of this MultiFormAttachmentDto.  # noqa: E501

        The content of the attachment.  # noqa: E501

        :return: The content of this MultiFormAttachmentDto.  # noqa: E501
        :rtype: file
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this MultiFormAttachmentDto.

        The content of the attachment.  # noqa: E501

        :param content: The content of this MultiFormAttachmentDto.  # noqa: E501
        :type: file
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiFormAttachmentDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MultiFormAttachmentDto):
            return True

        return self.to_dict() != other.to_dict()
