# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AuthorizationExceptionDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'missing_authorizations': 'list[MissingAuthorizationDto]',
        'type': 'str',
        'message': 'str'
    }

    attribute_map = {
        'user_id': 'userId',
        'missing_authorizations': 'missingAuthorizations',
        'type': 'type',
        'message': 'message'
    }

    def __init__(self, user_id=None, missing_authorizations=None, type=None, message=None, local_vars_configuration=None):  # noqa: E501
        """AuthorizationExceptionDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._missing_authorizations = None
        self._type = None
        self._message = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if missing_authorizations is not None:
            self.missing_authorizations = missing_authorizations
        if type is not None:
            self.type = type
        if message is not None:
            self.message = message

    @property
    def user_id(self):
        """Gets the user_id of this AuthorizationExceptionDto.  # noqa: E501

        The id of the user that does not have expected permissions  # noqa: E501

        :return: The user_id of this AuthorizationExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuthorizationExceptionDto.

        The id of the user that does not have expected permissions  # noqa: E501

        :param user_id: The user_id of this AuthorizationExceptionDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def missing_authorizations(self):
        """Gets the missing_authorizations of this AuthorizationExceptionDto.  # noqa: E501


        :return: The missing_authorizations of this AuthorizationExceptionDto.  # noqa: E501
        :rtype: list[MissingAuthorizationDto]
        """
        return self._missing_authorizations

    @missing_authorizations.setter
    def missing_authorizations(self, missing_authorizations):
        """Sets the missing_authorizations of this AuthorizationExceptionDto.


        :param missing_authorizations: The missing_authorizations of this AuthorizationExceptionDto.  # noqa: E501
        :type: list[MissingAuthorizationDto]
        """

        self._missing_authorizations = missing_authorizations

    @property
    def type(self):
        """Gets the type of this AuthorizationExceptionDto.  # noqa: E501

        An exception class indicating the occurred error.  # noqa: E501

        :return: The type of this AuthorizationExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthorizationExceptionDto.

        An exception class indicating the occurred error.  # noqa: E501

        :param type: The type of this AuthorizationExceptionDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def message(self):
        """Gets the message of this AuthorizationExceptionDto.  # noqa: E501

        A detailed message of the error.  # noqa: E501

        :return: The message of this AuthorizationExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuthorizationExceptionDto.

        A detailed message of the error.  # noqa: E501

        :param message: The message of this AuthorizationExceptionDto.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationExceptionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthorizationExceptionDto):
            return True

        return self.to_dict() != other.to_dict()
