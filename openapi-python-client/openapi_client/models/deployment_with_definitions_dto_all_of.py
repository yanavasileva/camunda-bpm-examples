# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DeploymentWithDefinitionsDtoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deployed_process_definitions': 'dict(str, ProcessDefinitionDto)',
        'deployed_decision_definitions': 'dict(str, DecisionDefinitionDto)',
        'deployed_decision_requirements_definitions': 'dict(str, DecisionRequirementsDefinitionDto)',
        'deployed_case_definitions': 'dict(str, CaseDefinitionDto)'
    }

    attribute_map = {
        'deployed_process_definitions': 'deployedProcessDefinitions',
        'deployed_decision_definitions': 'deployedDecisionDefinitions',
        'deployed_decision_requirements_definitions': 'deployedDecisionRequirementsDefinitions',
        'deployed_case_definitions': 'deployedCaseDefinitions'
    }

    def __init__(self, deployed_process_definitions=None, deployed_decision_definitions=None, deployed_decision_requirements_definitions=None, deployed_case_definitions=None, local_vars_configuration=None):  # noqa: E501
        """DeploymentWithDefinitionsDtoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deployed_process_definitions = None
        self._deployed_decision_definitions = None
        self._deployed_decision_requirements_definitions = None
        self._deployed_case_definitions = None
        self.discriminator = None

        if deployed_process_definitions is not None:
            self.deployed_process_definitions = deployed_process_definitions
        if deployed_decision_definitions is not None:
            self.deployed_decision_definitions = deployed_decision_definitions
        if deployed_decision_requirements_definitions is not None:
            self.deployed_decision_requirements_definitions = deployed_decision_requirements_definitions
        if deployed_case_definitions is not None:
            self.deployed_case_definitions = deployed_case_definitions

    @property
    def deployed_process_definitions(self):
        """Gets the deployed_process_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501

        A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.  # noqa: E501

        :return: The deployed_process_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501
        :rtype: dict(str, ProcessDefinitionDto)
        """
        return self._deployed_process_definitions

    @deployed_process_definitions.setter
    def deployed_process_definitions(self, deployed_process_definitions):
        """Sets the deployed_process_definitions of this DeploymentWithDefinitionsDtoAllOf.

        A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.  # noqa: E501

        :param deployed_process_definitions: The deployed_process_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501
        :type: dict(str, ProcessDefinitionDto)
        """

        self._deployed_process_definitions = deployed_process_definitions

    @property
    def deployed_decision_definitions(self):
        """Gets the deployed_decision_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501

        A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.  # noqa: E501

        :return: The deployed_decision_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501
        :rtype: dict(str, DecisionDefinitionDto)
        """
        return self._deployed_decision_definitions

    @deployed_decision_definitions.setter
    def deployed_decision_definitions(self, deployed_decision_definitions):
        """Sets the deployed_decision_definitions of this DeploymentWithDefinitionsDtoAllOf.

        A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.  # noqa: E501

        :param deployed_decision_definitions: The deployed_decision_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501
        :type: dict(str, DecisionDefinitionDto)
        """

        self._deployed_decision_definitions = deployed_decision_definitions

    @property
    def deployed_decision_requirements_definitions(self):
        """Gets the deployed_decision_requirements_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501

        A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.  # noqa: E501

        :return: The deployed_decision_requirements_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501
        :rtype: dict(str, DecisionRequirementsDefinitionDto)
        """
        return self._deployed_decision_requirements_definitions

    @deployed_decision_requirements_definitions.setter
    def deployed_decision_requirements_definitions(self, deployed_decision_requirements_definitions):
        """Sets the deployed_decision_requirements_definitions of this DeploymentWithDefinitionsDtoAllOf.

        A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.  # noqa: E501

        :param deployed_decision_requirements_definitions: The deployed_decision_requirements_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501
        :type: dict(str, DecisionRequirementsDefinitionDto)
        """

        self._deployed_decision_requirements_definitions = deployed_decision_requirements_definitions

    @property
    def deployed_case_definitions(self):
        """Gets the deployed_case_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501

        A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.  # noqa: E501

        :return: The deployed_case_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501
        :rtype: dict(str, CaseDefinitionDto)
        """
        return self._deployed_case_definitions

    @deployed_case_definitions.setter
    def deployed_case_definitions(self, deployed_case_definitions):
        """Sets the deployed_case_definitions of this DeploymentWithDefinitionsDtoAllOf.

        A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.  # noqa: E501

        :param deployed_case_definitions: The deployed_case_definitions of this DeploymentWithDefinitionsDtoAllOf.  # noqa: E501
        :type: dict(str, CaseDefinitionDto)
        """

        self._deployed_case_definitions = deployed_case_definitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentWithDefinitionsDtoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeploymentWithDefinitionsDtoAllOf):
            return True

        return self.to_dict() != other.to_dict()
