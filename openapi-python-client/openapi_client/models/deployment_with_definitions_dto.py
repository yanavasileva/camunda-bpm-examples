# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DeploymentWithDefinitionsDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deployed_process_definitions': 'dict(str, ProcessDefinitionDto)',
        'deployed_decision_definitions': 'dict(str, DecisionDefinitionDto)',
        'deployed_decision_requirements_definitions': 'dict(str, DecisionRequirementsDefinitionDto)',
        'deployed_case_definitions': 'dict(str, CaseDefinitionDto)',
        'id': 'str',
        'tenant_id': 'str',
        'deployment_time': 'datetime',
        'source': 'str',
        'name': 'str',
        'links': 'list[AtomLink]'
    }

    attribute_map = {
        'deployed_process_definitions': 'deployedProcessDefinitions',
        'deployed_decision_definitions': 'deployedDecisionDefinitions',
        'deployed_decision_requirements_definitions': 'deployedDecisionRequirementsDefinitions',
        'deployed_case_definitions': 'deployedCaseDefinitions',
        'id': 'id',
        'tenant_id': 'tenantId',
        'deployment_time': 'deploymentTime',
        'source': 'source',
        'name': 'name',
        'links': 'links'
    }

    def __init__(self, deployed_process_definitions=None, deployed_decision_definitions=None, deployed_decision_requirements_definitions=None, deployed_case_definitions=None, id=None, tenant_id=None, deployment_time=None, source=None, name=None, links=None, local_vars_configuration=None):  # noqa: E501
        """DeploymentWithDefinitionsDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deployed_process_definitions = None
        self._deployed_decision_definitions = None
        self._deployed_decision_requirements_definitions = None
        self._deployed_case_definitions = None
        self._id = None
        self._tenant_id = None
        self._deployment_time = None
        self._source = None
        self._name = None
        self._links = None
        self.discriminator = None

        if deployed_process_definitions is not None:
            self.deployed_process_definitions = deployed_process_definitions
        if deployed_decision_definitions is not None:
            self.deployed_decision_definitions = deployed_decision_definitions
        if deployed_decision_requirements_definitions is not None:
            self.deployed_decision_requirements_definitions = deployed_decision_requirements_definitions
        if deployed_case_definitions is not None:
            self.deployed_case_definitions = deployed_case_definitions
        if id is not None:
            self.id = id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if deployment_time is not None:
            self.deployment_time = deployment_time
        if source is not None:
            self.source = source
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links

    @property
    def deployed_process_definitions(self):
        """Gets the deployed_process_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501

        A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.  # noqa: E501

        :return: The deployed_process_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: dict(str, ProcessDefinitionDto)
        """
        return self._deployed_process_definitions

    @deployed_process_definitions.setter
    def deployed_process_definitions(self, deployed_process_definitions):
        """Sets the deployed_process_definitions of this DeploymentWithDefinitionsDto.

        A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.  # noqa: E501

        :param deployed_process_definitions: The deployed_process_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: dict(str, ProcessDefinitionDto)
        """

        self._deployed_process_definitions = deployed_process_definitions

    @property
    def deployed_decision_definitions(self):
        """Gets the deployed_decision_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501

        A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.  # noqa: E501

        :return: The deployed_decision_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: dict(str, DecisionDefinitionDto)
        """
        return self._deployed_decision_definitions

    @deployed_decision_definitions.setter
    def deployed_decision_definitions(self, deployed_decision_definitions):
        """Sets the deployed_decision_definitions of this DeploymentWithDefinitionsDto.

        A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.  # noqa: E501

        :param deployed_decision_definitions: The deployed_decision_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: dict(str, DecisionDefinitionDto)
        """

        self._deployed_decision_definitions = deployed_decision_definitions

    @property
    def deployed_decision_requirements_definitions(self):
        """Gets the deployed_decision_requirements_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501

        A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.  # noqa: E501

        :return: The deployed_decision_requirements_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: dict(str, DecisionRequirementsDefinitionDto)
        """
        return self._deployed_decision_requirements_definitions

    @deployed_decision_requirements_definitions.setter
    def deployed_decision_requirements_definitions(self, deployed_decision_requirements_definitions):
        """Sets the deployed_decision_requirements_definitions of this DeploymentWithDefinitionsDto.

        A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.  # noqa: E501

        :param deployed_decision_requirements_definitions: The deployed_decision_requirements_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: dict(str, DecisionRequirementsDefinitionDto)
        """

        self._deployed_decision_requirements_definitions = deployed_decision_requirements_definitions

    @property
    def deployed_case_definitions(self):
        """Gets the deployed_case_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501

        A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.  # noqa: E501

        :return: The deployed_case_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: dict(str, CaseDefinitionDto)
        """
        return self._deployed_case_definitions

    @deployed_case_definitions.setter
    def deployed_case_definitions(self, deployed_case_definitions):
        """Sets the deployed_case_definitions of this DeploymentWithDefinitionsDto.

        A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.  # noqa: E501

        :param deployed_case_definitions: The deployed_case_definitions of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: dict(str, CaseDefinitionDto)
        """

        self._deployed_case_definitions = deployed_case_definitions

    @property
    def id(self):
        """Gets the id of this DeploymentWithDefinitionsDto.  # noqa: E501

        The id of the deployment.  # noqa: E501

        :return: The id of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeploymentWithDefinitionsDto.

        The id of the deployment.  # noqa: E501

        :param id: The id of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this DeploymentWithDefinitionsDto.  # noqa: E501

        The tenant id of the deployment.  # noqa: E501

        :return: The tenant_id of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this DeploymentWithDefinitionsDto.

        The tenant id of the deployment.  # noqa: E501

        :param tenant_id: The tenant_id of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def deployment_time(self):
        """Gets the deployment_time of this DeploymentWithDefinitionsDto.  # noqa: E501

        The time when the deployment was created.  # noqa: E501

        :return: The deployment_time of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: datetime
        """
        return self._deployment_time

    @deployment_time.setter
    def deployment_time(self, deployment_time):
        """Sets the deployment_time of this DeploymentWithDefinitionsDto.

        The time when the deployment was created.  # noqa: E501

        :param deployment_time: The deployment_time of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: datetime
        """

        self._deployment_time = deployment_time

    @property
    def source(self):
        """Gets the source of this DeploymentWithDefinitionsDto.  # noqa: E501

        The source of the deployment.  # noqa: E501

        :return: The source of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DeploymentWithDefinitionsDto.

        The source of the deployment.  # noqa: E501

        :param source: The source of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def name(self):
        """Gets the name of this DeploymentWithDefinitionsDto.  # noqa: E501

        The name of the deployment.  # noqa: E501

        :return: The name of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentWithDefinitionsDto.

        The name of the deployment.  # noqa: E501

        :param name: The name of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this DeploymentWithDefinitionsDto.  # noqa: E501

        The links associated to this resource, with `method`, `href` and `rel`.  # noqa: E501

        :return: The links of this DeploymentWithDefinitionsDto.  # noqa: E501
        :rtype: list[AtomLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DeploymentWithDefinitionsDto.

        The links associated to this resource, with `method`, `href` and `rel`.  # noqa: E501

        :param links: The links of this DeploymentWithDefinitionsDto.  # noqa: E501
        :type: list[AtomLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentWithDefinitionsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeploymentWithDefinitionsDto):
            return True

        return self.to_dict() != other.to_dict()
