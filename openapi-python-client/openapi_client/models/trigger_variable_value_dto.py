# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TriggerVariableValueDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'local': 'bool',
        'value': 'object',
        'type': 'str',
        'value_info': 'dict(str, object)'
    }

    attribute_map = {
        'local': 'local',
        'value': 'value',
        'type': 'type',
        'value_info': 'valueInfo'
    }

    def __init__(self, local=None, value=None, type=None, value_info=None, local_vars_configuration=None):  # noqa: E501
        """TriggerVariableValueDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._local = None
        self._value = None
        self._type = None
        self._value_info = None
        self.discriminator = None

        self.local = local
        if value is not None:
            self.value = value
        if type is not None:
            self.type = type
        if value_info is not None:
            self.value_info = value_info

    @property
    def local(self):
        """Gets the local of this TriggerVariableValueDto.  # noqa: E501

        Indicates whether the variable should be a local variable or not. If set to true, the variable becomes a local variable of the execution entering the target activity.  # noqa: E501

        :return: The local of this TriggerVariableValueDto.  # noqa: E501
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this TriggerVariableValueDto.

        Indicates whether the variable should be a local variable or not. If set to true, the variable becomes a local variable of the execution entering the target activity.  # noqa: E501

        :param local: The local of this TriggerVariableValueDto.  # noqa: E501
        :type: bool
        """

        self._local = local

    @property
    def value(self):
        """Gets the value of this TriggerVariableValueDto.  # noqa: E501

        The variable's value. Value differs depending on the variable's type and on the deserializeValues parameter.  # noqa: E501

        :return: The value of this TriggerVariableValueDto.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TriggerVariableValueDto.

        The variable's value. Value differs depending on the variable's type and on the deserializeValues parameter.  # noqa: E501

        :param value: The value of this TriggerVariableValueDto.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def type(self):
        """Gets the type of this TriggerVariableValueDto.  # noqa: E501

        The value type of the variable.  # noqa: E501

        :return: The type of this TriggerVariableValueDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TriggerVariableValueDto.

        The value type of the variable.  # noqa: E501

        :param type: The type of this TriggerVariableValueDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value_info(self):
        """Gets the value_info of this TriggerVariableValueDto.  # noqa: E501

        A JSON object containing additional, value-type-dependent properties. For serialized variables of type Object, the following properties can be provided:  * `objectTypeName`: A string representation of the object's type name. * `serializationDataFormat`: The serialization format used to store the variable.  For serialized variables of type File, the following properties can be provided:  * `filename`: The name of the file. This is not the variable name but the name that will be used when downloading the file again. * `mimetype`: The MIME type of the file that is being uploaded. * `encoding`: The encoding of the file that is being uploaded.  # noqa: E501

        :return: The value_info of this TriggerVariableValueDto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._value_info

    @value_info.setter
    def value_info(self, value_info):
        """Sets the value_info of this TriggerVariableValueDto.

        A JSON object containing additional, value-type-dependent properties. For serialized variables of type Object, the following properties can be provided:  * `objectTypeName`: A string representation of the object's type name. * `serializationDataFormat`: The serialization format used to store the variable.  For serialized variables of type File, the following properties can be provided:  * `filename`: The name of the file. This is not the variable name but the name that will be used when downloading the file again. * `mimetype`: The MIME type of the file that is being uploaded. * `encoding`: The encoding of the file that is being uploaded.  # noqa: E501

        :param value_info: The value_info of this TriggerVariableValueDto.  # noqa: E501
        :type: dict(str, object)
        """

        self._value_info = value_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TriggerVariableValueDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TriggerVariableValueDto):
            return True

        return self.to_dict() != other.to_dict()
