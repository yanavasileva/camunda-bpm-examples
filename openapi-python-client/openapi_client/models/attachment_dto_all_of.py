# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AttachmentDtoAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'task_id': 'str',
        'type': 'str',
        'url': 'str',
        'create_time': 'datetime',
        'removal_time': 'datetime',
        'root_process_instance_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'task_id': 'taskId',
        'type': 'type',
        'url': 'url',
        'create_time': 'createTime',
        'removal_time': 'removalTime',
        'root_process_instance_id': 'rootProcessInstanceId'
    }

    def __init__(self, id=None, name=None, description=None, task_id=None, type=None, url=None, create_time=None, removal_time=None, root_process_instance_id=None, local_vars_configuration=None):  # noqa: E501
        """AttachmentDtoAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._task_id = None
        self._type = None
        self._url = None
        self._create_time = None
        self._removal_time = None
        self._root_process_instance_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if task_id is not None:
            self.task_id = task_id
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if create_time is not None:
            self.create_time = create_time
        self.removal_time = removal_time
        if root_process_instance_id is not None:
            self.root_process_instance_id = root_process_instance_id

    @property
    def id(self):
        """Gets the id of this AttachmentDtoAllOf.  # noqa: E501

        The id of the task attachment.  # noqa: E501

        :return: The id of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttachmentDtoAllOf.

        The id of the task attachment.  # noqa: E501

        :param id: The id of this AttachmentDtoAllOf.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AttachmentDtoAllOf.  # noqa: E501

        The name of the task attachment.  # noqa: E501

        :return: The name of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentDtoAllOf.

        The name of the task attachment.  # noqa: E501

        :param name: The name of this AttachmentDtoAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AttachmentDtoAllOf.  # noqa: E501

        The description of the task attachment.  # noqa: E501

        :return: The description of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttachmentDtoAllOf.

        The description of the task attachment.  # noqa: E501

        :param description: The description of this AttachmentDtoAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def task_id(self):
        """Gets the task_id of this AttachmentDtoAllOf.  # noqa: E501

        The id of the task to which the attachment belongs.  # noqa: E501

        :return: The task_id of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this AttachmentDtoAllOf.

        The id of the task to which the attachment belongs.  # noqa: E501

        :param task_id: The task_id of this AttachmentDtoAllOf.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def type(self):
        """Gets the type of this AttachmentDtoAllOf.  # noqa: E501

        Indication of the type of content that this attachment refers to. Can be MIME type or any other indication.  # noqa: E501

        :return: The type of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttachmentDtoAllOf.

        Indication of the type of content that this attachment refers to. Can be MIME type or any other indication.  # noqa: E501

        :param type: The type of this AttachmentDtoAllOf.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this AttachmentDtoAllOf.  # noqa: E501

        The url to the remote content of the task attachment.  # noqa: E501

        :return: The url of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AttachmentDtoAllOf.

        The url to the remote content of the task attachment.  # noqa: E501

        :param url: The url of this AttachmentDtoAllOf.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def create_time(self):
        """Gets the create_time of this AttachmentDtoAllOf.  # noqa: E501

        The time the variable was inserted. [Default format](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  # noqa: E501

        :return: The create_time of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AttachmentDtoAllOf.

        The time the variable was inserted. [Default format](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  # noqa: E501

        :param create_time: The create_time of this AttachmentDtoAllOf.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def removal_time(self):
        """Gets the removal_time of this AttachmentDtoAllOf.  # noqa: E501

        The time after which the attachment should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  # noqa: E501

        :return: The removal_time of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._removal_time

    @removal_time.setter
    def removal_time(self, removal_time):
        """Sets the removal_time of this AttachmentDtoAllOf.

        The time after which the attachment should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  # noqa: E501

        :param removal_time: The removal_time of this AttachmentDtoAllOf.  # noqa: E501
        :type: datetime
        """

        self._removal_time = removal_time

    @property
    def root_process_instance_id(self):
        """Gets the root_process_instance_id of this AttachmentDtoAllOf.  # noqa: E501

        The process instance id of the root process instance that initiated the process containing the task.  # noqa: E501

        :return: The root_process_instance_id of this AttachmentDtoAllOf.  # noqa: E501
        :rtype: str
        """
        return self._root_process_instance_id

    @root_process_instance_id.setter
    def root_process_instance_id(self, root_process_instance_id):
        """Sets the root_process_instance_id of this AttachmentDtoAllOf.

        The process instance id of the root process instance that initiated the process containing the task.  # noqa: E501

        :param root_process_instance_id: The root_process_instance_id of this AttachmentDtoAllOf.  # noqa: E501
        :type: str
        """

        self._root_process_instance_id = root_process_instance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentDtoAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttachmentDtoAllOf):
            return True

        return self.to_dict() != other.to_dict()
