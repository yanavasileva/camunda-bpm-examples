# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProcessInstanceSuspensionStateAsyncDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'suspended': 'bool',
        'process_instance_ids': 'list[str]',
        'process_instance_query': 'ProcessInstanceQueryDto',
        'historic_process_instance_query': 'HistoricProcessInstanceQueryDto'
    }

    attribute_map = {
        'suspended': 'suspended',
        'process_instance_ids': 'processInstanceIds',
        'process_instance_query': 'processInstanceQuery',
        'historic_process_instance_query': 'historicProcessInstanceQuery'
    }

    def __init__(self, suspended=None, process_instance_ids=None, process_instance_query=None, historic_process_instance_query=None, local_vars_configuration=None):  # noqa: E501
        """ProcessInstanceSuspensionStateAsyncDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._suspended = None
        self._process_instance_ids = None
        self._process_instance_query = None
        self._historic_process_instance_query = None
        self.discriminator = None

        self.suspended = suspended
        if process_instance_ids is not None:
            self.process_instance_ids = process_instance_ids
        if process_instance_query is not None:
            self.process_instance_query = process_instance_query
        if historic_process_instance_query is not None:
            self.historic_process_instance_query = historic_process_instance_query

    @property
    def suspended(self):
        """Gets the suspended of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501

        A Boolean value which indicates whether to activate or suspend a given process instance. When the value is set to true, the given process instance will be suspended and when the value is set to false, the given process instance will be activated.  # noqa: E501

        :return: The suspended of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this ProcessInstanceSuspensionStateAsyncDto.

        A Boolean value which indicates whether to activate or suspend a given process instance. When the value is set to true, the given process instance will be suspended and when the value is set to false, the given process instance will be activated.  # noqa: E501

        :param suspended: The suspended of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501
        :type: bool
        """

        self._suspended = suspended

    @property
    def process_instance_ids(self):
        """Gets the process_instance_ids of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501

        A list of process instance ids which defines a group of process instances which will be activated or suspended by the operation.  # noqa: E501

        :return: The process_instance_ids of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._process_instance_ids

    @process_instance_ids.setter
    def process_instance_ids(self, process_instance_ids):
        """Sets the process_instance_ids of this ProcessInstanceSuspensionStateAsyncDto.

        A list of process instance ids which defines a group of process instances which will be activated or suspended by the operation.  # noqa: E501

        :param process_instance_ids: The process_instance_ids of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501
        :type: list[str]
        """

        self._process_instance_ids = process_instance_ids

    @property
    def process_instance_query(self):
        """Gets the process_instance_query of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501


        :return: The process_instance_query of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501
        :rtype: ProcessInstanceQueryDto
        """
        return self._process_instance_query

    @process_instance_query.setter
    def process_instance_query(self, process_instance_query):
        """Sets the process_instance_query of this ProcessInstanceSuspensionStateAsyncDto.


        :param process_instance_query: The process_instance_query of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501
        :type: ProcessInstanceQueryDto
        """

        self._process_instance_query = process_instance_query

    @property
    def historic_process_instance_query(self):
        """Gets the historic_process_instance_query of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501


        :return: The historic_process_instance_query of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501
        :rtype: HistoricProcessInstanceQueryDto
        """
        return self._historic_process_instance_query

    @historic_process_instance_query.setter
    def historic_process_instance_query(self, historic_process_instance_query):
        """Sets the historic_process_instance_query of this ProcessInstanceSuspensionStateAsyncDto.


        :param historic_process_instance_query: The historic_process_instance_query of this ProcessInstanceSuspensionStateAsyncDto.  # noqa: E501
        :type: HistoricProcessInstanceQueryDto
        """

        self._historic_process_instance_query = historic_process_instance_query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessInstanceSuspensionStateAsyncDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProcessInstanceSuspensionStateAsyncDto):
            return True

        return self.to_dict() != other.to_dict()
