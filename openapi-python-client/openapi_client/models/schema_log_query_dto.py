# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.13.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SchemaLogQueryDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'sorting': 'list[SchemaLogQueryDtoSorting]'
    }

    attribute_map = {
        'version': 'version',
        'sorting': 'sorting'
    }

    def __init__(self, version=None, sorting=None, local_vars_configuration=None):  # noqa: E501
        """SchemaLogQueryDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._sorting = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if sorting is not None:
            self.sorting = sorting

    @property
    def version(self):
        """Gets the version of this SchemaLogQueryDto.  # noqa: E501

        The version of the schema.  # noqa: E501

        :return: The version of this SchemaLogQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SchemaLogQueryDto.

        The version of the schema.  # noqa: E501

        :param version: The version of this SchemaLogQueryDto.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def sorting(self):
        """Gets the sorting of this SchemaLogQueryDto.  # noqa: E501

        A JSON array of criteria to sort the result by. Each element of the array is                       a JSON object that specifies one ordering. The position in the array                       identifies the rank of an ordering, i.e., whether it is primary, secondary,                       etc.   # noqa: E501

        :return: The sorting of this SchemaLogQueryDto.  # noqa: E501
        :rtype: list[SchemaLogQueryDtoSorting]
        """
        return self._sorting

    @sorting.setter
    def sorting(self, sorting):
        """Sets the sorting of this SchemaLogQueryDto.

        A JSON array of criteria to sort the result by. Each element of the array is                       a JSON object that specifies one ordering. The position in the array                       identifies the rank of an ordering, i.e., whether it is primary, secondary,                       etc.   # noqa: E501

        :param sorting: The sorting of this SchemaLogQueryDto.  # noqa: E501
        :type: list[SchemaLogQueryDtoSorting]
        """

        self._sorting = sorting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaLogQueryDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SchemaLogQueryDto):
            return True

        return self.to_dict() != other.to_dict()
