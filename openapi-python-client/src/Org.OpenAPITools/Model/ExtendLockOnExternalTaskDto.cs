/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExtendLockOnExternalTaskDto
    /// </summary>
    [DataContract]
    public partial class ExtendLockOnExternalTaskDto :  IEquatable<ExtendLockOnExternalTaskDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtendLockOnExternalTaskDto" /> class.
        /// </summary>
        /// <param name="workerId">The ID of a worker who is locking the external task..</param>
        /// <param name="newDuration">An amount of time (in milliseconds). This is the new lock duration starting from the current moment..</param>
        public ExtendLockOnExternalTaskDto(string workerId = default(string), long newDuration = default(long))
        {
            this.WorkerId = workerId;
            this.NewDuration = newDuration;
        }
        
        /// <summary>
        /// The ID of a worker who is locking the external task.
        /// </summary>
        /// <value>The ID of a worker who is locking the external task.</value>
        [DataMember(Name="workerId", EmitDefaultValue=false)]
        public string WorkerId { get; set; }

        /// <summary>
        /// An amount of time (in milliseconds). This is the new lock duration starting from the current moment.
        /// </summary>
        /// <value>An amount of time (in milliseconds). This is the new lock duration starting from the current moment.</value>
        [DataMember(Name="newDuration", EmitDefaultValue=false)]
        public long NewDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtendLockOnExternalTaskDto {\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("  NewDuration: ").Append(NewDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtendLockOnExternalTaskDto);
        }

        /// <summary>
        /// Returns true if ExtendLockOnExternalTaskDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtendLockOnExternalTaskDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtendLockOnExternalTaskDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WorkerId == input.WorkerId ||
                    (this.WorkerId != null &&
                    this.WorkerId.Equals(input.WorkerId))
                ) && 
                (
                    this.NewDuration == input.NewDuration ||
                    (this.NewDuration != null &&
                    this.NewDuration.Equals(input.NewDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorkerId != null)
                    hashCode = hashCode * 59 + this.WorkerId.GetHashCode();
                if (this.NewDuration != null)
                    hashCode = hashCode * 59 + this.NewDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
