/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A JSON object corresponding to the Activity Instance tree of the given process instance.
    /// </summary>
    [DataContract]
    public partial class ActivityInstanceDto :  IEquatable<ActivityInstanceDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityInstanceDto" /> class.
        /// </summary>
        /// <param name="id">The id of the activity instance..</param>
        /// <param name="parentActivityInstanceId">The id of the parent activity instance, for example a sub process instance..</param>
        /// <param name="activityId">The id of the activity..</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activityType">The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., &#39;userTask&#39;).</param>
        /// <param name="processInstanceId">The id of the process instance this activity instance is part of..</param>
        /// <param name="processDefinitionId">The id of the process definition..</param>
        /// <param name="childActivityInstances">A list of child activity instances..</param>
        /// <param name="childTransitionInstances">A list of child transition instances. A transition instance represents an execution waiting in an asynchronous continuation..</param>
        /// <param name="executionIds">A list of execution ids..</param>
        /// <param name="incidentIds">A list of incident ids..</param>
        /// <param name="incidents">A list of JSON objects containing incident specific properties: * &#x60;id&#x60;: the id of the incident * &#x60;activityId&#x60;: the activity id in which the incident occurred.</param>
        public ActivityInstanceDto(string id = default(string), string parentActivityInstanceId = default(string), string activityId = default(string), string activityName = default(string), string activityType = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), List<ActivityInstanceDto> childActivityInstances = default(List<ActivityInstanceDto>), List<TransitionInstanceDto> childTransitionInstances = default(List<TransitionInstanceDto>), List<string> executionIds = default(List<string>), List<string> incidentIds = default(List<string>), List<ActivityInstanceIncidentDto> incidents = default(List<ActivityInstanceIncidentDto>))
        {
            this.Id = id;
            this.ParentActivityInstanceId = parentActivityInstanceId;
            this.ActivityId = activityId;
            this.ActivityName = activityName;
            this.ActivityType = activityType;
            this.ProcessInstanceId = processInstanceId;
            this.ProcessDefinitionId = processDefinitionId;
            this.ChildActivityInstances = childActivityInstances;
            this.ChildTransitionInstances = childTransitionInstances;
            this.ExecutionIds = executionIds;
            this.IncidentIds = incidentIds;
            this.Incidents = incidents;
        }
        
        /// <summary>
        /// The id of the activity instance.
        /// </summary>
        /// <value>The id of the activity instance.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the parent activity instance, for example a sub process instance.
        /// </summary>
        /// <value>The id of the parent activity instance, for example a sub process instance.</value>
        [DataMember(Name="parentActivityInstanceId", EmitDefaultValue=false)]
        public string ParentActivityInstanceId { get; set; }

        /// <summary>
        /// The id of the activity.
        /// </summary>
        /// <value>The id of the activity.</value>
        [DataMember(Name="activityId", EmitDefaultValue=false)]
        public string ActivityId { get; set; }

        /// <summary>
        /// The name of the activity
        /// </summary>
        /// <value>The name of the activity</value>
        [DataMember(Name="activityName", EmitDefaultValue=false)]
        public string ActivityName { get; set; }

        /// <summary>
        /// The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., &#39;userTask&#39;)
        /// </summary>
        /// <value>The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., &#39;userTask&#39;)</value>
        [DataMember(Name="activityType", EmitDefaultValue=false)]
        public string ActivityType { get; set; }

        /// <summary>
        /// The id of the process instance this activity instance is part of.
        /// </summary>
        /// <value>The id of the process instance this activity instance is part of.</value>
        [DataMember(Name="processInstanceId", EmitDefaultValue=false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// The id of the process definition.
        /// </summary>
        /// <value>The id of the process definition.</value>
        [DataMember(Name="processDefinitionId", EmitDefaultValue=false)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// A list of child activity instances.
        /// </summary>
        /// <value>A list of child activity instances.</value>
        [DataMember(Name="childActivityInstances", EmitDefaultValue=false)]
        public List<ActivityInstanceDto> ChildActivityInstances { get; set; }

        /// <summary>
        /// A list of child transition instances. A transition instance represents an execution waiting in an asynchronous continuation.
        /// </summary>
        /// <value>A list of child transition instances. A transition instance represents an execution waiting in an asynchronous continuation.</value>
        [DataMember(Name="childTransitionInstances", EmitDefaultValue=false)]
        public List<TransitionInstanceDto> ChildTransitionInstances { get; set; }

        /// <summary>
        /// A list of execution ids.
        /// </summary>
        /// <value>A list of execution ids.</value>
        [DataMember(Name="executionIds", EmitDefaultValue=false)]
        public List<string> ExecutionIds { get; set; }

        /// <summary>
        /// A list of incident ids.
        /// </summary>
        /// <value>A list of incident ids.</value>
        [DataMember(Name="incidentIds", EmitDefaultValue=false)]
        public List<string> IncidentIds { get; set; }

        /// <summary>
        /// A list of JSON objects containing incident specific properties: * &#x60;id&#x60;: the id of the incident * &#x60;activityId&#x60;: the activity id in which the incident occurred
        /// </summary>
        /// <value>A list of JSON objects containing incident specific properties: * &#x60;id&#x60;: the id of the incident * &#x60;activityId&#x60;: the activity id in which the incident occurred</value>
        [DataMember(Name="incidents", EmitDefaultValue=false)]
        public List<ActivityInstanceIncidentDto> Incidents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityInstanceDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentActivityInstanceId: ").Append(ParentActivityInstanceId).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  ActivityName: ").Append(ActivityName).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ChildActivityInstances: ").Append(ChildActivityInstances).Append("\n");
            sb.Append("  ChildTransitionInstances: ").Append(ChildTransitionInstances).Append("\n");
            sb.Append("  ExecutionIds: ").Append(ExecutionIds).Append("\n");
            sb.Append("  IncidentIds: ").Append(IncidentIds).Append("\n");
            sb.Append("  Incidents: ").Append(Incidents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityInstanceDto);
        }

        /// <summary>
        /// Returns true if ActivityInstanceDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityInstanceDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityInstanceDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ParentActivityInstanceId == input.ParentActivityInstanceId ||
                    (this.ParentActivityInstanceId != null &&
                    this.ParentActivityInstanceId.Equals(input.ParentActivityInstanceId))
                ) && 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                ) && 
                (
                    this.ActivityName == input.ActivityName ||
                    (this.ActivityName != null &&
                    this.ActivityName.Equals(input.ActivityName))
                ) && 
                (
                    this.ActivityType == input.ActivityType ||
                    (this.ActivityType != null &&
                    this.ActivityType.Equals(input.ActivityType))
                ) && 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.ProcessDefinitionId == input.ProcessDefinitionId ||
                    (this.ProcessDefinitionId != null &&
                    this.ProcessDefinitionId.Equals(input.ProcessDefinitionId))
                ) && 
                (
                    this.ChildActivityInstances == input.ChildActivityInstances ||
                    this.ChildActivityInstances != null &&
                    input.ChildActivityInstances != null &&
                    this.ChildActivityInstances.SequenceEqual(input.ChildActivityInstances)
                ) && 
                (
                    this.ChildTransitionInstances == input.ChildTransitionInstances ||
                    this.ChildTransitionInstances != null &&
                    input.ChildTransitionInstances != null &&
                    this.ChildTransitionInstances.SequenceEqual(input.ChildTransitionInstances)
                ) && 
                (
                    this.ExecutionIds == input.ExecutionIds ||
                    this.ExecutionIds != null &&
                    input.ExecutionIds != null &&
                    this.ExecutionIds.SequenceEqual(input.ExecutionIds)
                ) && 
                (
                    this.IncidentIds == input.IncidentIds ||
                    this.IncidentIds != null &&
                    input.IncidentIds != null &&
                    this.IncidentIds.SequenceEqual(input.IncidentIds)
                ) && 
                (
                    this.Incidents == input.Incidents ||
                    this.Incidents != null &&
                    input.Incidents != null &&
                    this.Incidents.SequenceEqual(input.Incidents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ParentActivityInstanceId != null)
                    hashCode = hashCode * 59 + this.ParentActivityInstanceId.GetHashCode();
                if (this.ActivityId != null)
                    hashCode = hashCode * 59 + this.ActivityId.GetHashCode();
                if (this.ActivityName != null)
                    hashCode = hashCode * 59 + this.ActivityName.GetHashCode();
                if (this.ActivityType != null)
                    hashCode = hashCode * 59 + this.ActivityType.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessDefinitionId != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionId.GetHashCode();
                if (this.ChildActivityInstances != null)
                    hashCode = hashCode * 59 + this.ChildActivityInstances.GetHashCode();
                if (this.ChildTransitionInstances != null)
                    hashCode = hashCode * 59 + this.ChildTransitionInstances.GetHashCode();
                if (this.ExecutionIds != null)
                    hashCode = hashCode * 59 + this.ExecutionIds.GetHashCode();
                if (this.IncidentIds != null)
                    hashCode = hashCode * 59 + this.IncidentIds.GetHashCode();
                if (this.Incidents != null)
                    hashCode = hashCode * 59 + this.Incidents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
