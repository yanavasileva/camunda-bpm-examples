/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeploymentWithDefinitionsDtoAllOf
    /// </summary>
    [DataContract]
    public partial class DeploymentWithDefinitionsDtoAllOf :  IEquatable<DeploymentWithDefinitionsDtoAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentWithDefinitionsDtoAllOf" /> class.
        /// </summary>
        /// <param name="deployedProcessDefinitions">A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition..</param>
        /// <param name="deployedDecisionDefinitions">A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition..</param>
        /// <param name="deployedDecisionRequirementsDefinitions">A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition..</param>
        /// <param name="deployedCaseDefinitions">A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition..</param>
        public DeploymentWithDefinitionsDtoAllOf(Dictionary<string, ProcessDefinitionDto> deployedProcessDefinitions = default(Dictionary<string, ProcessDefinitionDto>), Dictionary<string, DecisionDefinitionDto> deployedDecisionDefinitions = default(Dictionary<string, DecisionDefinitionDto>), Dictionary<string, DecisionRequirementsDefinitionDto> deployedDecisionRequirementsDefinitions = default(Dictionary<string, DecisionRequirementsDefinitionDto>), Dictionary<string, CaseDefinitionDto> deployedCaseDefinitions = default(Dictionary<string, CaseDefinitionDto>))
        {
            this.DeployedProcessDefinitions = deployedProcessDefinitions;
            this.DeployedDecisionDefinitions = deployedDecisionDefinitions;
            this.DeployedDecisionRequirementsDefinitions = deployedDecisionRequirementsDefinitions;
            this.DeployedCaseDefinitions = deployedCaseDefinitions;
        }
        
        /// <summary>
        /// A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.
        /// </summary>
        /// <value>A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.</value>
        [DataMember(Name="deployedProcessDefinitions", EmitDefaultValue=false)]
        public Dictionary<string, ProcessDefinitionDto> DeployedProcessDefinitions { get; set; }

        /// <summary>
        /// A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
        /// </summary>
        /// <value>A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.</value>
        [DataMember(Name="deployedDecisionDefinitions", EmitDefaultValue=false)]
        public Dictionary<string, DecisionDefinitionDto> DeployedDecisionDefinitions { get; set; }

        /// <summary>
        /// A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
        /// </summary>
        /// <value>A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.</value>
        [DataMember(Name="deployedDecisionRequirementsDefinitions", EmitDefaultValue=false)]
        public Dictionary<string, DecisionRequirementsDefinitionDto> DeployedDecisionRequirementsDefinitions { get; set; }

        /// <summary>
        /// A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.
        /// </summary>
        /// <value>A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.</value>
        [DataMember(Name="deployedCaseDefinitions", EmitDefaultValue=false)]
        public Dictionary<string, CaseDefinitionDto> DeployedCaseDefinitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeploymentWithDefinitionsDtoAllOf {\n");
            sb.Append("  DeployedProcessDefinitions: ").Append(DeployedProcessDefinitions).Append("\n");
            sb.Append("  DeployedDecisionDefinitions: ").Append(DeployedDecisionDefinitions).Append("\n");
            sb.Append("  DeployedDecisionRequirementsDefinitions: ").Append(DeployedDecisionRequirementsDefinitions).Append("\n");
            sb.Append("  DeployedCaseDefinitions: ").Append(DeployedCaseDefinitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeploymentWithDefinitionsDtoAllOf);
        }

        /// <summary>
        /// Returns true if DeploymentWithDefinitionsDtoAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of DeploymentWithDefinitionsDtoAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeploymentWithDefinitionsDtoAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeployedProcessDefinitions == input.DeployedProcessDefinitions ||
                    this.DeployedProcessDefinitions != null &&
                    input.DeployedProcessDefinitions != null &&
                    this.DeployedProcessDefinitions.SequenceEqual(input.DeployedProcessDefinitions)
                ) && 
                (
                    this.DeployedDecisionDefinitions == input.DeployedDecisionDefinitions ||
                    this.DeployedDecisionDefinitions != null &&
                    input.DeployedDecisionDefinitions != null &&
                    this.DeployedDecisionDefinitions.SequenceEqual(input.DeployedDecisionDefinitions)
                ) && 
                (
                    this.DeployedDecisionRequirementsDefinitions == input.DeployedDecisionRequirementsDefinitions ||
                    this.DeployedDecisionRequirementsDefinitions != null &&
                    input.DeployedDecisionRequirementsDefinitions != null &&
                    this.DeployedDecisionRequirementsDefinitions.SequenceEqual(input.DeployedDecisionRequirementsDefinitions)
                ) && 
                (
                    this.DeployedCaseDefinitions == input.DeployedCaseDefinitions ||
                    this.DeployedCaseDefinitions != null &&
                    input.DeployedCaseDefinitions != null &&
                    this.DeployedCaseDefinitions.SequenceEqual(input.DeployedCaseDefinitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeployedProcessDefinitions != null)
                    hashCode = hashCode * 59 + this.DeployedProcessDefinitions.GetHashCode();
                if (this.DeployedDecisionDefinitions != null)
                    hashCode = hashCode * 59 + this.DeployedDecisionDefinitions.GetHashCode();
                if (this.DeployedDecisionRequirementsDefinitions != null)
                    hashCode = hashCode * 59 + this.DeployedDecisionRequirementsDefinitions.GetHashCode();
                if (this.DeployedCaseDefinitions != null)
                    hashCode = hashCode * 59 + this.DeployedCaseDefinitions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
