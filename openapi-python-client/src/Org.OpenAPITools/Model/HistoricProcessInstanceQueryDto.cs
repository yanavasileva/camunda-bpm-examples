/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A historic process instance query which defines a group of historic process instances
    /// </summary>
    [DataContract]
    public partial class HistoricProcessInstanceQueryDto :  IEquatable<HistoricProcessInstanceQueryDto>, IValidatableObject
    {
        /// <summary>
        /// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
        /// </summary>
        /// <value>Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncidentStatusEnum
        {
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,

            /// <summary>
            /// Enum Resolved for value: resolved
            /// </summary>
            [EnumMember(Value = "resolved")]
            Resolved = 2

        }

        /// <summary>
        /// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
        /// </summary>
        /// <value>Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.</value>
        [DataMember(Name="incidentStatus", EmitDefaultValue=false)]
        public IncidentStatusEnum? IncidentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricProcessInstanceQueryDto" /> class.
        /// </summary>
        /// <param name="processInstanceId">Filter by process instance id..</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Must be a JSON array process instance ids..</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on..</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on..</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings..</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on..</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of..</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Must be a JSON array of process definition keys..</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key..</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of..</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances..</param>
        /// <param name="finished">Only include finished process instances. Value may only be true, as false is the default behavior. (default to false).</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be true, as false is the default behavior. (default to false).</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be true, as false is the default behavior. (default to false).</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be true, as false is the default behavior. (default to false).</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. .</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents..</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match..</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of..</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="startedBy">Only include process instances that were started by the given user..</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id..</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id..</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id..</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id..</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id..</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings..</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be true, as false is the default behavior..</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids..</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids..</param>
        /// <param name="active">Restrict to instances that are active..</param>
        /// <param name="suspended">Restrict to instances that are suspended..</param>
        /// <param name="completed">Restrict to instances that are completed..</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated..</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated..</param>
        /// <param name="variables">A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties &#x60;name&#x60;, &#x60;operator&#x60; and &#x60;value&#x60;. &#x60;name&#x60; (String) is the variable name, &#x60;operator&#x60; (String) is the comparison operator to be used and &#x60;value&#x60; the variable value. &#x60;value&#x60; may be String, Number or Boolean. Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;..</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to true variableName and variablename are treated as equal..</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to true variableValue and variablevalue are treated as equal..</param>
        /// <param name="orQueries">A JSON array of nested historic process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query&#39;s predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: sorting See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries..</param>
        /// <param name="sorting">Apply sorting of the result.</param>
        public HistoricProcessInstanceQueryDto(string processInstanceId = default(string), List<string> processInstanceIds = default(List<string>), string processDefinitionId = default(string), string processDefinitionKey = default(string), List<string> processDefinitionKeyIn = default(List<string>), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), List<string> processDefinitionKeyNotIn = default(List<string>), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = false, bool? unfinished = false, bool? withIncidents = false, bool? withRootIncidents = false, string incidentType = default(string), IncidentStatusEnum? incidentStatus = default(IncidentStatusEnum?), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), List<string> tenantIdIn = default(List<string>), bool? withoutTenantId = default(bool?), List<string> executedActivityIdIn = default(List<string>), List<string> activeActivityIdIn = default(List<string>), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), List<VariableQueryParameterDto> variables = default(List<VariableQueryParameterDto>), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), List<HistoricProcessInstanceQueryDto> orQueries = default(List<HistoricProcessInstanceQueryDto>), List<HistoricProcessInstanceQueryDtoSorting> sorting = default(List<HistoricProcessInstanceQueryDtoSorting>))
        {
            this.RootProcessInstances = rootProcessInstances;
            this.Finished = finished;
            this.Unfinished = unfinished;
            this.WithIncidents = withIncidents;
            this.WithRootIncidents = withRootIncidents;
            this.StartedBefore = startedBefore;
            this.StartedAfter = startedAfter;
            this.FinishedBefore = finishedBefore;
            this.FinishedAfter = finishedAfter;
            this.ExecutedActivityAfter = executedActivityAfter;
            this.ExecutedActivityBefore = executedActivityBefore;
            this.ExecutedJobAfter = executedJobAfter;
            this.ExecutedJobBefore = executedJobBefore;
            this.WithoutTenantId = withoutTenantId;
            this.Active = active;
            this.Suspended = suspended;
            this.Completed = completed;
            this.ExternallyTerminated = externallyTerminated;
            this.InternallyTerminated = internallyTerminated;
            this.VariableNamesIgnoreCase = variableNamesIgnoreCase;
            this.VariableValuesIgnoreCase = variableValuesIgnoreCase;
            this.ProcessInstanceId = processInstanceId;
            this.ProcessInstanceIds = processInstanceIds;
            this.ProcessDefinitionId = processDefinitionId;
            this.ProcessDefinitionKey = processDefinitionKey;
            this.ProcessDefinitionKeyIn = processDefinitionKeyIn;
            this.ProcessDefinitionName = processDefinitionName;
            this.ProcessDefinitionNameLike = processDefinitionNameLike;
            this.ProcessDefinitionKeyNotIn = processDefinitionKeyNotIn;
            this.ProcessInstanceBusinessKey = processInstanceBusinessKey;
            this.ProcessInstanceBusinessKeyLike = processInstanceBusinessKeyLike;
            this.RootProcessInstances = rootProcessInstances;
            // use default value if no "finished" provided
            if (finished == null)
            {
                this.Finished = false;
            }
            else
            {
                this.Finished = finished;
            }
            // use default value if no "unfinished" provided
            if (unfinished == null)
            {
                this.Unfinished = false;
            }
            else
            {
                this.Unfinished = unfinished;
            }
            // use default value if no "withIncidents" provided
            if (withIncidents == null)
            {
                this.WithIncidents = false;
            }
            else
            {
                this.WithIncidents = withIncidents;
            }
            // use default value if no "withRootIncidents" provided
            if (withRootIncidents == null)
            {
                this.WithRootIncidents = false;
            }
            else
            {
                this.WithRootIncidents = withRootIncidents;
            }
            this.IncidentType = incidentType;
            this.IncidentStatus = incidentStatus;
            this.IncidentMessage = incidentMessage;
            this.IncidentMessageLike = incidentMessageLike;
            this.StartedBefore = startedBefore;
            this.StartedAfter = startedAfter;
            this.FinishedBefore = finishedBefore;
            this.FinishedAfter = finishedAfter;
            this.ExecutedActivityAfter = executedActivityAfter;
            this.ExecutedActivityBefore = executedActivityBefore;
            this.ExecutedJobAfter = executedJobAfter;
            this.ExecutedJobBefore = executedJobBefore;
            this.StartedBy = startedBy;
            this.SuperProcessInstanceId = superProcessInstanceId;
            this.SubProcessInstanceId = subProcessInstanceId;
            this.SuperCaseInstanceId = superCaseInstanceId;
            this.SubCaseInstanceId = subCaseInstanceId;
            this.CaseInstanceId = caseInstanceId;
            this.TenantIdIn = tenantIdIn;
            this.WithoutTenantId = withoutTenantId;
            this.ExecutedActivityIdIn = executedActivityIdIn;
            this.ActiveActivityIdIn = activeActivityIdIn;
            this.Active = active;
            this.Suspended = suspended;
            this.Completed = completed;
            this.ExternallyTerminated = externallyTerminated;
            this.InternallyTerminated = internallyTerminated;
            this.Variables = variables;
            this.VariableNamesIgnoreCase = variableNamesIgnoreCase;
            this.VariableValuesIgnoreCase = variableValuesIgnoreCase;
            this.OrQueries = orQueries;
            this.Sorting = sorting;
        }
        
        /// <summary>
        /// Filter by process instance id.
        /// </summary>
        /// <value>Filter by process instance id.</value>
        [DataMember(Name="processInstanceId", EmitDefaultValue=false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Filter by process instance ids. Must be a JSON array process instance ids.
        /// </summary>
        /// <value>Filter by process instance ids. Must be a JSON array process instance ids.</value>
        [DataMember(Name="processInstanceIds", EmitDefaultValue=false)]
        public List<string> ProcessInstanceIds { get; set; }

        /// <summary>
        /// Filter by the process definition the instances run on.
        /// </summary>
        /// <value>Filter by the process definition the instances run on.</value>
        [DataMember(Name="processDefinitionId", EmitDefaultValue=false)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// Filter by the key of the process definition the instances run on.
        /// </summary>
        /// <value>Filter by the key of the process definition the instances run on.</value>
        [DataMember(Name="processDefinitionKey", EmitDefaultValue=false)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
        /// </summary>
        /// <value>Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings.</value>
        [DataMember(Name="processDefinitionKeyIn", EmitDefaultValue=false)]
        public List<string> ProcessDefinitionKeyIn { get; set; }

        /// <summary>
        /// Filter by the name of the process definition the instances run on.
        /// </summary>
        /// <value>Filter by the name of the process definition the instances run on.</value>
        [DataMember(Name="processDefinitionName", EmitDefaultValue=false)]
        public string ProcessDefinitionName { get; set; }

        /// <summary>
        /// Filter by process definition names that the parameter is a substring of.
        /// </summary>
        /// <value>Filter by process definition names that the parameter is a substring of.</value>
        [DataMember(Name="processDefinitionNameLike", EmitDefaultValue=false)]
        public string ProcessDefinitionNameLike { get; set; }

        /// <summary>
        /// Exclude instances that belong to a set of process definitions. Must be a JSON array of process definition keys.
        /// </summary>
        /// <value>Exclude instances that belong to a set of process definitions. Must be a JSON array of process definition keys.</value>
        [DataMember(Name="processDefinitionKeyNotIn", EmitDefaultValue=false)]
        public List<string> ProcessDefinitionKeyNotIn { get; set; }

        /// <summary>
        /// Filter by process instance business key.
        /// </summary>
        /// <value>Filter by process instance business key.</value>
        [DataMember(Name="processInstanceBusinessKey", EmitDefaultValue=false)]
        public string ProcessInstanceBusinessKey { get; set; }

        /// <summary>
        /// Filter by process instance business key that the parameter is a substring of.
        /// </summary>
        /// <value>Filter by process instance business key that the parameter is a substring of.</value>
        [DataMember(Name="processInstanceBusinessKeyLike", EmitDefaultValue=false)]
        public string ProcessInstanceBusinessKeyLike { get; set; }

        /// <summary>
        /// Restrict the query to all process instances that are top level process instances.
        /// </summary>
        /// <value>Restrict the query to all process instances that are top level process instances.</value>
        [DataMember(Name="rootProcessInstances", EmitDefaultValue=true)]
        public bool? RootProcessInstances { get; set; }

        /// <summary>
        /// Only include finished process instances. Value may only be true, as false is the default behavior.
        /// </summary>
        /// <value>Only include finished process instances. Value may only be true, as false is the default behavior.</value>
        [DataMember(Name="finished", EmitDefaultValue=true)]
        public bool? Finished { get; set; }

        /// <summary>
        /// Only include unfinished process instances. Value may only be true, as false is the default behavior.
        /// </summary>
        /// <value>Only include unfinished process instances. Value may only be true, as false is the default behavior.</value>
        [DataMember(Name="unfinished", EmitDefaultValue=true)]
        public bool? Unfinished { get; set; }

        /// <summary>
        /// Only include process instances which have an incident. Value may only be true, as false is the default behavior.
        /// </summary>
        /// <value>Only include process instances which have an incident. Value may only be true, as false is the default behavior.</value>
        [DataMember(Name="withIncidents", EmitDefaultValue=true)]
        public bool? WithIncidents { get; set; }

        /// <summary>
        /// Only include process instances which have a root incident. Value may only be true, as false is the default behavior.
        /// </summary>
        /// <value>Only include process instances which have a root incident. Value may only be true, as false is the default behavior.</value>
        [DataMember(Name="withRootIncidents", EmitDefaultValue=true)]
        public bool? WithRootIncidents { get; set; }

        /// <summary>
        /// Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. 
        /// </summary>
        /// <value>Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. </value>
        [DataMember(Name="incidentType", EmitDefaultValue=false)]
        public string IncidentType { get; set; }


        /// <summary>
        /// Filter by the incident message. Exact match.
        /// </summary>
        /// <value>Filter by the incident message. Exact match.</value>
        [DataMember(Name="incidentMessage", EmitDefaultValue=false)]
        public string IncidentMessage { get; set; }

        /// <summary>
        /// Filter by the incident message that the parameter is a substring of.
        /// </summary>
        /// <value>Filter by the incident message that the parameter is a substring of.</value>
        [DataMember(Name="incidentMessageLike", EmitDefaultValue=false)]
        public string IncidentMessageLike { get; set; }

        /// <summary>
        /// Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name="startedBefore", EmitDefaultValue=true)]
        public DateTime? StartedBefore { get; set; }

        /// <summary>
        /// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name="startedAfter", EmitDefaultValue=true)]
        public DateTime? StartedAfter { get; set; }

        /// <summary>
        /// Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name="finishedBefore", EmitDefaultValue=true)]
        public DateTime? FinishedBefore { get; set; }

        /// <summary>
        /// Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name="finishedAfter", EmitDefaultValue=true)]
        public DateTime? FinishedAfter { get; set; }

        /// <summary>
        /// Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name="executedActivityAfter", EmitDefaultValue=true)]
        public DateTime? ExecutedActivityAfter { get; set; }

        /// <summary>
        /// Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name="executedActivityBefore", EmitDefaultValue=true)]
        public DateTime? ExecutedActivityBefore { get; set; }

        /// <summary>
        /// Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name="executedJobAfter", EmitDefaultValue=true)]
        public DateTime? ExecutedJobAfter { get; set; }

        /// <summary>
        /// Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name="executedJobBefore", EmitDefaultValue=true)]
        public DateTime? ExecutedJobBefore { get; set; }

        /// <summary>
        /// Only include process instances that were started by the given user.
        /// </summary>
        /// <value>Only include process instances that were started by the given user.</value>
        [DataMember(Name="startedBy", EmitDefaultValue=false)]
        public string StartedBy { get; set; }

        /// <summary>
        /// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
        /// </summary>
        /// <value>Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.</value>
        [DataMember(Name="superProcessInstanceId", EmitDefaultValue=false)]
        public string SuperProcessInstanceId { get; set; }

        /// <summary>
        /// Restrict query to one process instance that has a sub process instance with the given id.
        /// </summary>
        /// <value>Restrict query to one process instance that has a sub process instance with the given id.</value>
        [DataMember(Name="subProcessInstanceId", EmitDefaultValue=false)]
        public string SubProcessInstanceId { get; set; }

        /// <summary>
        /// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
        /// </summary>
        /// <value>Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.</value>
        [DataMember(Name="superCaseInstanceId", EmitDefaultValue=false)]
        public string SuperCaseInstanceId { get; set; }

        /// <summary>
        /// Restrict query to one process instance that has a sub case instance with the given id.
        /// </summary>
        /// <value>Restrict query to one process instance that has a sub case instance with the given id.</value>
        [DataMember(Name="subCaseInstanceId", EmitDefaultValue=false)]
        public string SubCaseInstanceId { get; set; }

        /// <summary>
        /// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
        /// </summary>
        /// <value>Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.</value>
        [DataMember(Name="caseInstanceId", EmitDefaultValue=false)]
        public string CaseInstanceId { get; set; }

        /// <summary>
        /// Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.
        /// </summary>
        /// <value>Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.</value>
        [DataMember(Name="tenantIdIn", EmitDefaultValue=false)]
        public List<string> TenantIdIn { get; set; }

        /// <summary>
        /// Only include historic process instances which belong to no tenant. Value may only be true, as false is the default behavior.
        /// </summary>
        /// <value>Only include historic process instances which belong to no tenant. Value may only be true, as false is the default behavior.</value>
        [DataMember(Name="withoutTenantId", EmitDefaultValue=true)]
        public bool? WithoutTenantId { get; set; }

        /// <summary>
        /// Restrict to instances that executed an activity with one of given ids.
        /// </summary>
        /// <value>Restrict to instances that executed an activity with one of given ids.</value>
        [DataMember(Name="executedActivityIdIn", EmitDefaultValue=false)]
        public List<string> ExecutedActivityIdIn { get; set; }

        /// <summary>
        /// Restrict to instances that have an active activity with one of given ids.
        /// </summary>
        /// <value>Restrict to instances that have an active activity with one of given ids.</value>
        [DataMember(Name="activeActivityIdIn", EmitDefaultValue=false)]
        public List<string> ActiveActivityIdIn { get; set; }

        /// <summary>
        /// Restrict to instances that are active.
        /// </summary>
        /// <value>Restrict to instances that are active.</value>
        [DataMember(Name="active", EmitDefaultValue=true)]
        public bool? Active { get; set; }

        /// <summary>
        /// Restrict to instances that are suspended.
        /// </summary>
        /// <value>Restrict to instances that are suspended.</value>
        [DataMember(Name="suspended", EmitDefaultValue=true)]
        public bool? Suspended { get; set; }

        /// <summary>
        /// Restrict to instances that are completed.
        /// </summary>
        /// <value>Restrict to instances that are completed.</value>
        [DataMember(Name="completed", EmitDefaultValue=true)]
        public bool? Completed { get; set; }

        /// <summary>
        /// Restrict to instances that are externallyTerminated.
        /// </summary>
        /// <value>Restrict to instances that are externallyTerminated.</value>
        [DataMember(Name="externallyTerminated", EmitDefaultValue=true)]
        public bool? ExternallyTerminated { get; set; }

        /// <summary>
        /// Restrict to instances that are internallyTerminated.
        /// </summary>
        /// <value>Restrict to instances that are internallyTerminated.</value>
        [DataMember(Name="internallyTerminated", EmitDefaultValue=true)]
        public bool? InternallyTerminated { get; set; }

        /// <summary>
        /// A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties &#x60;name&#x60;, &#x60;operator&#x60; and &#x60;value&#x60;. &#x60;name&#x60; (String) is the variable name, &#x60;operator&#x60; (String) is the comparison operator to be used and &#x60;value&#x60; the variable value. &#x60;value&#x60; may be String, Number or Boolean. Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.
        /// </summary>
        /// <value>A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties &#x60;name&#x60;, &#x60;operator&#x60; and &#x60;value&#x60;. &#x60;name&#x60; (String) is the variable name, &#x60;operator&#x60; (String) is the comparison operator to be used and &#x60;value&#x60; the variable value. &#x60;value&#x60; may be String, Number or Boolean. Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.</value>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public List<VariableQueryParameterDto> Variables { get; set; }

        /// <summary>
        /// Match all variable names provided in variables case-insensitively. If set to true variableName and variablename are treated as equal.
        /// </summary>
        /// <value>Match all variable names provided in variables case-insensitively. If set to true variableName and variablename are treated as equal.</value>
        [DataMember(Name="variableNamesIgnoreCase", EmitDefaultValue=true)]
        public bool? VariableNamesIgnoreCase { get; set; }

        /// <summary>
        /// Match all variable values provided in variables case-insensitively. If set to true variableValue and variablevalue are treated as equal.
        /// </summary>
        /// <value>Match all variable values provided in variables case-insensitively. If set to true variableValue and variablevalue are treated as equal.</value>
        [DataMember(Name="variableValuesIgnoreCase", EmitDefaultValue=true)]
        public bool? VariableValuesIgnoreCase { get; set; }

        /// <summary>
        /// A JSON array of nested historic process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query&#39;s predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: sorting See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
        /// </summary>
        /// <value>A JSON array of nested historic process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query&#39;s predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: sorting See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.</value>
        [DataMember(Name="orQueries", EmitDefaultValue=false)]
        public List<HistoricProcessInstanceQueryDto> OrQueries { get; set; }

        /// <summary>
        /// Apply sorting of the result
        /// </summary>
        /// <value>Apply sorting of the result</value>
        [DataMember(Name="sorting", EmitDefaultValue=false)]
        public List<HistoricProcessInstanceQueryDtoSorting> Sorting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoricProcessInstanceQueryDto {\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessInstanceIds: ").Append(ProcessInstanceIds).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  ProcessDefinitionKeyIn: ").Append(ProcessDefinitionKeyIn).Append("\n");
            sb.Append("  ProcessDefinitionName: ").Append(ProcessDefinitionName).Append("\n");
            sb.Append("  ProcessDefinitionNameLike: ").Append(ProcessDefinitionNameLike).Append("\n");
            sb.Append("  ProcessDefinitionKeyNotIn: ").Append(ProcessDefinitionKeyNotIn).Append("\n");
            sb.Append("  ProcessInstanceBusinessKey: ").Append(ProcessInstanceBusinessKey).Append("\n");
            sb.Append("  ProcessInstanceBusinessKeyLike: ").Append(ProcessInstanceBusinessKeyLike).Append("\n");
            sb.Append("  RootProcessInstances: ").Append(RootProcessInstances).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Unfinished: ").Append(Unfinished).Append("\n");
            sb.Append("  WithIncidents: ").Append(WithIncidents).Append("\n");
            sb.Append("  WithRootIncidents: ").Append(WithRootIncidents).Append("\n");
            sb.Append("  IncidentType: ").Append(IncidentType).Append("\n");
            sb.Append("  IncidentStatus: ").Append(IncidentStatus).Append("\n");
            sb.Append("  IncidentMessage: ").Append(IncidentMessage).Append("\n");
            sb.Append("  IncidentMessageLike: ").Append(IncidentMessageLike).Append("\n");
            sb.Append("  StartedBefore: ").Append(StartedBefore).Append("\n");
            sb.Append("  StartedAfter: ").Append(StartedAfter).Append("\n");
            sb.Append("  FinishedBefore: ").Append(FinishedBefore).Append("\n");
            sb.Append("  FinishedAfter: ").Append(FinishedAfter).Append("\n");
            sb.Append("  ExecutedActivityAfter: ").Append(ExecutedActivityAfter).Append("\n");
            sb.Append("  ExecutedActivityBefore: ").Append(ExecutedActivityBefore).Append("\n");
            sb.Append("  ExecutedJobAfter: ").Append(ExecutedJobAfter).Append("\n");
            sb.Append("  ExecutedJobBefore: ").Append(ExecutedJobBefore).Append("\n");
            sb.Append("  StartedBy: ").Append(StartedBy).Append("\n");
            sb.Append("  SuperProcessInstanceId: ").Append(SuperProcessInstanceId).Append("\n");
            sb.Append("  SubProcessInstanceId: ").Append(SubProcessInstanceId).Append("\n");
            sb.Append("  SuperCaseInstanceId: ").Append(SuperCaseInstanceId).Append("\n");
            sb.Append("  SubCaseInstanceId: ").Append(SubCaseInstanceId).Append("\n");
            sb.Append("  CaseInstanceId: ").Append(CaseInstanceId).Append("\n");
            sb.Append("  TenantIdIn: ").Append(TenantIdIn).Append("\n");
            sb.Append("  WithoutTenantId: ").Append(WithoutTenantId).Append("\n");
            sb.Append("  ExecutedActivityIdIn: ").Append(ExecutedActivityIdIn).Append("\n");
            sb.Append("  ActiveActivityIdIn: ").Append(ActiveActivityIdIn).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  ExternallyTerminated: ").Append(ExternallyTerminated).Append("\n");
            sb.Append("  InternallyTerminated: ").Append(InternallyTerminated).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  VariableNamesIgnoreCase: ").Append(VariableNamesIgnoreCase).Append("\n");
            sb.Append("  VariableValuesIgnoreCase: ").Append(VariableValuesIgnoreCase).Append("\n");
            sb.Append("  OrQueries: ").Append(OrQueries).Append("\n");
            sb.Append("  Sorting: ").Append(Sorting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoricProcessInstanceQueryDto);
        }

        /// <summary>
        /// Returns true if HistoricProcessInstanceQueryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoricProcessInstanceQueryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoricProcessInstanceQueryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.ProcessInstanceIds == input.ProcessInstanceIds ||
                    this.ProcessInstanceIds != null &&
                    input.ProcessInstanceIds != null &&
                    this.ProcessInstanceIds.SequenceEqual(input.ProcessInstanceIds)
                ) && 
                (
                    this.ProcessDefinitionId == input.ProcessDefinitionId ||
                    (this.ProcessDefinitionId != null &&
                    this.ProcessDefinitionId.Equals(input.ProcessDefinitionId))
                ) && 
                (
                    this.ProcessDefinitionKey == input.ProcessDefinitionKey ||
                    (this.ProcessDefinitionKey != null &&
                    this.ProcessDefinitionKey.Equals(input.ProcessDefinitionKey))
                ) && 
                (
                    this.ProcessDefinitionKeyIn == input.ProcessDefinitionKeyIn ||
                    this.ProcessDefinitionKeyIn != null &&
                    input.ProcessDefinitionKeyIn != null &&
                    this.ProcessDefinitionKeyIn.SequenceEqual(input.ProcessDefinitionKeyIn)
                ) && 
                (
                    this.ProcessDefinitionName == input.ProcessDefinitionName ||
                    (this.ProcessDefinitionName != null &&
                    this.ProcessDefinitionName.Equals(input.ProcessDefinitionName))
                ) && 
                (
                    this.ProcessDefinitionNameLike == input.ProcessDefinitionNameLike ||
                    (this.ProcessDefinitionNameLike != null &&
                    this.ProcessDefinitionNameLike.Equals(input.ProcessDefinitionNameLike))
                ) && 
                (
                    this.ProcessDefinitionKeyNotIn == input.ProcessDefinitionKeyNotIn ||
                    this.ProcessDefinitionKeyNotIn != null &&
                    input.ProcessDefinitionKeyNotIn != null &&
                    this.ProcessDefinitionKeyNotIn.SequenceEqual(input.ProcessDefinitionKeyNotIn)
                ) && 
                (
                    this.ProcessInstanceBusinessKey == input.ProcessInstanceBusinessKey ||
                    (this.ProcessInstanceBusinessKey != null &&
                    this.ProcessInstanceBusinessKey.Equals(input.ProcessInstanceBusinessKey))
                ) && 
                (
                    this.ProcessInstanceBusinessKeyLike == input.ProcessInstanceBusinessKeyLike ||
                    (this.ProcessInstanceBusinessKeyLike != null &&
                    this.ProcessInstanceBusinessKeyLike.Equals(input.ProcessInstanceBusinessKeyLike))
                ) && 
                (
                    this.RootProcessInstances == input.RootProcessInstances ||
                    (this.RootProcessInstances != null &&
                    this.RootProcessInstances.Equals(input.RootProcessInstances))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.Unfinished == input.Unfinished ||
                    (this.Unfinished != null &&
                    this.Unfinished.Equals(input.Unfinished))
                ) && 
                (
                    this.WithIncidents == input.WithIncidents ||
                    (this.WithIncidents != null &&
                    this.WithIncidents.Equals(input.WithIncidents))
                ) && 
                (
                    this.WithRootIncidents == input.WithRootIncidents ||
                    (this.WithRootIncidents != null &&
                    this.WithRootIncidents.Equals(input.WithRootIncidents))
                ) && 
                (
                    this.IncidentType == input.IncidentType ||
                    (this.IncidentType != null &&
                    this.IncidentType.Equals(input.IncidentType))
                ) && 
                (
                    this.IncidentStatus == input.IncidentStatus ||
                    (this.IncidentStatus != null &&
                    this.IncidentStatus.Equals(input.IncidentStatus))
                ) && 
                (
                    this.IncidentMessage == input.IncidentMessage ||
                    (this.IncidentMessage != null &&
                    this.IncidentMessage.Equals(input.IncidentMessage))
                ) && 
                (
                    this.IncidentMessageLike == input.IncidentMessageLike ||
                    (this.IncidentMessageLike != null &&
                    this.IncidentMessageLike.Equals(input.IncidentMessageLike))
                ) && 
                (
                    this.StartedBefore == input.StartedBefore ||
                    (this.StartedBefore != null &&
                    this.StartedBefore.Equals(input.StartedBefore))
                ) && 
                (
                    this.StartedAfter == input.StartedAfter ||
                    (this.StartedAfter != null &&
                    this.StartedAfter.Equals(input.StartedAfter))
                ) && 
                (
                    this.FinishedBefore == input.FinishedBefore ||
                    (this.FinishedBefore != null &&
                    this.FinishedBefore.Equals(input.FinishedBefore))
                ) && 
                (
                    this.FinishedAfter == input.FinishedAfter ||
                    (this.FinishedAfter != null &&
                    this.FinishedAfter.Equals(input.FinishedAfter))
                ) && 
                (
                    this.ExecutedActivityAfter == input.ExecutedActivityAfter ||
                    (this.ExecutedActivityAfter != null &&
                    this.ExecutedActivityAfter.Equals(input.ExecutedActivityAfter))
                ) && 
                (
                    this.ExecutedActivityBefore == input.ExecutedActivityBefore ||
                    (this.ExecutedActivityBefore != null &&
                    this.ExecutedActivityBefore.Equals(input.ExecutedActivityBefore))
                ) && 
                (
                    this.ExecutedJobAfter == input.ExecutedJobAfter ||
                    (this.ExecutedJobAfter != null &&
                    this.ExecutedJobAfter.Equals(input.ExecutedJobAfter))
                ) && 
                (
                    this.ExecutedJobBefore == input.ExecutedJobBefore ||
                    (this.ExecutedJobBefore != null &&
                    this.ExecutedJobBefore.Equals(input.ExecutedJobBefore))
                ) && 
                (
                    this.StartedBy == input.StartedBy ||
                    (this.StartedBy != null &&
                    this.StartedBy.Equals(input.StartedBy))
                ) && 
                (
                    this.SuperProcessInstanceId == input.SuperProcessInstanceId ||
                    (this.SuperProcessInstanceId != null &&
                    this.SuperProcessInstanceId.Equals(input.SuperProcessInstanceId))
                ) && 
                (
                    this.SubProcessInstanceId == input.SubProcessInstanceId ||
                    (this.SubProcessInstanceId != null &&
                    this.SubProcessInstanceId.Equals(input.SubProcessInstanceId))
                ) && 
                (
                    this.SuperCaseInstanceId == input.SuperCaseInstanceId ||
                    (this.SuperCaseInstanceId != null &&
                    this.SuperCaseInstanceId.Equals(input.SuperCaseInstanceId))
                ) && 
                (
                    this.SubCaseInstanceId == input.SubCaseInstanceId ||
                    (this.SubCaseInstanceId != null &&
                    this.SubCaseInstanceId.Equals(input.SubCaseInstanceId))
                ) && 
                (
                    this.CaseInstanceId == input.CaseInstanceId ||
                    (this.CaseInstanceId != null &&
                    this.CaseInstanceId.Equals(input.CaseInstanceId))
                ) && 
                (
                    this.TenantIdIn == input.TenantIdIn ||
                    this.TenantIdIn != null &&
                    input.TenantIdIn != null &&
                    this.TenantIdIn.SequenceEqual(input.TenantIdIn)
                ) && 
                (
                    this.WithoutTenantId == input.WithoutTenantId ||
                    (this.WithoutTenantId != null &&
                    this.WithoutTenantId.Equals(input.WithoutTenantId))
                ) && 
                (
                    this.ExecutedActivityIdIn == input.ExecutedActivityIdIn ||
                    this.ExecutedActivityIdIn != null &&
                    input.ExecutedActivityIdIn != null &&
                    this.ExecutedActivityIdIn.SequenceEqual(input.ExecutedActivityIdIn)
                ) && 
                (
                    this.ActiveActivityIdIn == input.ActiveActivityIdIn ||
                    this.ActiveActivityIdIn != null &&
                    input.ActiveActivityIdIn != null &&
                    this.ActiveActivityIdIn.SequenceEqual(input.ActiveActivityIdIn)
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Suspended == input.Suspended ||
                    (this.Suspended != null &&
                    this.Suspended.Equals(input.Suspended))
                ) && 
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                ) && 
                (
                    this.ExternallyTerminated == input.ExternallyTerminated ||
                    (this.ExternallyTerminated != null &&
                    this.ExternallyTerminated.Equals(input.ExternallyTerminated))
                ) && 
                (
                    this.InternallyTerminated == input.InternallyTerminated ||
                    (this.InternallyTerminated != null &&
                    this.InternallyTerminated.Equals(input.InternallyTerminated))
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                ) && 
                (
                    this.VariableNamesIgnoreCase == input.VariableNamesIgnoreCase ||
                    (this.VariableNamesIgnoreCase != null &&
                    this.VariableNamesIgnoreCase.Equals(input.VariableNamesIgnoreCase))
                ) && 
                (
                    this.VariableValuesIgnoreCase == input.VariableValuesIgnoreCase ||
                    (this.VariableValuesIgnoreCase != null &&
                    this.VariableValuesIgnoreCase.Equals(input.VariableValuesIgnoreCase))
                ) && 
                (
                    this.OrQueries == input.OrQueries ||
                    this.OrQueries != null &&
                    input.OrQueries != null &&
                    this.OrQueries.SequenceEqual(input.OrQueries)
                ) && 
                (
                    this.Sorting == input.Sorting ||
                    this.Sorting != null &&
                    input.Sorting != null &&
                    this.Sorting.SequenceEqual(input.Sorting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessInstanceIds != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceIds.GetHashCode();
                if (this.ProcessDefinitionId != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionId.GetHashCode();
                if (this.ProcessDefinitionKey != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKey.GetHashCode();
                if (this.ProcessDefinitionKeyIn != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKeyIn.GetHashCode();
                if (this.ProcessDefinitionName != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionName.GetHashCode();
                if (this.ProcessDefinitionNameLike != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionNameLike.GetHashCode();
                if (this.ProcessDefinitionKeyNotIn != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKeyNotIn.GetHashCode();
                if (this.ProcessInstanceBusinessKey != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceBusinessKey.GetHashCode();
                if (this.ProcessInstanceBusinessKeyLike != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceBusinessKeyLike.GetHashCode();
                if (this.RootProcessInstances != null)
                    hashCode = hashCode * 59 + this.RootProcessInstances.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.Unfinished != null)
                    hashCode = hashCode * 59 + this.Unfinished.GetHashCode();
                if (this.WithIncidents != null)
                    hashCode = hashCode * 59 + this.WithIncidents.GetHashCode();
                if (this.WithRootIncidents != null)
                    hashCode = hashCode * 59 + this.WithRootIncidents.GetHashCode();
                if (this.IncidentType != null)
                    hashCode = hashCode * 59 + this.IncidentType.GetHashCode();
                if (this.IncidentStatus != null)
                    hashCode = hashCode * 59 + this.IncidentStatus.GetHashCode();
                if (this.IncidentMessage != null)
                    hashCode = hashCode * 59 + this.IncidentMessage.GetHashCode();
                if (this.IncidentMessageLike != null)
                    hashCode = hashCode * 59 + this.IncidentMessageLike.GetHashCode();
                if (this.StartedBefore != null)
                    hashCode = hashCode * 59 + this.StartedBefore.GetHashCode();
                if (this.StartedAfter != null)
                    hashCode = hashCode * 59 + this.StartedAfter.GetHashCode();
                if (this.FinishedBefore != null)
                    hashCode = hashCode * 59 + this.FinishedBefore.GetHashCode();
                if (this.FinishedAfter != null)
                    hashCode = hashCode * 59 + this.FinishedAfter.GetHashCode();
                if (this.ExecutedActivityAfter != null)
                    hashCode = hashCode * 59 + this.ExecutedActivityAfter.GetHashCode();
                if (this.ExecutedActivityBefore != null)
                    hashCode = hashCode * 59 + this.ExecutedActivityBefore.GetHashCode();
                if (this.ExecutedJobAfter != null)
                    hashCode = hashCode * 59 + this.ExecutedJobAfter.GetHashCode();
                if (this.ExecutedJobBefore != null)
                    hashCode = hashCode * 59 + this.ExecutedJobBefore.GetHashCode();
                if (this.StartedBy != null)
                    hashCode = hashCode * 59 + this.StartedBy.GetHashCode();
                if (this.SuperProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.SuperProcessInstanceId.GetHashCode();
                if (this.SubProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.SubProcessInstanceId.GetHashCode();
                if (this.SuperCaseInstanceId != null)
                    hashCode = hashCode * 59 + this.SuperCaseInstanceId.GetHashCode();
                if (this.SubCaseInstanceId != null)
                    hashCode = hashCode * 59 + this.SubCaseInstanceId.GetHashCode();
                if (this.CaseInstanceId != null)
                    hashCode = hashCode * 59 + this.CaseInstanceId.GetHashCode();
                if (this.TenantIdIn != null)
                    hashCode = hashCode * 59 + this.TenantIdIn.GetHashCode();
                if (this.WithoutTenantId != null)
                    hashCode = hashCode * 59 + this.WithoutTenantId.GetHashCode();
                if (this.ExecutedActivityIdIn != null)
                    hashCode = hashCode * 59 + this.ExecutedActivityIdIn.GetHashCode();
                if (this.ActiveActivityIdIn != null)
                    hashCode = hashCode * 59 + this.ActiveActivityIdIn.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Suspended != null)
                    hashCode = hashCode * 59 + this.Suspended.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                if (this.ExternallyTerminated != null)
                    hashCode = hashCode * 59 + this.ExternallyTerminated.GetHashCode();
                if (this.InternallyTerminated != null)
                    hashCode = hashCode * 59 + this.InternallyTerminated.GetHashCode();
                if (this.Variables != null)
                    hashCode = hashCode * 59 + this.Variables.GetHashCode();
                if (this.VariableNamesIgnoreCase != null)
                    hashCode = hashCode * 59 + this.VariableNamesIgnoreCase.GetHashCode();
                if (this.VariableValuesIgnoreCase != null)
                    hashCode = hashCode * 59 + this.VariableValuesIgnoreCase.GetHashCode();
                if (this.OrQueries != null)
                    hashCode = hashCode * 59 + this.OrQueries.GetHashCode();
                if (this.Sorting != null)
                    hashCode = hashCode * 59 + this.Sorting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
