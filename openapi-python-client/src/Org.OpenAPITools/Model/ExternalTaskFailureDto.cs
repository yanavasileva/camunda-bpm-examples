/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExternalTaskFailureDto
    /// </summary>
    [DataContract]
    public partial class ExternalTaskFailureDto :  IEquatable<ExternalTaskFailureDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskFailureDto" /> class.
        /// </summary>
        /// <param name="workerId">The id of the worker that reports the failure. Must match the id of the worker who has most recently locked the task..</param>
        /// <param name="errorMessage">An message indicating the reason of the failure..</param>
        /// <param name="errorDetails">A detailed error description..</param>
        /// <param name="retries">A number of how often the task should be retried. Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. The incident&#39;s message is set to the &#x60;errorMessage&#x60; parameter..</param>
        /// <param name="retryTimeout">A timeout in milliseconds before the external task becomes available again for fetching. Must be &gt;&#x3D; 0..</param>
        public ExternalTaskFailureDto(string workerId = default(string), string errorMessage = default(string), string errorDetails = default(string), int retries = default(int), long retryTimeout = default(long))
        {
            this.WorkerId = workerId;
            this.ErrorMessage = errorMessage;
            this.ErrorDetails = errorDetails;
            this.Retries = retries;
            this.RetryTimeout = retryTimeout;
        }
        
        /// <summary>
        /// The id of the worker that reports the failure. Must match the id of the worker who has most recently locked the task.
        /// </summary>
        /// <value>The id of the worker that reports the failure. Must match the id of the worker who has most recently locked the task.</value>
        [DataMember(Name="workerId", EmitDefaultValue=false)]
        public string WorkerId { get; set; }

        /// <summary>
        /// An message indicating the reason of the failure.
        /// </summary>
        /// <value>An message indicating the reason of the failure.</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// A detailed error description.
        /// </summary>
        /// <value>A detailed error description.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public string ErrorDetails { get; set; }

        /// <summary>
        /// A number of how often the task should be retried. Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. The incident&#39;s message is set to the &#x60;errorMessage&#x60; parameter.
        /// </summary>
        /// <value>A number of how often the task should be retried. Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. The incident&#39;s message is set to the &#x60;errorMessage&#x60; parameter.</value>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int Retries { get; set; }

        /// <summary>
        /// A timeout in milliseconds before the external task becomes available again for fetching. Must be &gt;&#x3D; 0.
        /// </summary>
        /// <value>A timeout in milliseconds before the external task becomes available again for fetching. Must be &gt;&#x3D; 0.</value>
        [DataMember(Name="retryTimeout", EmitDefaultValue=false)]
        public long RetryTimeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalTaskFailureDto {\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  RetryTimeout: ").Append(RetryTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalTaskFailureDto);
        }

        /// <summary>
        /// Returns true if ExternalTaskFailureDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalTaskFailureDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalTaskFailureDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WorkerId == input.WorkerId ||
                    (this.WorkerId != null &&
                    this.WorkerId.Equals(input.WorkerId))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    (this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(input.ErrorDetails))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                ) && 
                (
                    this.RetryTimeout == input.RetryTimeout ||
                    (this.RetryTimeout != null &&
                    this.RetryTimeout.Equals(input.RetryTimeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorkerId != null)
                    hashCode = hashCode * 59 + this.WorkerId.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.ErrorDetails != null)
                    hashCode = hashCode * 59 + this.ErrorDetails.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                if (this.RetryTimeout != null)
                    hashCode = hashCode * 59 + this.RetryTimeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
