/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MultiFormAttachmentDto
    /// </summary>
    [DataContract]
    public partial class MultiFormAttachmentDto :  IEquatable<MultiFormAttachmentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiFormAttachmentDto" /> class.
        /// </summary>
        /// <param name="attachmentName">The name of the attachment..</param>
        /// <param name="attachmentDescription">The description of the attachment..</param>
        /// <param name="attachmentType">The type of the attachment..</param>
        /// <param name="url">The url to the remote content of the attachment..</param>
        /// <param name="content">The content of the attachment..</param>
        public MultiFormAttachmentDto(string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream))
        {
            this.Content = content;
            this.AttachmentName = attachmentName;
            this.AttachmentDescription = attachmentDescription;
            this.AttachmentType = attachmentType;
            this.Url = url;
            this.Content = content;
        }
        
        /// <summary>
        /// The name of the attachment.
        /// </summary>
        /// <value>The name of the attachment.</value>
        [DataMember(Name="attachment-name", EmitDefaultValue=false)]
        public string AttachmentName { get; set; }

        /// <summary>
        /// The description of the attachment.
        /// </summary>
        /// <value>The description of the attachment.</value>
        [DataMember(Name="attachment-description", EmitDefaultValue=false)]
        public string AttachmentDescription { get; set; }

        /// <summary>
        /// The type of the attachment.
        /// </summary>
        /// <value>The type of the attachment.</value>
        [DataMember(Name="attachment-type", EmitDefaultValue=false)]
        public string AttachmentType { get; set; }

        /// <summary>
        /// The url to the remote content of the attachment.
        /// </summary>
        /// <value>The url to the remote content of the attachment.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The content of the attachment.
        /// </summary>
        /// <value>The content of the attachment.</value>
        [DataMember(Name="content", EmitDefaultValue=true)]
        public System.IO.Stream Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultiFormAttachmentDto {\n");
            sb.Append("  AttachmentName: ").Append(AttachmentName).Append("\n");
            sb.Append("  AttachmentDescription: ").Append(AttachmentDescription).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultiFormAttachmentDto);
        }

        /// <summary>
        /// Returns true if MultiFormAttachmentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of MultiFormAttachmentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultiFormAttachmentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentName == input.AttachmentName ||
                    (this.AttachmentName != null &&
                    this.AttachmentName.Equals(input.AttachmentName))
                ) && 
                (
                    this.AttachmentDescription == input.AttachmentDescription ||
                    (this.AttachmentDescription != null &&
                    this.AttachmentDescription.Equals(input.AttachmentDescription))
                ) && 
                (
                    this.AttachmentType == input.AttachmentType ||
                    (this.AttachmentType != null &&
                    this.AttachmentType.Equals(input.AttachmentType))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentName != null)
                    hashCode = hashCode * 59 + this.AttachmentName.GetHashCode();
                if (this.AttachmentDescription != null)
                    hashCode = hashCode * 59 + this.AttachmentDescription.GetHashCode();
                if (this.AttachmentType != null)
                    hashCode = hashCode * 59 + this.AttachmentType.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
