/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ParseExceptionDto
    /// </summary>
    [DataContract]
    public partial class ParseExceptionDto :  IEquatable<ParseExceptionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseExceptionDto" /> class.
        /// </summary>
        /// <param name="details">A JSON Object containing list of errors and warnings occurred during deployment..</param>
        /// <param name="type">An exception class indicating the occurred error..</param>
        /// <param name="message">A detailed message of the error..</param>
        public ParseExceptionDto(Dictionary<string, ResourceReportDto> details = default(Dictionary<string, ResourceReportDto>), string type = default(string), string message = default(string))
        {
            this.Details = details;
            this.Type = type;
            this.Message = message;
        }
        
        /// <summary>
        /// A JSON Object containing list of errors and warnings occurred during deployment.
        /// </summary>
        /// <value>A JSON Object containing list of errors and warnings occurred during deployment.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Dictionary<string, ResourceReportDto> Details { get; set; }

        /// <summary>
        /// An exception class indicating the occurred error.
        /// </summary>
        /// <value>An exception class indicating the occurred error.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// A detailed message of the error.
        /// </summary>
        /// <value>A detailed message of the error.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParseExceptionDto {\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParseExceptionDto);
        }

        /// <summary>
        /// Returns true if ParseExceptionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ParseExceptionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParseExceptionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
