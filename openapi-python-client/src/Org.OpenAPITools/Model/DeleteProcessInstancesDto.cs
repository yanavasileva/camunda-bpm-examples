/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeleteProcessInstancesDto
    /// </summary>
    [DataContract]
    public partial class DeleteProcessInstancesDto :  IEquatable<DeleteProcessInstancesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteProcessInstancesDto" /> class.
        /// </summary>
        /// <param name="processInstanceIds">A list process instance ids to delete..</param>
        /// <param name="deleteReason">A string with delete reason..</param>
        /// <param name="skipCustomListeners">Skip execution listener invocation for activities that are started or ended as part of this request..</param>
        /// <param name="skipSubprocesses">Skip deletion of the subprocesses related to deleted processes as part of this request..</param>
        /// <param name="processInstanceQuery">processInstanceQuery.</param>
        /// <param name="historicProcessInstanceQuery">historicProcessInstanceQuery.</param>
        public DeleteProcessInstancesDto(List<string> processInstanceIds = default(List<string>), string deleteReason = default(string), bool? skipCustomListeners = default(bool?), bool? skipSubprocesses = default(bool?), ProcessInstanceQueryDto processInstanceQuery = default(ProcessInstanceQueryDto), HistoricProcessInstanceQueryDto historicProcessInstanceQuery = default(HistoricProcessInstanceQueryDto))
        {
            this.SkipCustomListeners = skipCustomListeners;
            this.SkipSubprocesses = skipSubprocesses;
            this.ProcessInstanceIds = processInstanceIds;
            this.DeleteReason = deleteReason;
            this.SkipCustomListeners = skipCustomListeners;
            this.SkipSubprocesses = skipSubprocesses;
            this.ProcessInstanceQuery = processInstanceQuery;
            this.HistoricProcessInstanceQuery = historicProcessInstanceQuery;
        }
        
        /// <summary>
        /// A list process instance ids to delete.
        /// </summary>
        /// <value>A list process instance ids to delete.</value>
        [DataMember(Name="processInstanceIds", EmitDefaultValue=false)]
        public List<string> ProcessInstanceIds { get; set; }

        /// <summary>
        /// A string with delete reason.
        /// </summary>
        /// <value>A string with delete reason.</value>
        [DataMember(Name="deleteReason", EmitDefaultValue=false)]
        public string DeleteReason { get; set; }

        /// <summary>
        /// Skip execution listener invocation for activities that are started or ended as part of this request.
        /// </summary>
        /// <value>Skip execution listener invocation for activities that are started or ended as part of this request.</value>
        [DataMember(Name="skipCustomListeners", EmitDefaultValue=true)]
        public bool? SkipCustomListeners { get; set; }

        /// <summary>
        /// Skip deletion of the subprocesses related to deleted processes as part of this request.
        /// </summary>
        /// <value>Skip deletion of the subprocesses related to deleted processes as part of this request.</value>
        [DataMember(Name="skipSubprocesses", EmitDefaultValue=true)]
        public bool? SkipSubprocesses { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceQuery
        /// </summary>
        [DataMember(Name="processInstanceQuery", EmitDefaultValue=false)]
        public ProcessInstanceQueryDto ProcessInstanceQuery { get; set; }

        /// <summary>
        /// Gets or Sets HistoricProcessInstanceQuery
        /// </summary>
        [DataMember(Name="historicProcessInstanceQuery", EmitDefaultValue=false)]
        public HistoricProcessInstanceQueryDto HistoricProcessInstanceQuery { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeleteProcessInstancesDto {\n");
            sb.Append("  ProcessInstanceIds: ").Append(ProcessInstanceIds).Append("\n");
            sb.Append("  DeleteReason: ").Append(DeleteReason).Append("\n");
            sb.Append("  SkipCustomListeners: ").Append(SkipCustomListeners).Append("\n");
            sb.Append("  SkipSubprocesses: ").Append(SkipSubprocesses).Append("\n");
            sb.Append("  ProcessInstanceQuery: ").Append(ProcessInstanceQuery).Append("\n");
            sb.Append("  HistoricProcessInstanceQuery: ").Append(HistoricProcessInstanceQuery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeleteProcessInstancesDto);
        }

        /// <summary>
        /// Returns true if DeleteProcessInstancesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DeleteProcessInstancesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeleteProcessInstancesDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessInstanceIds == input.ProcessInstanceIds ||
                    this.ProcessInstanceIds != null &&
                    input.ProcessInstanceIds != null &&
                    this.ProcessInstanceIds.SequenceEqual(input.ProcessInstanceIds)
                ) && 
                (
                    this.DeleteReason == input.DeleteReason ||
                    (this.DeleteReason != null &&
                    this.DeleteReason.Equals(input.DeleteReason))
                ) && 
                (
                    this.SkipCustomListeners == input.SkipCustomListeners ||
                    (this.SkipCustomListeners != null &&
                    this.SkipCustomListeners.Equals(input.SkipCustomListeners))
                ) && 
                (
                    this.SkipSubprocesses == input.SkipSubprocesses ||
                    (this.SkipSubprocesses != null &&
                    this.SkipSubprocesses.Equals(input.SkipSubprocesses))
                ) && 
                (
                    this.ProcessInstanceQuery == input.ProcessInstanceQuery ||
                    (this.ProcessInstanceQuery != null &&
                    this.ProcessInstanceQuery.Equals(input.ProcessInstanceQuery))
                ) && 
                (
                    this.HistoricProcessInstanceQuery == input.HistoricProcessInstanceQuery ||
                    (this.HistoricProcessInstanceQuery != null &&
                    this.HistoricProcessInstanceQuery.Equals(input.HistoricProcessInstanceQuery))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessInstanceIds != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceIds.GetHashCode();
                if (this.DeleteReason != null)
                    hashCode = hashCode * 59 + this.DeleteReason.GetHashCode();
                if (this.SkipCustomListeners != null)
                    hashCode = hashCode * 59 + this.SkipCustomListeners.GetHashCode();
                if (this.SkipSubprocesses != null)
                    hashCode = hashCode * 59 + this.SkipSubprocesses.GetHashCode();
                if (this.ProcessInstanceQuery != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceQuery.GetHashCode();
                if (this.HistoricProcessInstanceQuery != null)
                    hashCode = hashCode * 59 + this.HistoricProcessInstanceQuery.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
