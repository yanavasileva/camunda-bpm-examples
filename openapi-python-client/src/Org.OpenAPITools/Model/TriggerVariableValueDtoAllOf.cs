/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TriggerVariableValueDtoAllOf
    /// </summary>
    [DataContract]
    public partial class TriggerVariableValueDtoAllOf :  IEquatable<TriggerVariableValueDtoAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerVariableValueDtoAllOf" /> class.
        /// </summary>
        /// <param name="local">Indicates whether the variable should be a local variable or not. If set to true, the variable becomes a local variable of the execution entering the target activity..</param>
        public TriggerVariableValueDtoAllOf(bool? local = default(bool?))
        {
            this.Local = local;
            this.Local = local;
        }
        
        /// <summary>
        /// Indicates whether the variable should be a local variable or not. If set to true, the variable becomes a local variable of the execution entering the target activity.
        /// </summary>
        /// <value>Indicates whether the variable should be a local variable or not. If set to true, the variable becomes a local variable of the execution entering the target activity.</value>
        [DataMember(Name="local", EmitDefaultValue=true)]
        public bool? Local { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TriggerVariableValueDtoAllOf {\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TriggerVariableValueDtoAllOf);
        }

        /// <summary>
        /// Returns true if TriggerVariableValueDtoAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of TriggerVariableValueDtoAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TriggerVariableValueDtoAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Local == input.Local ||
                    (this.Local != null &&
                    this.Local.Equals(input.Local))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Local != null)
                    hashCode = hashCode * 59 + this.Local.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
