/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExecutionDto
    /// </summary>
    [DataContract]
    public partial class ExecutionDto :  IEquatable<ExecutionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionDto" /> class.
        /// </summary>
        /// <param name="id">The id of the Execution..</param>
        /// <param name="processInstanceId">The id of the root of the execution tree representing the process instance..</param>
        /// <param name="ended">Indicates if the execution is ended..</param>
        /// <param name="tenantId">The id of the tenant this execution belongs to. Can be &#x60;null&#x60; if the execution belongs to no single tenant..</param>
        public ExecutionDto(string id = default(string), string processInstanceId = default(string), bool ended = default(bool), string tenantId = default(string))
        {
            this.Id = id;
            this.ProcessInstanceId = processInstanceId;
            this.Ended = ended;
            this.TenantId = tenantId;
        }
        
        /// <summary>
        /// The id of the Execution.
        /// </summary>
        /// <value>The id of the Execution.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the root of the execution tree representing the process instance.
        /// </summary>
        /// <value>The id of the root of the execution tree representing the process instance.</value>
        [DataMember(Name="processInstanceId", EmitDefaultValue=false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Indicates if the execution is ended.
        /// </summary>
        /// <value>Indicates if the execution is ended.</value>
        [DataMember(Name="ended", EmitDefaultValue=false)]
        public bool Ended { get; set; }

        /// <summary>
        /// The id of the tenant this execution belongs to. Can be &#x60;null&#x60; if the execution belongs to no single tenant.
        /// </summary>
        /// <value>The id of the tenant this execution belongs to. Can be &#x60;null&#x60; if the execution belongs to no single tenant.</value>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExecutionDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  Ended: ").Append(Ended).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutionDto);
        }

        /// <summary>
        /// Returns true if ExecutionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.Ended == input.Ended ||
                    (this.Ended != null &&
                    this.Ended.Equals(input.Ended))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.Ended != null)
                    hashCode = hashCode * 59 + this.Ended.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
