/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchDto
    /// </summary>
    [DataContract]
    public partial class BatchDto :  IEquatable<BatchDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchDto" /> class.
        /// </summary>
        /// <param name="id">The id of the batch..</param>
        /// <param name="type">The type of the batch..</param>
        /// <param name="totalJobs">The total jobs of a batch is the number of batch execution jobs required to complete the batch..</param>
        /// <param name="jobsCreated">The number of batch execution jobs already created by the seed job..</param>
        /// <param name="batchJobsPerSeed">The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property)..</param>
        /// <param name="invocationsPerBatchJob">Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times. E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job..</param>
        /// <param name="seedJobDefinitionId">The job definition id for the seed jobs of this batch..</param>
        /// <param name="monitorJobDefinitionId">The job definition id for the monitor jobs of this batch..</param>
        /// <param name="batchJobDefinitionId">The job definition id for the batch execution jobs of this batch..</param>
        /// <param name="suspended">Indicates whether this batch is suspended or not..</param>
        /// <param name="tenantId">The tenant id of the batch..</param>
        /// <param name="createUserId">The id of the user that created the batch..</param>
        public BatchDto(string id = default(string), string type = default(string), int totalJobs = default(int), int jobsCreated = default(int), int batchJobsPerSeed = default(int), int invocationsPerBatchJob = default(int), string seedJobDefinitionId = default(string), string monitorJobDefinitionId = default(string), string batchJobDefinitionId = default(string), bool suspended = default(bool), string tenantId = default(string), string createUserId = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.TotalJobs = totalJobs;
            this.JobsCreated = jobsCreated;
            this.BatchJobsPerSeed = batchJobsPerSeed;
            this.InvocationsPerBatchJob = invocationsPerBatchJob;
            this.SeedJobDefinitionId = seedJobDefinitionId;
            this.MonitorJobDefinitionId = monitorJobDefinitionId;
            this.BatchJobDefinitionId = batchJobDefinitionId;
            this.Suspended = suspended;
            this.TenantId = tenantId;
            this.CreateUserId = createUserId;
        }
        
        /// <summary>
        /// The id of the batch.
        /// </summary>
        /// <value>The id of the batch.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of the batch.
        /// </summary>
        /// <value>The type of the batch.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The total jobs of a batch is the number of batch execution jobs required to complete the batch.
        /// </summary>
        /// <value>The total jobs of a batch is the number of batch execution jobs required to complete the batch.</value>
        [DataMember(Name="totalJobs", EmitDefaultValue=false)]
        public int TotalJobs { get; set; }

        /// <summary>
        /// The number of batch execution jobs already created by the seed job.
        /// </summary>
        /// <value>The number of batch execution jobs already created by the seed job.</value>
        [DataMember(Name="jobsCreated", EmitDefaultValue=false)]
        public int JobsCreated { get; set; }

        /// <summary>
        /// The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property).
        /// </summary>
        /// <value>The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property).</value>
        [DataMember(Name="batchJobsPerSeed", EmitDefaultValue=false)]
        public int BatchJobsPerSeed { get; set; }

        /// <summary>
        /// Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times. E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job.
        /// </summary>
        /// <value>Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times. E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job.</value>
        [DataMember(Name="invocationsPerBatchJob", EmitDefaultValue=false)]
        public int InvocationsPerBatchJob { get; set; }

        /// <summary>
        /// The job definition id for the seed jobs of this batch.
        /// </summary>
        /// <value>The job definition id for the seed jobs of this batch.</value>
        [DataMember(Name="seedJobDefinitionId", EmitDefaultValue=false)]
        public string SeedJobDefinitionId { get; set; }

        /// <summary>
        /// The job definition id for the monitor jobs of this batch.
        /// </summary>
        /// <value>The job definition id for the monitor jobs of this batch.</value>
        [DataMember(Name="monitorJobDefinitionId", EmitDefaultValue=false)]
        public string MonitorJobDefinitionId { get; set; }

        /// <summary>
        /// The job definition id for the batch execution jobs of this batch.
        /// </summary>
        /// <value>The job definition id for the batch execution jobs of this batch.</value>
        [DataMember(Name="batchJobDefinitionId", EmitDefaultValue=false)]
        public string BatchJobDefinitionId { get; set; }

        /// <summary>
        /// Indicates whether this batch is suspended or not.
        /// </summary>
        /// <value>Indicates whether this batch is suspended or not.</value>
        [DataMember(Name="suspended", EmitDefaultValue=false)]
        public bool Suspended { get; set; }

        /// <summary>
        /// The tenant id of the batch.
        /// </summary>
        /// <value>The tenant id of the batch.</value>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string TenantId { get; set; }

        /// <summary>
        /// The id of the user that created the batch.
        /// </summary>
        /// <value>The id of the user that created the batch.</value>
        [DataMember(Name="createUserId", EmitDefaultValue=false)]
        public string CreateUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TotalJobs: ").Append(TotalJobs).Append("\n");
            sb.Append("  JobsCreated: ").Append(JobsCreated).Append("\n");
            sb.Append("  BatchJobsPerSeed: ").Append(BatchJobsPerSeed).Append("\n");
            sb.Append("  InvocationsPerBatchJob: ").Append(InvocationsPerBatchJob).Append("\n");
            sb.Append("  SeedJobDefinitionId: ").Append(SeedJobDefinitionId).Append("\n");
            sb.Append("  MonitorJobDefinitionId: ").Append(MonitorJobDefinitionId).Append("\n");
            sb.Append("  BatchJobDefinitionId: ").Append(BatchJobDefinitionId).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchDto);
        }

        /// <summary>
        /// Returns true if BatchDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TotalJobs == input.TotalJobs ||
                    (this.TotalJobs != null &&
                    this.TotalJobs.Equals(input.TotalJobs))
                ) && 
                (
                    this.JobsCreated == input.JobsCreated ||
                    (this.JobsCreated != null &&
                    this.JobsCreated.Equals(input.JobsCreated))
                ) && 
                (
                    this.BatchJobsPerSeed == input.BatchJobsPerSeed ||
                    (this.BatchJobsPerSeed != null &&
                    this.BatchJobsPerSeed.Equals(input.BatchJobsPerSeed))
                ) && 
                (
                    this.InvocationsPerBatchJob == input.InvocationsPerBatchJob ||
                    (this.InvocationsPerBatchJob != null &&
                    this.InvocationsPerBatchJob.Equals(input.InvocationsPerBatchJob))
                ) && 
                (
                    this.SeedJobDefinitionId == input.SeedJobDefinitionId ||
                    (this.SeedJobDefinitionId != null &&
                    this.SeedJobDefinitionId.Equals(input.SeedJobDefinitionId))
                ) && 
                (
                    this.MonitorJobDefinitionId == input.MonitorJobDefinitionId ||
                    (this.MonitorJobDefinitionId != null &&
                    this.MonitorJobDefinitionId.Equals(input.MonitorJobDefinitionId))
                ) && 
                (
                    this.BatchJobDefinitionId == input.BatchJobDefinitionId ||
                    (this.BatchJobDefinitionId != null &&
                    this.BatchJobDefinitionId.Equals(input.BatchJobDefinitionId))
                ) && 
                (
                    this.Suspended == input.Suspended ||
                    (this.Suspended != null &&
                    this.Suspended.Equals(input.Suspended))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.CreateUserId == input.CreateUserId ||
                    (this.CreateUserId != null &&
                    this.CreateUserId.Equals(input.CreateUserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TotalJobs != null)
                    hashCode = hashCode * 59 + this.TotalJobs.GetHashCode();
                if (this.JobsCreated != null)
                    hashCode = hashCode * 59 + this.JobsCreated.GetHashCode();
                if (this.BatchJobsPerSeed != null)
                    hashCode = hashCode * 59 + this.BatchJobsPerSeed.GetHashCode();
                if (this.InvocationsPerBatchJob != null)
                    hashCode = hashCode * 59 + this.InvocationsPerBatchJob.GetHashCode();
                if (this.SeedJobDefinitionId != null)
                    hashCode = hashCode * 59 + this.SeedJobDefinitionId.GetHashCode();
                if (this.MonitorJobDefinitionId != null)
                    hashCode = hashCode * 59 + this.MonitorJobDefinitionId.GetHashCode();
                if (this.BatchJobDefinitionId != null)
                    hashCode = hashCode * 59 + this.BatchJobDefinitionId.GetHashCode();
                if (this.Suspended != null)
                    hashCode = hashCode * 59 + this.Suspended.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.CreateUserId != null)
                    hashCode = hashCode * 59 + this.CreateUserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
