/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProcessInstanceModificationDto
    /// </summary>
    [DataContract]
    public partial class ProcessInstanceModificationDto :  IEquatable<ProcessInstanceModificationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInstanceModificationDto" /> class.
        /// </summary>
        /// <param name="skipCustomListeners">Skip execution listener invocation for activities that are started or ended as part of this request..</param>
        /// <param name="skipIoMappings">Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/#input-output-variable-mapping) for activities that are started or ended as part of this request..</param>
        /// <param name="instructions">JSON array of modification instructions. The instructions are executed in the order they are in..</param>
        /// <param name="annotation">An arbitrary text annotation set by a user for auditing reasons..</param>
        public ProcessInstanceModificationDto(bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), List<ProcessInstanceModificationInstructionDto> instructions = default(List<ProcessInstanceModificationInstructionDto>), string annotation = default(string))
        {
            this.SkipCustomListeners = skipCustomListeners;
            this.SkipIoMappings = skipIoMappings;
            this.SkipCustomListeners = skipCustomListeners;
            this.SkipIoMappings = skipIoMappings;
            this.Instructions = instructions;
            this.Annotation = annotation;
        }
        
        /// <summary>
        /// Skip execution listener invocation for activities that are started or ended as part of this request.
        /// </summary>
        /// <value>Skip execution listener invocation for activities that are started or ended as part of this request.</value>
        [DataMember(Name="skipCustomListeners", EmitDefaultValue=true)]
        public bool? SkipCustomListeners { get; set; }

        /// <summary>
        /// Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/#input-output-variable-mapping) for activities that are started or ended as part of this request.
        /// </summary>
        /// <value>Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/#input-output-variable-mapping) for activities that are started or ended as part of this request.</value>
        [DataMember(Name="skipIoMappings", EmitDefaultValue=true)]
        public bool? SkipIoMappings { get; set; }

        /// <summary>
        /// JSON array of modification instructions. The instructions are executed in the order they are in.
        /// </summary>
        /// <value>JSON array of modification instructions. The instructions are executed in the order they are in.</value>
        [DataMember(Name="instructions", EmitDefaultValue=false)]
        public List<ProcessInstanceModificationInstructionDto> Instructions { get; set; }

        /// <summary>
        /// An arbitrary text annotation set by a user for auditing reasons.
        /// </summary>
        /// <value>An arbitrary text annotation set by a user for auditing reasons.</value>
        [DataMember(Name="annotation", EmitDefaultValue=false)]
        public string Annotation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessInstanceModificationDto {\n");
            sb.Append("  SkipCustomListeners: ").Append(SkipCustomListeners).Append("\n");
            sb.Append("  SkipIoMappings: ").Append(SkipIoMappings).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Annotation: ").Append(Annotation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessInstanceModificationDto);
        }

        /// <summary>
        /// Returns true if ProcessInstanceModificationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessInstanceModificationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessInstanceModificationDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SkipCustomListeners == input.SkipCustomListeners ||
                    (this.SkipCustomListeners != null &&
                    this.SkipCustomListeners.Equals(input.SkipCustomListeners))
                ) && 
                (
                    this.SkipIoMappings == input.SkipIoMappings ||
                    (this.SkipIoMappings != null &&
                    this.SkipIoMappings.Equals(input.SkipIoMappings))
                ) && 
                (
                    this.Instructions == input.Instructions ||
                    this.Instructions != null &&
                    input.Instructions != null &&
                    this.Instructions.SequenceEqual(input.Instructions)
                ) && 
                (
                    this.Annotation == input.Annotation ||
                    (this.Annotation != null &&
                    this.Annotation.Equals(input.Annotation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SkipCustomListeners != null)
                    hashCode = hashCode * 59 + this.SkipCustomListeners.GetHashCode();
                if (this.SkipIoMappings != null)
                    hashCode = hashCode * 59 + this.SkipIoMappings.GetHashCode();
                if (this.Instructions != null)
                    hashCode = hashCode * 59 + this.Instructions.GetHashCode();
                if (this.Annotation != null)
                    hashCode = hashCode * 59 + this.Annotation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
