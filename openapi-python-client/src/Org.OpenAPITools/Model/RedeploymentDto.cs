/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A JSON object with the following properties:
    /// </summary>
    [DataContract]
    public partial class RedeploymentDto :  IEquatable<RedeploymentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RedeploymentDto" /> class.
        /// </summary>
        /// <param name="resourceIds">A list of deployment resource ids to re-deploy..</param>
        /// <param name="resourceNames">A list of deployment resource names to re-deploy..</param>
        /// <param name="source">Sets the source of the deployment..</param>
        public RedeploymentDto(List<string> resourceIds = default(List<string>), List<string> resourceNames = default(List<string>), string source = default(string))
        {
            this.ResourceIds = resourceIds;
            this.ResourceNames = resourceNames;
            this.Source = source;
        }
        
        /// <summary>
        /// A list of deployment resource ids to re-deploy.
        /// </summary>
        /// <value>A list of deployment resource ids to re-deploy.</value>
        [DataMember(Name="resourceIds", EmitDefaultValue=false)]
        public List<string> ResourceIds { get; set; }

        /// <summary>
        /// A list of deployment resource names to re-deploy.
        /// </summary>
        /// <value>A list of deployment resource names to re-deploy.</value>
        [DataMember(Name="resourceNames", EmitDefaultValue=false)]
        public List<string> ResourceNames { get; set; }

        /// <summary>
        /// Sets the source of the deployment.
        /// </summary>
        /// <value>Sets the source of the deployment.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RedeploymentDto {\n");
            sb.Append("  ResourceIds: ").Append(ResourceIds).Append("\n");
            sb.Append("  ResourceNames: ").Append(ResourceNames).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RedeploymentDto);
        }

        /// <summary>
        /// Returns true if RedeploymentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RedeploymentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RedeploymentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceIds == input.ResourceIds ||
                    this.ResourceIds != null &&
                    input.ResourceIds != null &&
                    this.ResourceIds.SequenceEqual(input.ResourceIds)
                ) && 
                (
                    this.ResourceNames == input.ResourceNames ||
                    this.ResourceNames != null &&
                    input.ResourceNames != null &&
                    this.ResourceNames.SequenceEqual(input.ResourceNames)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceIds != null)
                    hashCode = hashCode * 59 + this.ResourceIds.GetHashCode();
                if (this.ResourceNames != null)
                    hashCode = hashCode * 59 + this.ResourceNames.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
