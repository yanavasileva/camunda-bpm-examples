/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessDefinitionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a running process instance by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteProcessDefinition (string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a running process instance by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessDefinitionWithHttpInfo (string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key which belong to no tenant id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteProcessDefinitionsByKey (string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key which belong to no tenant id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessDefinitionsByKeyWithHttpInfo (string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key and which belong to a tenant id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteProcessDefinitionsByKeyAndTenantId (string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key and which belong to a tenant id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfo (string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        List<ActivityStatisticsResultDto> GetActivityStatistics (string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsWithHttpInfo (string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        List<ActivityStatisticsResultDto> GetActivityStatisticsByProcessDefinitionKey (string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyWithHttpInfo (string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        List<ActivityStatisticsResultDto> GetActivityStatisticsByProcessDefinitionKeyAndTenantId (string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfo (string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDeployedStartForm (string id);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDeployedStartFormWithHttpInfo (string id);
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDeployedStartFormByKey (string key);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDeployedStartFormByKeyWithHttpInfo (string key);
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDeployedStartFormByKeyAndTenantId (string key, string tenantId);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDeployedStartFormByKeyAndTenantIdWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ProcessDefinitionDto</returns>
        ProcessDefinitionDto GetLatestProcessDefinitionByTenantId (string key, string tenantId);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        ApiResponse<ProcessDefinitionDto> GetLatestProcessDefinitionByTenantIdWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>ProcessDefinitionDto</returns>
        ProcessDefinitionDto GetProcessDefinition (string id);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        ApiResponse<ProcessDefinitionDto> GetProcessDefinitionWithHttpInfo (string id);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20Xml (string id);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlWithHttpInfo (string id);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20XmlByKey (string key);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyWithHttpInfo (string key);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20XmlByKeyAndTenantId (string key, string tenantId);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ProcessDefinitionDto</returns>
        ProcessDefinitionDto GetProcessDefinitionByKey (string key);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        ApiResponse<ProcessDefinitionDto> GetProcessDefinitionByKeyWithHttpInfo (string key);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetProcessDefinitionDiagram (string id);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetProcessDefinitionDiagramWithHttpInfo (string id);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetProcessDefinitionDiagramByKey (string key);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetProcessDefinitionDiagramByKeyWithHttpInfo (string key);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetProcessDefinitionDiagramByKeyAndTenantId (string key, string tenantId);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get Process Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        List<ProcessDefinitionStatisticsResultDto> GetProcessDefinitionStatistics (bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?));

        /// <summary>
        /// Get Process Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        ApiResponse<List<ProcessDefinitionStatisticsResultDto>> GetProcessDefinitionStatisticsWithHttpInfo (bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;ProcessDefinitionDto&gt;</returns>
        List<ProcessDefinitionDto> GetProcessDefinitions (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessDefinitionDto&gt;</returns>
        ApiResponse<List<ProcessDefinitionDto>> GetProcessDefinitionsWithHttpInfo (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetProcessDefinitionsCount (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetProcessDefinitionsCountWithHttpInfo (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?));
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetRenderedStartForm (string id);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetRenderedStartFormWithHttpInfo (string id);
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetRenderedStartFormByKey (string key);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetRenderedStartFormByKeyWithHttpInfo (string key);
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetRenderedStartFormByKeyAndTenantId (string key, string tenantId);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetRenderedStartFormByKeyAndTenantIdWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>FormDto</returns>
        FormDto GetStartForm (string id);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>ApiResponse of FormDto</returns>
        ApiResponse<FormDto> GetStartFormWithHttpInfo (string id);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>FormDto</returns>
        FormDto GetStartFormByKey (string key);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>ApiResponse of FormDto</returns>
        ApiResponse<FormDto> GetStartFormByKeyWithHttpInfo (string key);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>FormDto</returns>
        FormDto GetStartFormByKeyAndTenantId (string key, string tenantId);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of FormDto</returns>
        ApiResponse<FormDto> GetStartFormByKeyAndTenantIdWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetStartFormVariables (string id, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesWithHttpInfo (string id, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetStartFormVariablesByKey (string key, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyWithHttpInfo (string key, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetStartFormVariablesByKeyAndTenantId (string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAndTenantIdWithHttpInfo (string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Restart Process Instance
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns></returns>
        void RestartProcessInstance (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));

        /// <summary>
        /// Restart Process Instance
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestartProcessInstanceWithHttpInfo (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));
        /// <summary>
        /// Restart Process Instance Async
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto RestartProcessInstanceAsyncOperation (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));

        /// <summary>
        /// Restart Process Instance Async
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> RestartProcessInstanceAsyncOperationWithHttpInfo (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        ProcessInstanceWithVariablesDto StartProcessInstance (string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceWithHttpInfo (string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        ProcessInstanceWithVariablesDto StartProcessInstanceByKey (string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyWithHttpInfo (string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        ProcessInstanceWithVariablesDto StartProcessInstanceByKeyAndTenantId (string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAndTenantIdWithHttpInfo (string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        ProcessInstanceDto SubmitForm (string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        ApiResponse<ProcessInstanceDto> SubmitFormWithHttpInfo (string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        ProcessInstanceDto SubmitFormByKey (string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        ApiResponse<ProcessInstanceDto> SubmitFormByKeyWithHttpInfo (string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        ProcessInstanceDto SubmitFormByKeyAndTenantId (string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        ApiResponse<ProcessInstanceDto> SubmitFormByKeyAndTenantIdWithHttpInfo (string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByProcessDefinitionId (string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfo (string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByProcessDefinitionKey (string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfo (string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId (string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfo (string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Activate/Suspend By Key
        /// </summary>
        /// <remarks>
        /// Activates or suspends process definitions with the given process definition key.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns></returns>
        void UpdateProcessDefinitionSuspensionState (ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend By Key
        /// </summary>
        /// <remarks>
        /// Activates or suspends process definitions with the given process definition key.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessDefinitionSuspensionStateWithHttpInfo (ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        void UpdateProcessDefinitionSuspensionStateById (string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByIdWithHttpInfo (string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        void UpdateProcessDefinitionSuspensionStateByKey (string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfo (string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        void UpdateProcessDefinitionSuspensionStateByKeyAndTenantId (string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfo (string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a running process instance by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessDefinitionAsync (string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a running process instance by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionAsyncWithHttpInfo (string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key which belong to no tenant id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessDefinitionsByKeyAsync (string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key which belong to no tenant id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionsByKeyAsyncWithHttpInfo (string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key and which belong to a tenant id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessDefinitionsByKeyAndTenantIdAsync (string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key and which belong to a tenant id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionsByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsAsync (string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsAsyncWithHttpInfo (string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAsync (string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsByProcessDefinitionKeyAsyncWithHttpInfo (string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdAsync (string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDeployedStartFormAsync (string id);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDeployedStartFormAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDeployedStartFormByKeyAsync (string key);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDeployedStartFormByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDeployedStartFormByKeyAndTenantIdAsync (string key, string tenantId);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDeployedStartFormByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDto> GetLatestProcessDefinitionByTenantIdAsync (string key, string tenantId);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetLatestProcessDefinitionByTenantIdAsyncWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDto> GetProcessDefinitionAsync (string id);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetProcessDefinitionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlAsync (string id);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAsync (string key);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdAsync (string key, string tenantId);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDto> GetProcessDefinitionByKeyAsync (string key);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetProcessDefinitionByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetProcessDefinitionDiagramAsync (string id);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetProcessDefinitionDiagramAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetProcessDefinitionDiagramByKeyAsync (string key);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetProcessDefinitionDiagramByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetProcessDefinitionDiagramByKeyAndTenantIdAsync (string key, string tenantId);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetProcessDefinitionDiagramByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get Process Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>Task of List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessDefinitionStatisticsResultDto>> GetProcessDefinitionStatisticsAsync (bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?));

        /// <summary>
        /// Get Process Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDefinitionStatisticsResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessDefinitionStatisticsResultDto>>> GetProcessDefinitionStatisticsAsyncWithHttpInfo (bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of List&lt;ProcessDefinitionDto&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessDefinitionDto>> GetProcessDefinitionsAsync (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDefinitionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessDefinitionDto>>> GetProcessDefinitionsAsyncWithHttpInfo (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetProcessDefinitionsCountAsync (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetProcessDefinitionsCountAsyncWithHttpInfo (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?));
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRenderedStartFormAsync (string id);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRenderedStartFormAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRenderedStartFormByKeyAsync (string key);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRenderedStartFormByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRenderedStartFormByKeyAndTenantIdAsync (string key, string tenantId);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRenderedStartFormByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>Task of FormDto</returns>
        System.Threading.Tasks.Task<FormDto> GetStartFormAsync (string id);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>Task of FormDto</returns>
        System.Threading.Tasks.Task<FormDto> GetStartFormByKeyAsync (string key);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of FormDto</returns>
        System.Threading.Tasks.Task<FormDto> GetStartFormByKeyAndTenantIdAsync (string key, string tenantId);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId);
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesAsync (string id, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesAsyncWithHttpInfo (string id, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAsync (string key, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesByKeyAsyncWithHttpInfo (string key, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAndTenantIdAsync (string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Restart Process Instance
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestartProcessInstanceAsync (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));

        /// <summary>
        /// Restart Process Instance
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestartProcessInstanceAsyncWithHttpInfo (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));
        /// <summary>
        /// Restart Process Instance Async
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> RestartProcessInstanceAsyncOperationAsync (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));

        /// <summary>
        /// Restart Process Instance Async
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> RestartProcessInstanceAsyncOperationAsyncWithHttpInfo (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceAsync (string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceAsyncWithHttpInfo (string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAsync (string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceByKeyAsyncWithHttpInfo (string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAndTenantIdAsync (string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormAsync (string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormAsyncWithHttpInfo (string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormByKeyAsync (string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormByKeyAsyncWithHttpInfo (string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormByKeyAndTenantIdAsync (string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionIdAsync (string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionIdAsyncWithHttpInfo (string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionKeyAsync (string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionKeyAsyncWithHttpInfo (string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdAsync (string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Activate/Suspend By Key
        /// </summary>
        /// <remarks>
        /// Activates or suspends process definitions with the given process definition key.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateAsync (ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend By Key
        /// </summary>
        /// <remarks>
        /// Activates or suspends process definitions with the given process definition key.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateAsyncWithHttpInfo (ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByIdAsync (string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByIdAsyncWithHttpInfo (string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByKeyAsync (string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByKeyAsyncWithHttpInfo (string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdAsync (string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessDefinitionApi : IProcessDefinitionApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessDefinitionApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProcessDefinitionApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessDefinitionApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Deletes a running process instance by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteProcessDefinition (string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
             DeleteProcessDefinitionWithHttpInfo(id, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        /// Delete Deletes a running process instance by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProcessDefinitionWithHttpInfo (string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->DeleteProcessDefinition");

            var localVarPath = "/process-definition/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter
            if (skipCustomListeners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipCustomListeners", skipCustomListeners)); // query parameter
            if (skipIoMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipIoMappings", skipIoMappings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Deletes a running process instance by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessDefinitionAsync (string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
             await DeleteProcessDefinitionAsyncWithHttpInfo(id, cascade, skipCustomListeners, skipIoMappings);

        }

        /// <summary>
        /// Delete Deletes a running process instance by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionAsyncWithHttpInfo (string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->DeleteProcessDefinition");

            var localVarPath = "/process-definition/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter
            if (skipCustomListeners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipCustomListeners", skipCustomListeners)); // query parameter
            if (skipIoMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipIoMappings", skipIoMappings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key which belong to no tenant id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteProcessDefinitionsByKey (string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
             DeleteProcessDefinitionsByKeyWithHttpInfo(key, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key which belong to no tenant id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProcessDefinitionsByKeyWithHttpInfo (string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKey");

            var localVarPath = "/process-definition/key/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter
            if (skipCustomListeners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipCustomListeners", skipCustomListeners)); // query parameter
            if (skipIoMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipIoMappings", skipIoMappings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessDefinitionsByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key which belong to no tenant id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessDefinitionsByKeyAsync (string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
             await DeleteProcessDefinitionsByKeyAsyncWithHttpInfo(key, cascade, skipCustomListeners, skipIoMappings);

        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key which belong to no tenant id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionsByKeyAsyncWithHttpInfo (string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKey");

            var localVarPath = "/process-definition/key/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter
            if (skipCustomListeners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipCustomListeners", skipCustomListeners)); // query parameter
            if (skipIoMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipIoMappings", skipIoMappings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessDefinitionsByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key and which belong to a tenant id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteProcessDefinitionsByKeyAndTenantId (string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
             DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfo(key, tenantId, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key and which belong to a tenant id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfo (string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter
            if (skipCustomListeners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipCustomListeners", skipCustomListeners)); // query parameter
            if (skipIoMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipIoMappings", skipIoMappings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessDefinitionsByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key and which belong to a tenant id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessDefinitionsByKeyAndTenantIdAsync (string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
             await DeleteProcessDefinitionsByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId, cascade, skipCustomListeners, skipIoMappings);

        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key and which belong to a tenant id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionsByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter
            if (skipCustomListeners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipCustomListeners", skipCustomListeners)); // query parameter
            if (skipIoMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipIoMappings", skipIoMappings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessDefinitionsByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        public List<ActivityStatisticsResultDto> GetActivityStatistics (string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
             ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = GetActivityStatisticsWithHttpInfo(id, failedJobs, incidents, incidentsForType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsWithHttpInfo (string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetActivityStatistics");

            var localVarPath = "/process-definition/{id}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (failedJobs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failedJobs", failedJobs)); // query parameter
            if (incidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidents", incidents)); // query parameter
            if (incidentsForType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentsForType", incidentsForType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActivityStatisticsResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ActivityStatisticsResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActivityStatisticsResultDto>)));
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsAsync (string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
             ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = await GetActivityStatisticsAsyncWithHttpInfo(id, failedJobs, incidents, incidentsForType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsAsyncWithHttpInfo (string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetActivityStatistics");

            var localVarPath = "/process-definition/{id}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (failedJobs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failedJobs", failedJobs)); // query parameter
            if (incidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidents", incidents)); // query parameter
            if (incidentsForType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentsForType", incidentsForType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActivityStatisticsResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ActivityStatisticsResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActivityStatisticsResultDto>)));
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        public List<ActivityStatisticsResultDto> GetActivityStatisticsByProcessDefinitionKey (string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
             ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = GetActivityStatisticsByProcessDefinitionKeyWithHttpInfo(key, failedJobs, incidents, incidentsForType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyWithHttpInfo (string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKey");

            var localVarPath = "/process-definition/key/{key}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (failedJobs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failedJobs", failedJobs)); // query parameter
            if (incidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidents", incidents)); // query parameter
            if (incidentsForType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentsForType", incidentsForType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityStatisticsByProcessDefinitionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActivityStatisticsResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ActivityStatisticsResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActivityStatisticsResultDto>)));
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAsync (string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
             ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = await GetActivityStatisticsByProcessDefinitionKeyAsyncWithHttpInfo(key, failedJobs, incidents, incidentsForType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsByProcessDefinitionKeyAsyncWithHttpInfo (string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKey");

            var localVarPath = "/process-definition/key/{key}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (failedJobs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failedJobs", failedJobs)); // query parameter
            if (incidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidents", incidents)); // query parameter
            if (incidentsForType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentsForType", incidentsForType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityStatisticsByProcessDefinitionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActivityStatisticsResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ActivityStatisticsResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActivityStatisticsResultDto>)));
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        public List<ActivityStatisticsResultDto> GetActivityStatisticsByProcessDefinitionKeyAndTenantId (string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
             ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfo(key, tenantId, failedJobs, incidents, incidentsForType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfo (string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (failedJobs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failedJobs", failedJobs)); // query parameter
            if (incidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidents", incidents)); // query parameter
            if (incidentsForType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentsForType", incidentsForType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityStatisticsByProcessDefinitionKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActivityStatisticsResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ActivityStatisticsResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActivityStatisticsResultDto>)));
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdAsync (string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
             ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = await GetActivityStatisticsByProcessDefinitionKeyAndTenantIdAsyncWithHttpInfo(key, tenantId, failedJobs, incidents, incidentsForType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (failedJobs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failedJobs", failedJobs)); // query parameter
            if (incidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidents", incidents)); // query parameter
            if (incidentsForType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentsForType", incidentsForType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityStatisticsByProcessDefinitionKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActivityStatisticsResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ActivityStatisticsResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActivityStatisticsResultDto>)));
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDeployedStartForm (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDeployedStartFormWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDeployedStartFormWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetDeployedStartForm");

            var localVarPath = "/process-definition/{id}/deployed-start-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployedStartForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDeployedStartFormAsync (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDeployedStartFormAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDeployedStartFormAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetDeployedStartForm");

            var localVarPath = "/process-definition/{id}/deployed-start-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployedStartForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDeployedStartFormByKey (string key)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDeployedStartFormByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDeployedStartFormByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetDeployedStartFormByKey");

            var localVarPath = "/process-definition/key/{key}/deployed-start-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployedStartFormByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDeployedStartFormByKeyAsync (string key)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDeployedStartFormByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDeployedStartFormByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetDeployedStartFormByKey");

            var localVarPath = "/process-definition/key/{key}/deployed-start-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployedStartFormByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDeployedStartFormByKeyAndTenantId (string key, string tenantId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDeployedStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDeployedStartFormByKeyAndTenantIdWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetDeployedStartFormByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetDeployedStartFormByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/deployed-start-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployedStartFormByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDeployedStartFormByKeyAndTenantIdAsync (string key, string tenantId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDeployedStartFormByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDeployedStartFormByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetDeployedStartFormByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetDeployedStartFormByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/deployed-start-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployedStartFormByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ProcessDefinitionDto</returns>
        public ProcessDefinitionDto GetLatestProcessDefinitionByTenantId (string key, string tenantId)
        {
             ApiResponse<ProcessDefinitionDto> localVarResponse = GetLatestProcessDefinitionByTenantIdWithHttpInfo(key, tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        public ApiResponse<ProcessDefinitionDto> GetLatestProcessDefinitionByTenantIdWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetLatestProcessDefinitionByTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetLatestProcessDefinitionByTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestProcessDefinitionByTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDto)));
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDto> GetLatestProcessDefinitionByTenantIdAsync (string key, string tenantId)
        {
             ApiResponse<ProcessDefinitionDto> localVarResponse = await GetLatestProcessDefinitionByTenantIdAsyncWithHttpInfo(key, tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetLatestProcessDefinitionByTenantIdAsyncWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetLatestProcessDefinitionByTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetLatestProcessDefinitionByTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestProcessDefinitionByTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDto)));
        }

        /// <summary>
        /// Get Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>ProcessDefinitionDto</returns>
        public ProcessDefinitionDto GetProcessDefinition (string id)
        {
             ApiResponse<ProcessDefinitionDto> localVarResponse = GetProcessDefinitionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        public ApiResponse<ProcessDefinitionDto> GetProcessDefinitionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinition");

            var localVarPath = "/process-definition/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDto)));
        }

        /// <summary>
        /// Get Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDto> GetProcessDefinitionAsync (string id)
        {
             ApiResponse<ProcessDefinitionDto> localVarResponse = await GetProcessDefinitionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetProcessDefinitionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinition");

            var localVarPath = "/process-definition/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDto)));
        }

        /// <summary>
        /// Get XML Retrieves the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        public ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20Xml (string id)
        {
             ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = GetProcessDefinitionBpmn20XmlWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        public ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20Xml");

            var localVarPath = "/process-definition/{id}/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionBpmn20Xml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDiagramDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDiagramDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDiagramDto)));
        }

        /// <summary>
        /// Get XML Retrieves the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlAsync (string id)
        {
             ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = await GetProcessDefinitionBpmn20XmlAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get XML Retrieves the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20Xml");

            var localVarPath = "/process-definition/{id}/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionBpmn20Xml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDiagramDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDiagramDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDiagramDto)));
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        public ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20XmlByKey (string key)
        {
             ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = GetProcessDefinitionBpmn20XmlByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        public ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKey");

            var localVarPath = "/process-definition/key/{key}/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionBpmn20XmlByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDiagramDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDiagramDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDiagramDto)));
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAsync (string key)
        {
             ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = await GetProcessDefinitionBpmn20XmlByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKey");

            var localVarPath = "/process-definition/key/{key}/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionBpmn20XmlByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDiagramDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDiagramDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDiagramDto)));
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        public ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20XmlByKeyAndTenantId (string key, string tenantId)
        {
             ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfo(key, tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        public ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionBpmn20XmlByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDiagramDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDiagramDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDiagramDto)));
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdAsync (string key, string tenantId)
        {
             ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = await GetProcessDefinitionBpmn20XmlByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionBpmn20XmlByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDiagramDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDiagramDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDiagramDto)));
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ProcessDefinitionDto</returns>
        public ProcessDefinitionDto GetProcessDefinitionByKey (string key)
        {
             ApiResponse<ProcessDefinitionDto> localVarResponse = GetProcessDefinitionByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        public ApiResponse<ProcessDefinitionDto> GetProcessDefinitionByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionByKey");

            var localVarPath = "/process-definition/key/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDto)));
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDto> GetProcessDefinitionByKeyAsync (string key)
        {
             ApiResponse<ProcessDefinitionDto> localVarResponse = await GetProcessDefinitionByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetProcessDefinitionByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionByKey");

            var localVarPath = "/process-definition/key/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessDefinitionDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionDto)));
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetProcessDefinitionDiagram (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetProcessDefinitionDiagramWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetProcessDefinitionDiagramWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinitionDiagram");

            var localVarPath = "/process-definition/{id}/diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionDiagram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetProcessDefinitionDiagramAsync (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetProcessDefinitionDiagramAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetProcessDefinitionDiagramAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinitionDiagram");

            var localVarPath = "/process-definition/{id}/diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionDiagram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetProcessDefinitionDiagramByKey (string key)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetProcessDefinitionDiagramByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetProcessDefinitionDiagramByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKey");

            var localVarPath = "/process-definition/key/{key}/diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionDiagramByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetProcessDefinitionDiagramByKeyAsync (string key)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetProcessDefinitionDiagramByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetProcessDefinitionDiagramByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKey");

            var localVarPath = "/process-definition/key/{key}/diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionDiagramByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetProcessDefinitionDiagramByKeyAndTenantId (string key, string tenantId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfo(key, tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionDiagramByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetProcessDefinitionDiagramByKeyAndTenantIdAsync (string key, string tenantId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetProcessDefinitionDiagramByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetProcessDefinitionDiagramByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionDiagramByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Process Instance Statistics Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        public List<ProcessDefinitionStatisticsResultDto> GetProcessDefinitionStatistics (bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?))
        {
             ApiResponse<List<ProcessDefinitionStatisticsResultDto>> localVarResponse = GetProcessDefinitionStatisticsWithHttpInfo(failedJobs, incidents, incidentsForType, rootIncidents);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Process Instance Statistics Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        public ApiResponse<List<ProcessDefinitionStatisticsResultDto>> GetProcessDefinitionStatisticsWithHttpInfo (bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?))
        {

            var localVarPath = "/process-definition/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (failedJobs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failedJobs", failedJobs)); // query parameter
            if (incidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidents", incidents)); // query parameter
            if (incidentsForType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentsForType", incidentsForType)); // query parameter
            if (rootIncidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rootIncidents", rootIncidents)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessDefinitionStatisticsResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessDefinitionStatisticsResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessDefinitionStatisticsResultDto>)));
        }

        /// <summary>
        /// Get Process Instance Statistics Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>Task of List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessDefinitionStatisticsResultDto>> GetProcessDefinitionStatisticsAsync (bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?))
        {
             ApiResponse<List<ProcessDefinitionStatisticsResultDto>> localVarResponse = await GetProcessDefinitionStatisticsAsyncWithHttpInfo(failedJobs, incidents, incidentsForType, rootIncidents);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Process Instance Statistics Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDefinitionStatisticsResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProcessDefinitionStatisticsResultDto>>> GetProcessDefinitionStatisticsAsyncWithHttpInfo (bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?))
        {

            var localVarPath = "/process-definition/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (failedJobs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failedJobs", failedJobs)); // query parameter
            if (incidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidents", incidents)); // query parameter
            if (incidentsForType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentsForType", incidentsForType)); // query parameter
            if (rootIncidents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rootIncidents", rootIncidents)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessDefinitionStatisticsResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessDefinitionStatisticsResultDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessDefinitionStatisticsResultDto>)));
        }

        /// <summary>
        /// Get List Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;ProcessDefinitionDto&gt;</returns>
        public List<ProcessDefinitionDto> GetProcessDefinitions (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
             ApiResponse<List<ProcessDefinitionDto>> localVarResponse = GetProcessDefinitionsWithHttpInfo(processDefinitionId, processDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keysIn, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, startableBy, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, includeProcessDefinitionsWithoutTenantId, versionTag, versionTagLike, withoutVersionTag, startableInTasklist, notStartableInTasklist, startablePermissionCheck, sortBy, sortOrder, firstResult, maxResults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessDefinitionDto&gt;</returns>
        public ApiResponse<List<ProcessDefinitionDto>> GetProcessDefinitionsWithHttpInfo (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {

            var localVarPath = "/process-definition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (processDefinitionIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionIdIn", processDefinitionIdIn)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (deploymentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deploymentId", deploymentId)); // query parameter
            if (deployedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deployedAfter", deployedAfter)); // query parameter
            if (deployedAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deployedAt", deployedAt)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (keysIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keysIn", keysIn)); // query parameter
            if (keyLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyLike", keyLike)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryLike", categoryLike)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (latestVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latestVersion", latestVersion)); // query parameter
            if (resourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceName", resourceName)); // query parameter
            if (resourceNameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceNameLike", resourceNameLike)); // query parameter
            if (startableBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startableBy", startableBy)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (incidentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentId", incidentId)); // query parameter
            if (incidentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentType", incidentType)); // query parameter
            if (incidentMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentMessage", incidentMessage)); // query parameter
            if (incidentMessageLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentMessageLike", incidentMessageLike)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeProcessDefinitionsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessDefinitionsWithoutTenantId", includeProcessDefinitionsWithoutTenantId)); // query parameter
            if (versionTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionTag", versionTag)); // query parameter
            if (versionTagLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionTagLike", versionTagLike)); // query parameter
            if (withoutVersionTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutVersionTag", withoutVersionTag)); // query parameter
            if (startableInTasklist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startableInTasklist", startableInTasklist)); // query parameter
            if (notStartableInTasklist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notStartableInTasklist", notStartableInTasklist)); // query parameter
            if (startablePermissionCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startablePermissionCheck", startablePermissionCheck)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessDefinitionDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessDefinitionDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessDefinitionDto>)));
        }

        /// <summary>
        /// Get List Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of List&lt;ProcessDefinitionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessDefinitionDto>> GetProcessDefinitionsAsync (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
             ApiResponse<List<ProcessDefinitionDto>> localVarResponse = await GetProcessDefinitionsAsyncWithHttpInfo(processDefinitionId, processDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keysIn, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, startableBy, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, includeProcessDefinitionsWithoutTenantId, versionTag, versionTagLike, withoutVersionTag, startableInTasklist, notStartableInTasklist, startablePermissionCheck, sortBy, sortOrder, firstResult, maxResults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get List Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDefinitionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProcessDefinitionDto>>> GetProcessDefinitionsAsyncWithHttpInfo (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {

            var localVarPath = "/process-definition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (processDefinitionIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionIdIn", processDefinitionIdIn)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (deploymentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deploymentId", deploymentId)); // query parameter
            if (deployedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deployedAfter", deployedAfter)); // query parameter
            if (deployedAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deployedAt", deployedAt)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (keysIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keysIn", keysIn)); // query parameter
            if (keyLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyLike", keyLike)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryLike", categoryLike)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (latestVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latestVersion", latestVersion)); // query parameter
            if (resourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceName", resourceName)); // query parameter
            if (resourceNameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceNameLike", resourceNameLike)); // query parameter
            if (startableBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startableBy", startableBy)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (incidentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentId", incidentId)); // query parameter
            if (incidentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentType", incidentType)); // query parameter
            if (incidentMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentMessage", incidentMessage)); // query parameter
            if (incidentMessageLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentMessageLike", incidentMessageLike)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeProcessDefinitionsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessDefinitionsWithoutTenantId", includeProcessDefinitionsWithoutTenantId)); // query parameter
            if (versionTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionTag", versionTag)); // query parameter
            if (versionTagLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionTagLike", versionTagLike)); // query parameter
            if (withoutVersionTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutVersionTag", withoutVersionTag)); // query parameter
            if (startableInTasklist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startableInTasklist", startableInTasklist)); // query parameter
            if (notStartableInTasklist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notStartableInTasklist", notStartableInTasklist)); // query parameter
            if (startablePermissionCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startablePermissionCheck", startablePermissionCheck)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessDefinitionDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessDefinitionDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessDefinitionDto>)));
        }

        /// <summary>
        /// Get List Count Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetProcessDefinitionsCount (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?))
        {
             ApiResponse<CountResultDto> localVarResponse = GetProcessDefinitionsCountWithHttpInfo(processDefinitionId, processDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keysIn, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, startableBy, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, includeProcessDefinitionsWithoutTenantId, versionTag, versionTagLike, withoutVersionTag, startableInTasklist, notStartableInTasklist, startablePermissionCheck);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public ApiResponse<CountResultDto> GetProcessDefinitionsCountWithHttpInfo (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?))
        {

            var localVarPath = "/process-definition/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (processDefinitionIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionIdIn", processDefinitionIdIn)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (deploymentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deploymentId", deploymentId)); // query parameter
            if (deployedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deployedAfter", deployedAfter)); // query parameter
            if (deployedAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deployedAt", deployedAt)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (keysIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keysIn", keysIn)); // query parameter
            if (keyLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyLike", keyLike)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryLike", categoryLike)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (latestVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latestVersion", latestVersion)); // query parameter
            if (resourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceName", resourceName)); // query parameter
            if (resourceNameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceNameLike", resourceNameLike)); // query parameter
            if (startableBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startableBy", startableBy)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (incidentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentId", incidentId)); // query parameter
            if (incidentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentType", incidentType)); // query parameter
            if (incidentMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentMessage", incidentMessage)); // query parameter
            if (incidentMessageLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentMessageLike", incidentMessageLike)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeProcessDefinitionsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessDefinitionsWithoutTenantId", includeProcessDefinitionsWithoutTenantId)); // query parameter
            if (versionTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionTag", versionTag)); // query parameter
            if (versionTagLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionTagLike", versionTagLike)); // query parameter
            if (withoutVersionTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutVersionTag", withoutVersionTag)); // query parameter
            if (startableInTasklist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startableInTasklist", startableInTasklist)); // query parameter
            if (notStartableInTasklist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notStartableInTasklist", notStartableInTasklist)); // query parameter
            if (startablePermissionCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startablePermissionCheck", startablePermissionCheck)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        /// Get List Count Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetProcessDefinitionsCountAsync (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?))
        {
             ApiResponse<CountResultDto> localVarResponse = await GetProcessDefinitionsCountAsyncWithHttpInfo(processDefinitionId, processDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keysIn, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, startableBy, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, includeProcessDefinitionsWithoutTenantId, versionTag, versionTagLike, withoutVersionTag, startableInTasklist, notStartableInTasklist, startablePermissionCheck);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get List Count Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetProcessDefinitionsCountAsyncWithHttpInfo (string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?))
        {

            var localVarPath = "/process-definition/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (processDefinitionIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionIdIn", processDefinitionIdIn)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (deploymentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deploymentId", deploymentId)); // query parameter
            if (deployedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deployedAfter", deployedAfter)); // query parameter
            if (deployedAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deployedAt", deployedAt)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (keysIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keysIn", keysIn)); // query parameter
            if (keyLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyLike", keyLike)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryLike", categoryLike)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (latestVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latestVersion", latestVersion)); // query parameter
            if (resourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceName", resourceName)); // query parameter
            if (resourceNameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceNameLike", resourceNameLike)); // query parameter
            if (startableBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startableBy", startableBy)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (incidentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentId", incidentId)); // query parameter
            if (incidentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentType", incidentType)); // query parameter
            if (incidentMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentMessage", incidentMessage)); // query parameter
            if (incidentMessageLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incidentMessageLike", incidentMessageLike)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeProcessDefinitionsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessDefinitionsWithoutTenantId", includeProcessDefinitionsWithoutTenantId)); // query parameter
            if (versionTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionTag", versionTag)); // query parameter
            if (versionTagLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versionTagLike", versionTagLike)); // query parameter
            if (withoutVersionTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutVersionTag", withoutVersionTag)); // query parameter
            if (startableInTasklist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startableInTasklist", startableInTasklist)); // query parameter
            if (notStartableInTasklist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notStartableInTasklist", notStartableInTasklist)); // query parameter
            if (startablePermissionCheck != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startablePermissionCheck", startablePermissionCheck)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetRenderedStartForm (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetRenderedStartFormWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetRenderedStartFormWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetRenderedStartForm");

            var localVarPath = "/process-definition/{id}/rendered-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRenderedStartForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRenderedStartFormAsync (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetRenderedStartFormAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Rendered Start Form Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRenderedStartFormAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetRenderedStartForm");

            var localVarPath = "/process-definition/{id}/rendered-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRenderedStartForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetRenderedStartFormByKey (string key)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetRenderedStartFormByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetRenderedStartFormByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetRenderedStartFormByKey");

            var localVarPath = "/process-definition/key/{key}/rendered-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRenderedStartFormByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRenderedStartFormByKeyAsync (string key)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetRenderedStartFormByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRenderedStartFormByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetRenderedStartFormByKey");

            var localVarPath = "/process-definition/key/{key}/rendered-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRenderedStartFormByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetRenderedStartFormByKeyAndTenantId (string key, string tenantId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetRenderedStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetRenderedStartFormByKeyAndTenantIdWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetRenderedStartFormByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetRenderedStartFormByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/rendered-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRenderedStartFormByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRenderedStartFormByKeyAndTenantIdAsync (string key, string tenantId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetRenderedStartFormByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRenderedStartFormByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetRenderedStartFormByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetRenderedStartFormByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/rendered-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRenderedStartFormByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>FormDto</returns>
        public FormDto GetStartForm (string id)
        {
             ApiResponse<FormDto> localVarResponse = GetStartFormWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>ApiResponse of FormDto</returns>
        public ApiResponse<FormDto> GetStartFormWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStartForm");

            var localVarPath = "/process-definition/{id}/startForm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormDto)));
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>Task of FormDto</returns>
        public async System.Threading.Tasks.Task<FormDto> GetStartFormAsync (string id)
        {
             ApiResponse<FormDto> localVarResponse = await GetStartFormAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStartForm");

            var localVarPath = "/process-definition/{id}/startForm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormDto)));
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>FormDto</returns>
        public FormDto GetStartFormByKey (string key)
        {
             ApiResponse<FormDto> localVarResponse = GetStartFormByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>ApiResponse of FormDto</returns>
        public ApiResponse<FormDto> GetStartFormByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormByKey");

            var localVarPath = "/process-definition/key/{key}/startForm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormDto)));
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>Task of FormDto</returns>
        public async System.Threading.Tasks.Task<FormDto> GetStartFormByKeyAsync (string key)
        {
             ApiResponse<FormDto> localVarResponse = await GetStartFormByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormByKey");

            var localVarPath = "/process-definition/key/{key}/startForm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormDto)));
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>FormDto</returns>
        public FormDto GetStartFormByKeyAndTenantId (string key, string tenantId)
        {
             ApiResponse<FormDto> localVarResponse = GetStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of FormDto</returns>
        public ApiResponse<FormDto> GetStartFormByKeyAndTenantIdWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetStartFormByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/startForm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormDto)));
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of FormDto</returns>
        public async System.Threading.Tasks.Task<FormDto> GetStartFormByKeyAndTenantIdAsync (string key, string tenantId)
        {
             ApiResponse<FormDto> localVarResponse = await GetStartFormByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetStartFormByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/startForm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormDto)));
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetStartFormVariables (string id, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetStartFormVariablesWithHttpInfo(id, variableNames, deserializeValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesWithHttpInfo (string id, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStartFormVariables");

            var localVarPath = "/process-definition/{id}/form-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (variableNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variableNames", variableNames)); // query parameter
            if (deserializeValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValues", deserializeValues)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesAsync (string id, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetStartFormVariablesAsyncWithHttpInfo(id, variableNames, deserializeValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesAsyncWithHttpInfo (string id, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStartFormVariables");

            var localVarPath = "/process-definition/{id}/form-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (variableNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variableNames", variableNames)); // query parameter
            if (deserializeValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValues", deserializeValues)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetStartFormVariablesByKey (string key, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetStartFormVariablesByKeyWithHttpInfo(key, variableNames, deserializeValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyWithHttpInfo (string key, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormVariablesByKey");

            var localVarPath = "/process-definition/key/{key}/form-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (variableNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variableNames", variableNames)); // query parameter
            if (deserializeValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValues", deserializeValues)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormVariablesByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAsync (string key, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetStartFormVariablesByKeyAsyncWithHttpInfo(key, variableNames, deserializeValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesByKeyAsyncWithHttpInfo (string key, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormVariablesByKey");

            var localVarPath = "/process-definition/key/{key}/form-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (variableNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variableNames", variableNames)); // query parameter
            if (deserializeValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValues", deserializeValues)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormVariablesByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetStartFormVariablesByKeyAndTenantId (string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetStartFormVariablesByKeyAndTenantIdWithHttpInfo(key, tenantId, variableNames, deserializeValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAndTenantIdWithHttpInfo (string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormVariablesByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetStartFormVariablesByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/form-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (variableNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variableNames", variableNames)); // query parameter
            if (deserializeValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValues", deserializeValues)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormVariablesByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAndTenantIdAsync (string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetStartFormVariablesByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId, variableNames, deserializeValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormVariablesByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetStartFormVariablesByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/form-variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (variableNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variableNames", variableNames)); // query parameter
            if (deserializeValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValues", deserializeValues)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartFormVariablesByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        /// Restart Process Instance Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns></returns>
        public void RestartProcessInstance (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
             RestartProcessInstanceWithHttpInfo(id, restartProcessInstanceDto);
        }

        /// <summary>
        /// Restart Process Instance Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RestartProcessInstanceWithHttpInfo (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->RestartProcessInstance");

            var localVarPath = "/process-definition/{id}/restart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (restartProcessInstanceDto != null && restartProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(restartProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = restartProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestartProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Restart Process Instance Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestartProcessInstanceAsync (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
             await RestartProcessInstanceAsyncWithHttpInfo(id, restartProcessInstanceDto);

        }

        /// <summary>
        /// Restart Process Instance Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RestartProcessInstanceAsyncWithHttpInfo (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->RestartProcessInstance");

            var localVarPath = "/process-definition/{id}/restart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (restartProcessInstanceDto != null && restartProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(restartProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = restartProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestartProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Restart Process Instance Async Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto RestartProcessInstanceAsyncOperation (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
             ApiResponse<BatchDto> localVarResponse = RestartProcessInstanceAsyncOperationWithHttpInfo(id, restartProcessInstanceDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restart Process Instance Async Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public ApiResponse<BatchDto> RestartProcessInstanceAsyncOperationWithHttpInfo (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->RestartProcessInstanceAsyncOperation");

            var localVarPath = "/process-definition/{id}/restart-async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (restartProcessInstanceDto != null && restartProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(restartProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = restartProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestartProcessInstanceAsyncOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchDto)));
        }

        /// <summary>
        /// Restart Process Instance Async Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> RestartProcessInstanceAsyncOperationAsync (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
             ApiResponse<BatchDto> localVarResponse = await RestartProcessInstanceAsyncOperationAsyncWithHttpInfo(id, restartProcessInstanceDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restart Process Instance Async Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.13/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchDto>> RestartProcessInstanceAsyncOperationAsyncWithHttpInfo (string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->RestartProcessInstanceAsyncOperation");

            var localVarPath = "/process-definition/{id}/restart-async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (restartProcessInstanceDto != null && restartProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(restartProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = restartProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestartProcessInstanceAsyncOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchDto)));
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        public ProcessInstanceWithVariablesDto StartProcessInstance (string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
             ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = StartProcessInstanceWithHttpInfo(id, startProcessInstanceDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        public ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceWithHttpInfo (string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->StartProcessInstance");

            var localVarPath = "/process-definition/{id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (startProcessInstanceDto != null && startProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceWithVariablesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceWithVariablesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceWithVariablesDto)));
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceAsync (string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
             ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = await StartProcessInstanceAsyncWithHttpInfo(id, startProcessInstanceDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start Instance Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceAsyncWithHttpInfo (string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->StartProcessInstance");

            var localVarPath = "/process-definition/{id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (startProcessInstanceDto != null && startProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceWithVariablesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceWithVariablesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceWithVariablesDto)));
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        public ProcessInstanceWithVariablesDto StartProcessInstanceByKey (string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
             ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = StartProcessInstanceByKeyWithHttpInfo(key, startProcessInstanceDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        public ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyWithHttpInfo (string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->StartProcessInstanceByKey");

            var localVarPath = "/process-definition/key/{key}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (startProcessInstanceDto != null && startProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcessInstanceByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceWithVariablesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceWithVariablesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceWithVariablesDto)));
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAsync (string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
             ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = await StartProcessInstanceByKeyAsyncWithHttpInfo(key, startProcessInstanceDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceByKeyAsyncWithHttpInfo (string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->StartProcessInstanceByKey");

            var localVarPath = "/process-definition/key/{key}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (startProcessInstanceDto != null && startProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcessInstanceByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceWithVariablesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceWithVariablesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceWithVariablesDto)));
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        public ProcessInstanceWithVariablesDto StartProcessInstanceByKeyAndTenantId (string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
             ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = StartProcessInstanceByKeyAndTenantIdWithHttpInfo(key, tenantId, startProcessInstanceDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        public ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAndTenantIdWithHttpInfo (string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->StartProcessInstanceByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->StartProcessInstanceByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (startProcessInstanceDto != null && startProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcessInstanceByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceWithVariablesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceWithVariablesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceWithVariablesDto)));
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAndTenantIdAsync (string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
             ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = await StartProcessInstanceByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId, startProcessInstanceDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->StartProcessInstanceByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->StartProcessInstanceByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (startProcessInstanceDto != null && startProcessInstanceDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcessInstanceByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceWithVariablesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceWithVariablesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceWithVariablesDto)));
        }

        /// <summary>
        /// Submit Start Form Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        public ProcessInstanceDto SubmitForm (string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
             ApiResponse<ProcessInstanceDto> localVarResponse = SubmitFormWithHttpInfo(id, startProcessInstanceFormDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        public ApiResponse<ProcessInstanceDto> SubmitFormWithHttpInfo (string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->SubmitForm");

            var localVarPath = "/process-definition/{id}/submit-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (startProcessInstanceFormDto != null && startProcessInstanceFormDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceFormDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceFormDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceDto)));
        }

        /// <summary>
        /// Submit Start Form Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormAsync (string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
             ApiResponse<ProcessInstanceDto> localVarResponse = await SubmitFormAsyncWithHttpInfo(id, startProcessInstanceFormDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit Start Form Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormAsyncWithHttpInfo (string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->SubmitForm");

            var localVarPath = "/process-definition/{id}/submit-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (startProcessInstanceFormDto != null && startProcessInstanceFormDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceFormDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceFormDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceDto)));
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        public ProcessInstanceDto SubmitFormByKey (string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
             ApiResponse<ProcessInstanceDto> localVarResponse = SubmitFormByKeyWithHttpInfo(key, startProcessInstanceFormDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        public ApiResponse<ProcessInstanceDto> SubmitFormByKeyWithHttpInfo (string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->SubmitFormByKey");

            var localVarPath = "/process-definition/key/{key}/submit-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (startProcessInstanceFormDto != null && startProcessInstanceFormDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceFormDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceFormDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitFormByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceDto)));
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormByKeyAsync (string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
             ApiResponse<ProcessInstanceDto> localVarResponse = await SubmitFormByKeyAsyncWithHttpInfo(key, startProcessInstanceFormDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormByKeyAsyncWithHttpInfo (string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->SubmitFormByKey");

            var localVarPath = "/process-definition/key/{key}/submit-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (startProcessInstanceFormDto != null && startProcessInstanceFormDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceFormDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceFormDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitFormByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceDto)));
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        public ProcessInstanceDto SubmitFormByKeyAndTenantId (string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
             ApiResponse<ProcessInstanceDto> localVarResponse = SubmitFormByKeyAndTenantIdWithHttpInfo(key, tenantId, startProcessInstanceFormDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        public ApiResponse<ProcessInstanceDto> SubmitFormByKeyAndTenantIdWithHttpInfo (string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->SubmitFormByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->SubmitFormByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/submit-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (startProcessInstanceFormDto != null && startProcessInstanceFormDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceFormDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceFormDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitFormByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceDto)));
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormByKeyAndTenantIdAsync (string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
             ApiResponse<ProcessInstanceDto> localVarResponse = await SubmitFormByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId, startProcessInstanceFormDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.13/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->SubmitFormByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->SubmitFormByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/submit-form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (startProcessInstanceFormDto != null && startProcessInstanceFormDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startProcessInstanceFormDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startProcessInstanceFormDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitFormByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceDto)));
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByProcessDefinitionId (string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
             UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfo(id, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfo (string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionId");

            var localVarPath = "/process-definition/{id}/history-time-to-live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (historyTimeToLiveDto != null && historyTimeToLiveDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyTimeToLiveDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyTimeToLiveDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionIdAsync (string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
             await UpdateHistoryTimeToLiveByProcessDefinitionIdAsyncWithHttpInfo(id, historyTimeToLiveDto);

        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionIdAsyncWithHttpInfo (string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionId");

            var localVarPath = "/process-definition/{id}/history-time-to-live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (historyTimeToLiveDto != null && historyTimeToLiveDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyTimeToLiveDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyTimeToLiveDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByProcessDefinitionKey (string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
             UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfo(key, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfo (string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKey");

            var localVarPath = "/process-definition/key/{key}/history-time-to-live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (historyTimeToLiveDto != null && historyTimeToLiveDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyTimeToLiveDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyTimeToLiveDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionKeyAsync (string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
             await UpdateHistoryTimeToLiveByProcessDefinitionKeyAsyncWithHttpInfo(key, historyTimeToLiveDto);

        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionKeyAsyncWithHttpInfo (string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKey");

            var localVarPath = "/process-definition/key/{key}/history-time-to-live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (historyTimeToLiveDto != null && historyTimeToLiveDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyTimeToLiveDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyTimeToLiveDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId (string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
             UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfo(key, tenantId, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfo (string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/history-time-to-live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (historyTimeToLiveDto != null && historyTimeToLiveDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyTimeToLiveDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyTimeToLiveDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdAsync (string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
             await UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdAsyncWithHttpInfo(key, tenantId, historyTimeToLiveDto);

        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/history-time-to-live";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (historyTimeToLiveDto != null && historyTimeToLiveDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyTimeToLiveDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyTimeToLiveDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate/Suspend By Key Activates or suspends process definitions with the given process definition key.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns></returns>
        public void UpdateProcessDefinitionSuspensionState (ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
             UpdateProcessDefinitionSuspensionStateWithHttpInfo(processDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend By Key Activates or suspends process definitions with the given process definition key.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProcessDefinitionSuspensionStateWithHttpInfo (ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {

            var localVarPath = "/process-definition/suspended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionSuspensionStateDto != null && processDefinitionSuspensionStateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processDefinitionSuspensionStateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processDefinitionSuspensionStateDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessDefinitionSuspensionState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate/Suspend By Key Activates or suspends process definitions with the given process definition key.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateAsync (ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
             await UpdateProcessDefinitionSuspensionStateAsyncWithHttpInfo(processDefinitionSuspensionStateDto);

        }

        /// <summary>
        /// Activate/Suspend By Key Activates or suspends process definitions with the given process definition key.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateAsyncWithHttpInfo (ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {

            var localVarPath = "/process-definition/suspended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionSuspensionStateDto != null && processDefinitionSuspensionStateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processDefinitionSuspensionStateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processDefinitionSuspensionStateDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessDefinitionSuspensionState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate/Suspend By Id Activates or suspends a given process definition by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        public void UpdateProcessDefinitionSuspensionStateById (string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
             UpdateProcessDefinitionSuspensionStateByIdWithHttpInfo(id, processDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend By Id Activates or suspends a given process definition by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByIdWithHttpInfo (string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateById");

            var localVarPath = "/process-definition/{id}/suspended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (processDefinitionSuspensionStateDto != null && processDefinitionSuspensionStateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processDefinitionSuspensionStateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processDefinitionSuspensionStateDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessDefinitionSuspensionStateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate/Suspend By Id Activates or suspends a given process definition by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByIdAsync (string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
             await UpdateProcessDefinitionSuspensionStateByIdAsyncWithHttpInfo(id, processDefinitionSuspensionStateDto);

        }

        /// <summary>
        /// Activate/Suspend By Id Activates or suspends a given process definition by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByIdAsyncWithHttpInfo (string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateById");

            var localVarPath = "/process-definition/{id}/suspended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (processDefinitionSuspensionStateDto != null && processDefinitionSuspensionStateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processDefinitionSuspensionStateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processDefinitionSuspensionStateDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessDefinitionSuspensionStateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        public void UpdateProcessDefinitionSuspensionStateByKey (string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
             UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfo(key, processDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfo (string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKey");

            var localVarPath = "/process-definition/key/{key}/suspended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (processDefinitionSuspensionStateDto != null && processDefinitionSuspensionStateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processDefinitionSuspensionStateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processDefinitionSuspensionStateDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessDefinitionSuspensionStateByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByKeyAsync (string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
             await UpdateProcessDefinitionSuspensionStateByKeyAsyncWithHttpInfo(key, processDefinitionSuspensionStateDto);

        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByKeyAsyncWithHttpInfo (string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKey");

            var localVarPath = "/process-definition/key/{key}/suspended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (processDefinitionSuspensionStateDto != null && processDefinitionSuspensionStateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processDefinitionSuspensionStateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processDefinitionSuspensionStateDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessDefinitionSuspensionStateByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        public void UpdateProcessDefinitionSuspensionStateByKeyAndTenantId (string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
             UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfo(key, tenantId, processDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfo (string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/suspended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (processDefinitionSuspensionStateDto != null && processDefinitionSuspensionStateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processDefinitionSuspensionStateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processDefinitionSuspensionStateDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessDefinitionSuspensionStateByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdAsync (string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
             await UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdAsyncWithHttpInfo(key, tenantId, processDefinitionSuspensionStateDto);

        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdAsyncWithHttpInfo (string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKeyAndTenantId");
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKeyAndTenantId");

            var localVarPath = "/process-definition/key/{key}/tenant/{tenant-id}/suspended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (tenantId != null) localVarPathParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // path parameter
            if (processDefinitionSuspensionStateDto != null && processDefinitionSuspensionStateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processDefinitionSuspensionStateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processDefinitionSuspensionStateDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessDefinitionSuspensionStateByKeyAndTenantId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
