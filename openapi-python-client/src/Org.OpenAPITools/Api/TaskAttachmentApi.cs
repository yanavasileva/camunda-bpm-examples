/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskAttachmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an attachment for a task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>AttachmentDto</returns>
        AttachmentDto AddAttachment (string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an attachment for a task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>ApiResponse of AttachmentDto</returns>
        ApiResponse<AttachmentDto> AddAttachmentWithHttpInfo (string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes an attachment from a task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns></returns>
        void DeleteAttachment (string id, string attachmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes an attachment from a task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAttachmentWithHttpInfo (string id, string attachmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>AttachmentDto</returns>
        AttachmentDto GetAttachment (string id, string attachmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>ApiResponse of AttachmentDto</returns>
        ApiResponse<AttachmentDto> GetAttachmentWithHttpInfo (string id, string attachmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetAttachmentData (string id, string attachmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetAttachmentDataWithHttpInfo (string id, string attachmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the attachments for a task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>List&lt;AttachmentDto&gt;</returns>
        List<AttachmentDto> GetAttachments (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the attachments for a task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>ApiResponse of List&lt;AttachmentDto&gt;</returns>
        ApiResponse<List<AttachmentDto>> GetAttachmentsWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an attachment for a task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>Task of AttachmentDto</returns>
        System.Threading.Tasks.Task<AttachmentDto> AddAttachmentAsync (string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an attachment for a task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDto>> AddAttachmentAsyncWithHttpInfo (string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes an attachment from a task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAttachmentAsync (string id, string attachmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes an attachment from a task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentAsyncWithHttpInfo (string id, string attachmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>Task of AttachmentDto</returns>
        System.Threading.Tasks.Task<AttachmentDto> GetAttachmentAsync (string id, string attachmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>Task of ApiResponse (AttachmentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDto>> GetAttachmentAsyncWithHttpInfo (string id, string attachmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAttachmentDataAsync (string id, string attachmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAttachmentDataAsyncWithHttpInfo (string id, string attachmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the attachments for a task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>Task of List&lt;AttachmentDto&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentDto>> GetAttachmentsAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the attachments for a task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentDto>>> GetAttachmentsAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskAttachmentApi : ITaskAttachmentApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttachmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskAttachmentApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttachmentApi"/> class
        /// </summary>
        /// <returns></returns>
        public TaskAttachmentApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttachmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskAttachmentApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Creates an attachment for a task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>AttachmentDto</returns>
        public AttachmentDto AddAttachment (string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream))
        {
             ApiResponse<AttachmentDto> localVarResponse = AddAttachmentWithHttpInfo(id, attachmentName, attachmentDescription, attachmentType, url, content);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates an attachment for a task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>ApiResponse of AttachmentDto</returns>
        public ApiResponse<AttachmentDto> AddAttachmentWithHttpInfo (string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->AddAttachment");

            var localVarPath = "/task/{id}/attachment/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentName != null) localVarFormParams.Add("attachment-name", this.Configuration.ApiClient.ParameterToString(attachmentName)); // form parameter
            if (attachmentDescription != null) localVarFormParams.Add("attachment-description", this.Configuration.ApiClient.ParameterToString(attachmentDescription)); // form parameter
            if (attachmentType != null) localVarFormParams.Add("attachment-type", this.Configuration.ApiClient.ParameterToString(attachmentType)); // form parameter
            if (url != null) localVarFormParams.Add("url", this.Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (content != null) localVarFileParams.Add("content", this.Configuration.ApiClient.ParameterToFile("content", content));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDto)));
        }

        /// <summary>
        ///  Creates an attachment for a task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>Task of AttachmentDto</returns>
        public async System.Threading.Tasks.Task<AttachmentDto> AddAttachmentAsync (string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream))
        {
             ApiResponse<AttachmentDto> localVarResponse = await AddAttachmentAsyncWithHttpInfo(id, attachmentName, attachmentDescription, attachmentType, url, content);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates an attachment for a task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDto>> AddAttachmentAsyncWithHttpInfo (string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->AddAttachment");

            var localVarPath = "/task/{id}/attachment/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentName != null) localVarFormParams.Add("attachment-name", this.Configuration.ApiClient.ParameterToString(attachmentName)); // form parameter
            if (attachmentDescription != null) localVarFormParams.Add("attachment-description", this.Configuration.ApiClient.ParameterToString(attachmentDescription)); // form parameter
            if (attachmentType != null) localVarFormParams.Add("attachment-type", this.Configuration.ApiClient.ParameterToString(attachmentType)); // form parameter
            if (url != null) localVarFormParams.Add("url", this.Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (content != null) localVarFileParams.Add("content", this.Configuration.ApiClient.ParameterToFile("content", content));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDto)));
        }

        /// <summary>
        ///  Removes an attachment from a task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns></returns>
        public void DeleteAttachment (string id, string attachmentId)
        {
             DeleteAttachmentWithHttpInfo(id, attachmentId);
        }

        /// <summary>
        ///  Removes an attachment from a task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAttachmentWithHttpInfo (string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->DeleteAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->DeleteAttachment");

            var localVarPath = "/task/{id}/attachment/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes an attachment from a task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAttachmentAsync (string id, string attachmentId)
        {
             await DeleteAttachmentAsyncWithHttpInfo(id, attachmentId);

        }

        /// <summary>
        ///  Removes an attachment from a task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentAsyncWithHttpInfo (string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->DeleteAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->DeleteAttachment");

            var localVarPath = "/task/{id}/attachment/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieves a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>AttachmentDto</returns>
        public AttachmentDto GetAttachment (string id, string attachmentId)
        {
             ApiResponse<AttachmentDto> localVarResponse = GetAttachmentWithHttpInfo(id, attachmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>ApiResponse of AttachmentDto</returns>
        public ApiResponse<AttachmentDto> GetAttachmentWithHttpInfo (string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->GetAttachment");

            var localVarPath = "/task/{id}/attachment/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDto)));
        }

        /// <summary>
        ///  Retrieves a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>Task of AttachmentDto</returns>
        public async System.Threading.Tasks.Task<AttachmentDto> GetAttachmentAsync (string id, string attachmentId)
        {
             ApiResponse<AttachmentDto> localVarResponse = await GetAttachmentAsyncWithHttpInfo(id, attachmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>Task of ApiResponse (AttachmentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentDto>> GetAttachmentAsyncWithHttpInfo (string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->GetAttachment");

            var localVarPath = "/task/{id}/attachment/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentDto)));
        }

        /// <summary>
        ///  Retrieves the binary content of a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetAttachmentData (string id, string attachmentId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetAttachmentDataWithHttpInfo(id, attachmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the binary content of a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetAttachmentDataWithHttpInfo (string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachmentData");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->GetAttachmentData");

            var localVarPath = "/task/{id}/attachment/{attachmentId}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieves the binary content of a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAttachmentDataAsync (string id, string attachmentId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetAttachmentDataAsyncWithHttpInfo(id, attachmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves the binary content of a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAttachmentDataAsyncWithHttpInfo (string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachmentData");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->GetAttachmentData");

            var localVarPath = "/task/{id}/attachment/{attachmentId}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Gets the attachments for a task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>List&lt;AttachmentDto&gt;</returns>
        public List<AttachmentDto> GetAttachments (string id)
        {
             ApiResponse<List<AttachmentDto>> localVarResponse = GetAttachmentsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the attachments for a task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>ApiResponse of List&lt;AttachmentDto&gt;</returns>
        public ApiResponse<List<AttachmentDto>> GetAttachmentsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachments");

            var localVarPath = "/task/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AttachmentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentDto>)));
        }

        /// <summary>
        ///  Gets the attachments for a task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>Task of List&lt;AttachmentDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentDto>> GetAttachmentsAsync (string id)
        {
             ApiResponse<List<AttachmentDto>> localVarResponse = await GetAttachmentsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the attachments for a task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AttachmentDto>>> GetAttachmentsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachments");

            var localVarPath = "/task/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AttachmentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentDto>)));
        }

    }
}
