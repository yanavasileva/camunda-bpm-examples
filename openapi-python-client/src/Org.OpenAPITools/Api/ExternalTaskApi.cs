/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalTaskApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes an external task by id and updates process variables.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        void CompleteExternalTaskResource (string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes an external task by id and updates process variables.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompleteExternalTaskResourceWithHttpInfo (string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extends the timeout of the lock by a given amount of time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        void ExtendLock (string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extends the timeout of the lock by a given amount of time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExtendLockWithHttpInfo (string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>List&lt;LockedExternalTaskDto&gt;</returns>
        List<LockedExternalTaskDto> FetchAndLock (FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LockedExternalTaskDto&gt;</returns>
        ApiResponse<List<LockedExternalTaskDto>> FetchAndLockWithHttpInfo (FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>ExternalTaskDto</returns>
        ExternalTaskDto GetExternalTask (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>ApiResponse of ExternalTaskDto</returns>
        ApiResponse<ExternalTaskDto> GetExternalTaskWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the error details in the context of a running external task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>string</returns>
        string GetExternalTaskErrorDetails (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the error details in the context of a running external task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetExternalTaskErrorDetailsWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;ExternalTaskDto&gt;</returns>
        List<ExternalTaskDto> GetExternalTasks (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;ExternalTaskDto&gt;</returns>
        ApiResponse<List<ExternalTaskDto>> GetExternalTasksWithHttpInfo (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetExternalTasksCount (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetExternalTasksCountWithHttpInfo (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTopicNames (bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTopicNamesWithHttpInfo (bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns></returns>
        void HandleExternalTaskBpmnError (string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HandleExternalTaskBpmnErrorWithHttpInfo (string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns></returns>
        void HandleFailure (string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HandleFailureWithHttpInfo (string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>List&lt;ExternalTaskDto&gt;</returns>
        List<ExternalTaskDto> QueryExternalTasks (int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExternalTaskDto&gt;</returns>
        ApiResponse<List<ExternalTaskDto>> QueryExternalTasksWithHttpInfo (int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.13/reference/rest/external-task/post-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryExternalTasksCount (ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.13/reference/rest/external-task/post-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryExternalTasksCountWithHttpInfo (ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns></returns>
        void SetExternalTaskResourcePriority (string id, PriorityDto priorityDto = default(PriorityDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetExternalTaskResourcePriorityWithHttpInfo (string id, PriorityDto priorityDto = default(PriorityDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns></returns>
        void SetExternalTaskResourceRetries (string id, RetriesDto retriesDto = default(RetriesDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetExternalTaskResourceRetriesWithHttpInfo (string id, RetriesDto retriesDto = default(RetriesDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns></returns>
        void SetExternalTaskRetries (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetExternalTaskRetriesWithHttpInfo (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto SetExternalTaskRetriesAsyncOperation (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> SetExternalTaskRetriesAsyncOperationWithHttpInfo (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns></returns>
        void Unlock (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlockWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes an external task by id and updates process variables.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CompleteExternalTaskResourceAsync (string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Completes an external task by id and updates process variables.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompleteExternalTaskResourceAsyncWithHttpInfo (string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extends the timeout of the lock by a given amount of time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExtendLockAsync (string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extends the timeout of the lock by a given amount of time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExtendLockAsyncWithHttpInfo (string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>Task of List&lt;LockedExternalTaskDto&gt;</returns>
        System.Threading.Tasks.Task<List<LockedExternalTaskDto>> FetchAndLockAsync (FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LockedExternalTaskDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LockedExternalTaskDto>>> FetchAndLockAsyncWithHttpInfo (FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>Task of ExternalTaskDto</returns>
        System.Threading.Tasks.Task<ExternalTaskDto> GetExternalTaskAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>Task of ApiResponse (ExternalTaskDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalTaskDto>> GetExternalTaskAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the error details in the context of a running external task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetExternalTaskErrorDetailsAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the error details in the context of a running external task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetExternalTaskErrorDetailsAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of List&lt;ExternalTaskDto&gt;</returns>
        System.Threading.Tasks.Task<List<ExternalTaskDto>> GetExternalTasksAsync (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalTaskDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExternalTaskDto>>> GetExternalTasksAsyncWithHttpInfo (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetExternalTasksCountAsync (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetExternalTasksCountAsyncWithHttpInfo (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTopicNamesAsync (bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTopicNamesAsyncWithHttpInfo (bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HandleExternalTaskBpmnErrorAsync (string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HandleExternalTaskBpmnErrorAsyncWithHttpInfo (string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HandleFailureAsync (string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HandleFailureAsyncWithHttpInfo (string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>Task of List&lt;ExternalTaskDto&gt;</returns>
        System.Threading.Tasks.Task<List<ExternalTaskDto>> QueryExternalTasksAsync (int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalTaskDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExternalTaskDto>>> QueryExternalTasksAsyncWithHttpInfo (int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.13/reference/rest/external-task/post-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryExternalTasksCountAsync (ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.13/reference/rest/external-task/post-query/) method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryExternalTasksCountAsyncWithHttpInfo (ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetExternalTaskResourcePriorityAsync (string id, PriorityDto priorityDto = default(PriorityDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskResourcePriorityAsyncWithHttpInfo (string id, PriorityDto priorityDto = default(PriorityDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetExternalTaskResourceRetriesAsync (string id, RetriesDto retriesDto = default(RetriesDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskResourceRetriesAsyncWithHttpInfo (string id, RetriesDto retriesDto = default(RetriesDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetExternalTaskRetriesAsync (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskRetriesAsyncWithHttpInfo (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> SetExternalTaskRetriesAsyncOperationAsync (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> SetExternalTaskRetriesAsyncOperationAsyncWithHttpInfo (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlockAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlockAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExternalTaskApi : IExternalTaskApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalTaskApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExternalTaskApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExternalTaskApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Completes an external task by id and updates process variables.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        public void CompleteExternalTaskResource (string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto))
        {
             CompleteExternalTaskResourceWithHttpInfo(id, completeExternalTaskDto);
        }

        /// <summary>
        ///  Completes an external task by id and updates process variables.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CompleteExternalTaskResourceWithHttpInfo (string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->CompleteExternalTaskResource");

            var localVarPath = "/external-task/{id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeExternalTaskDto != null && completeExternalTaskDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(completeExternalTaskDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeExternalTaskDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteExternalTaskResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Completes an external task by id and updates process variables.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CompleteExternalTaskResourceAsync (string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto))
        {
             await CompleteExternalTaskResourceAsyncWithHttpInfo(id, completeExternalTaskDto);

        }

        /// <summary>
        ///  Completes an external task by id and updates process variables.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CompleteExternalTaskResourceAsyncWithHttpInfo (string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->CompleteExternalTaskResource");

            var localVarPath = "/external-task/{id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeExternalTaskDto != null && completeExternalTaskDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(completeExternalTaskDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeExternalTaskDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteExternalTaskResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Extends the timeout of the lock by a given amount of time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        public void ExtendLock (string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto))
        {
             ExtendLockWithHttpInfo(id, extendLockOnExternalTaskDto);
        }

        /// <summary>
        ///  Extends the timeout of the lock by a given amount of time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExtendLockWithHttpInfo (string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->ExtendLock");

            var localVarPath = "/external-task/{id}/extendLock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (extendLockOnExternalTaskDto != null && extendLockOnExternalTaskDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extendLockOnExternalTaskDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extendLockOnExternalTaskDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtendLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Extends the timeout of the lock by a given amount of time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExtendLockAsync (string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto))
        {
             await ExtendLockAsyncWithHttpInfo(id, extendLockOnExternalTaskDto);

        }

        /// <summary>
        ///  Extends the timeout of the lock by a given amount of time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExtendLockAsyncWithHttpInfo (string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->ExtendLock");

            var localVarPath = "/external-task/{id}/extendLock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (extendLockOnExternalTaskDto != null && extendLockOnExternalTaskDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extendLockOnExternalTaskDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extendLockOnExternalTaskDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtendLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>List&lt;LockedExternalTaskDto&gt;</returns>
        public List<LockedExternalTaskDto> FetchAndLock (FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto))
        {
             ApiResponse<List<LockedExternalTaskDto>> localVarResponse = FetchAndLockWithHttpInfo(fetchExternalTasksDto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LockedExternalTaskDto&gt;</returns>
        public ApiResponse<List<LockedExternalTaskDto>> FetchAndLockWithHttpInfo (FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto))
        {

            var localVarPath = "/external-task/fetchAndLock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fetchExternalTasksDto != null && fetchExternalTasksDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fetchExternalTasksDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fetchExternalTasksDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchAndLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LockedExternalTaskDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LockedExternalTaskDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LockedExternalTaskDto>)));
        }

        /// <summary>
        ///  Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>Task of List&lt;LockedExternalTaskDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<LockedExternalTaskDto>> FetchAndLockAsync (FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto))
        {
             ApiResponse<List<LockedExternalTaskDto>> localVarResponse = await FetchAndLockAsyncWithHttpInfo(fetchExternalTasksDto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LockedExternalTaskDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LockedExternalTaskDto>>> FetchAndLockAsyncWithHttpInfo (FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto))
        {

            var localVarPath = "/external-task/fetchAndLock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fetchExternalTasksDto != null && fetchExternalTasksDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fetchExternalTasksDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fetchExternalTasksDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchAndLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LockedExternalTaskDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LockedExternalTaskDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LockedExternalTaskDto>)));
        }

        /// <summary>
        ///  Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>ExternalTaskDto</returns>
        public ExternalTaskDto GetExternalTask (string id)
        {
             ApiResponse<ExternalTaskDto> localVarResponse = GetExternalTaskWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>ApiResponse of ExternalTaskDto</returns>
        public ApiResponse<ExternalTaskDto> GetExternalTaskWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->GetExternalTask");

            var localVarPath = "/external-task/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalTaskDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExternalTaskDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalTaskDto)));
        }

        /// <summary>
        ///  Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>Task of ExternalTaskDto</returns>
        public async System.Threading.Tasks.Task<ExternalTaskDto> GetExternalTaskAsync (string id)
        {
             ApiResponse<ExternalTaskDto> localVarResponse = await GetExternalTaskAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>Task of ApiResponse (ExternalTaskDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalTaskDto>> GetExternalTaskAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->GetExternalTask");

            var localVarPath = "/external-task/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalTaskDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExternalTaskDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalTaskDto)));
        }

        /// <summary>
        ///  Retrieves the error details in the context of a running external task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>string</returns>
        public string GetExternalTaskErrorDetails (string id)
        {
             ApiResponse<string> localVarResponse = GetExternalTaskErrorDetailsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the error details in the context of a running external task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetExternalTaskErrorDetailsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->GetExternalTaskErrorDetails");

            var localVarPath = "/external-task/{id}/errorDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalTaskErrorDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieves the error details in the context of a running external task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetExternalTaskErrorDetailsAsync (string id)
        {
             ApiResponse<string> localVarResponse = await GetExternalTaskErrorDetailsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves the error details in the context of a running external task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetExternalTaskErrorDetailsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->GetExternalTaskErrorDetails");

            var localVarPath = "/external-task/{id}/errorDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalTaskErrorDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query-count/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;ExternalTaskDto&gt;</returns>
        public List<ExternalTaskDto> GetExternalTasks (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
             ApiResponse<List<ExternalTaskDto>> localVarResponse = GetExternalTasksWithHttpInfo(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, sortBy, sortOrder, firstResult, maxResults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query-count/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;ExternalTaskDto&gt;</returns>
        public ApiResponse<List<ExternalTaskDto>> GetExternalTasksWithHttpInfo (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {

            var localVarPath = "/external-task";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTaskId", externalTaskId)); // query parameter
            if (externalTaskIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTaskIdIn", externalTaskIdIn)); // query parameter
            if (topicName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topicName", topicName)); // query parameter
            if (workerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workerId", workerId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (notLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notLocked", notLocked)); // query parameter
            if (withRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRetriesLeft", withRetriesLeft)); // query parameter
            if (noRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "noRetriesLeft", noRetriesLeft)); // query parameter
            if (lockExpirationAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lockExpirationAfter", lockExpirationAfter)); // query parameter
            if (lockExpirationBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lockExpirationBefore", lockExpirationBefore)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (activityIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityIdIn", activityIdIn)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (processInstanceIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceIdIn", processInstanceIdIn)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (priorityHigherThanOrEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals)); // query parameter
            if (priorityLowerThanOrEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExternalTaskDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExternalTaskDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExternalTaskDto>)));
        }

        /// <summary>
        ///  Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query-count/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of List&lt;ExternalTaskDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExternalTaskDto>> GetExternalTasksAsync (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
             ApiResponse<List<ExternalTaskDto>> localVarResponse = await GetExternalTasksAsyncWithHttpInfo(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, sortBy, sortOrder, firstResult, maxResults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query-count/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalTaskDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExternalTaskDto>>> GetExternalTasksAsyncWithHttpInfo (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {

            var localVarPath = "/external-task";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTaskId", externalTaskId)); // query parameter
            if (externalTaskIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTaskIdIn", externalTaskIdIn)); // query parameter
            if (topicName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topicName", topicName)); // query parameter
            if (workerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workerId", workerId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (notLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notLocked", notLocked)); // query parameter
            if (withRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRetriesLeft", withRetriesLeft)); // query parameter
            if (noRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "noRetriesLeft", noRetriesLeft)); // query parameter
            if (lockExpirationAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lockExpirationAfter", lockExpirationAfter)); // query parameter
            if (lockExpirationBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lockExpirationBefore", lockExpirationBefore)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (activityIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityIdIn", activityIdIn)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (processInstanceIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceIdIn", processInstanceIdIn)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (priorityHigherThanOrEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals)); // query parameter
            if (priorityLowerThanOrEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExternalTaskDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExternalTaskDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExternalTaskDto>)));
        }

        /// <summary>
        ///  Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetExternalTasksCount (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?))
        {
             ApiResponse<CountResultDto> localVarResponse = GetExternalTasksCountWithHttpInfo(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public ApiResponse<CountResultDto> GetExternalTasksCountWithHttpInfo (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?))
        {

            var localVarPath = "/external-task/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTaskId", externalTaskId)); // query parameter
            if (externalTaskIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTaskIdIn", externalTaskIdIn)); // query parameter
            if (topicName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topicName", topicName)); // query parameter
            if (workerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workerId", workerId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (notLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notLocked", notLocked)); // query parameter
            if (withRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRetriesLeft", withRetriesLeft)); // query parameter
            if (noRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "noRetriesLeft", noRetriesLeft)); // query parameter
            if (lockExpirationAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lockExpirationAfter", lockExpirationAfter)); // query parameter
            if (lockExpirationBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lockExpirationBefore", lockExpirationBefore)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (activityIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityIdIn", activityIdIn)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (processInstanceIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceIdIn", processInstanceIdIn)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (priorityHigherThanOrEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals)); // query parameter
            if (priorityLowerThanOrEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalTasksCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        ///  Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetExternalTasksCountAsync (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?))
        {
             ApiResponse<CountResultDto> localVarResponse = await GetExternalTasksCountAsyncWithHttpInfo(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetExternalTasksCountAsyncWithHttpInfo (string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?))
        {

            var localVarPath = "/external-task/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTaskId", externalTaskId)); // query parameter
            if (externalTaskIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTaskIdIn", externalTaskIdIn)); // query parameter
            if (topicName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topicName", topicName)); // query parameter
            if (workerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workerId", workerId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (notLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notLocked", notLocked)); // query parameter
            if (withRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRetriesLeft", withRetriesLeft)); // query parameter
            if (noRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "noRetriesLeft", noRetriesLeft)); // query parameter
            if (lockExpirationAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lockExpirationAfter", lockExpirationAfter)); // query parameter
            if (lockExpirationBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lockExpirationBefore", lockExpirationBefore)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (activityIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityIdIn", activityIdIn)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (processInstanceIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceIdIn", processInstanceIdIn)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (priorityHigherThanOrEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals)); // query parameter
            if (priorityLowerThanOrEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExternalTasksCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        ///  Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTopicNames (bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?))
        {
             ApiResponse<List<string>> localVarResponse = GetTopicNamesWithHttpInfo(withLockedTasks, withUnlockedTasks, withRetriesLeft);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetTopicNamesWithHttpInfo (bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?))
        {

            var localVarPath = "/external-task/topic-names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withLockedTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withLockedTasks", withLockedTasks)); // query parameter
            if (withUnlockedTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withUnlockedTasks", withUnlockedTasks)); // query parameter
            if (withRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRetriesLeft", withRetriesLeft)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopicNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTopicNamesAsync (bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?))
        {
             ApiResponse<List<string>> localVarResponse = await GetTopicNamesAsyncWithHttpInfo(withLockedTasks, withUnlockedTasks, withRetriesLeft);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTopicNamesAsyncWithHttpInfo (bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?))
        {

            var localVarPath = "/external-task/topic-names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (withLockedTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withLockedTasks", withLockedTasks)); // query parameter
            if (withUnlockedTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withUnlockedTasks", withUnlockedTasks)); // query parameter
            if (withRetriesLeft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withRetriesLeft", withRetriesLeft)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopicNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns></returns>
        public void HandleExternalTaskBpmnError (string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError))
        {
             HandleExternalTaskBpmnErrorWithHttpInfo(id, externalTaskBpmnError);
        }

        /// <summary>
        ///  Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HandleExternalTaskBpmnErrorWithHttpInfo (string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->HandleExternalTaskBpmnError");

            var localVarPath = "/external-task/{id}/bpmnError";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalTaskBpmnError != null && externalTaskBpmnError.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalTaskBpmnError); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalTaskBpmnError; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleExternalTaskBpmnError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HandleExternalTaskBpmnErrorAsync (string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError))
        {
             await HandleExternalTaskBpmnErrorAsyncWithHttpInfo(id, externalTaskBpmnError);

        }

        /// <summary>
        ///  Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HandleExternalTaskBpmnErrorAsyncWithHttpInfo (string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->HandleExternalTaskBpmnError");

            var localVarPath = "/external-task/{id}/bpmnError";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalTaskBpmnError != null && externalTaskBpmnError.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalTaskBpmnError); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalTaskBpmnError; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleExternalTaskBpmnError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns></returns>
        public void HandleFailure (string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto))
        {
             HandleFailureWithHttpInfo(id, externalTaskFailureDto);
        }

        /// <summary>
        ///  Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HandleFailureWithHttpInfo (string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->HandleFailure");

            var localVarPath = "/external-task/{id}/failure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalTaskFailureDto != null && externalTaskFailureDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalTaskFailureDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalTaskFailureDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleFailure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HandleFailureAsync (string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto))
        {
             await HandleFailureAsyncWithHttpInfo(id, externalTaskFailureDto);

        }

        /// <summary>
        ///  Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HandleFailureAsyncWithHttpInfo (string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->HandleFailure");

            var localVarPath = "/external-task/{id}/failure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalTaskFailureDto != null && externalTaskFailureDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalTaskFailureDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalTaskFailureDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleFailure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>List&lt;ExternalTaskDto&gt;</returns>
        public List<ExternalTaskDto> QueryExternalTasks (int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {
             ApiResponse<List<ExternalTaskDto>> localVarResponse = QueryExternalTasksWithHttpInfo(firstResult, maxResults, externalTaskQueryDto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExternalTaskDto&gt;</returns>
        public ApiResponse<List<ExternalTaskDto>> QueryExternalTasksWithHttpInfo (int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {

            var localVarPath = "/external-task";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter
            if (externalTaskQueryDto != null && externalTaskQueryDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalTaskQueryDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalTaskQueryDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryExternalTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExternalTaskDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExternalTaskDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExternalTaskDto>)));
        }

        /// <summary>
        ///  Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>Task of List&lt;ExternalTaskDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExternalTaskDto>> QueryExternalTasksAsync (int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {
             ApiResponse<List<ExternalTaskDto>> localVarResponse = await QueryExternalTasksAsyncWithHttpInfo(firstResult, maxResults, externalTaskQueryDto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.13/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalTaskDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExternalTaskDto>>> QueryExternalTasksAsyncWithHttpInfo (int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {

            var localVarPath = "/external-task";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter
            if (externalTaskQueryDto != null && externalTaskQueryDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalTaskQueryDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalTaskQueryDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryExternalTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExternalTaskDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExternalTaskDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExternalTaskDto>)));
        }

        /// <summary>
        ///  Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.13/reference/rest/external-task/post-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryExternalTasksCount (ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {
             ApiResponse<CountResultDto> localVarResponse = QueryExternalTasksCountWithHttpInfo(externalTaskQueryDto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.13/reference/rest/external-task/post-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public ApiResponse<CountResultDto> QueryExternalTasksCountWithHttpInfo (ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {

            var localVarPath = "/external-task/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalTaskQueryDto != null && externalTaskQueryDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalTaskQueryDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalTaskQueryDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryExternalTasksCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        ///  Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.13/reference/rest/external-task/post-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryExternalTasksCountAsync (ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {
             ApiResponse<CountResultDto> localVarResponse = await QueryExternalTasksCountAsyncWithHttpInfo(externalTaskQueryDto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.13/reference/rest/external-task/post-query/) method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryExternalTasksCountAsyncWithHttpInfo (ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {

            var localVarPath = "/external-task/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalTaskQueryDto != null && externalTaskQueryDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalTaskQueryDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalTaskQueryDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryExternalTasksCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        ///  Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns></returns>
        public void SetExternalTaskResourcePriority (string id, PriorityDto priorityDto = default(PriorityDto))
        {
             SetExternalTaskResourcePriorityWithHttpInfo(id, priorityDto);
        }

        /// <summary>
        ///  Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetExternalTaskResourcePriorityWithHttpInfo (string id, PriorityDto priorityDto = default(PriorityDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->SetExternalTaskResourcePriority");

            var localVarPath = "/external-task/{id}/priority";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (priorityDto != null && priorityDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priorityDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priorityDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExternalTaskResourcePriority", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetExternalTaskResourcePriorityAsync (string id, PriorityDto priorityDto = default(PriorityDto))
        {
             await SetExternalTaskResourcePriorityAsyncWithHttpInfo(id, priorityDto);

        }

        /// <summary>
        ///  Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskResourcePriorityAsyncWithHttpInfo (string id, PriorityDto priorityDto = default(PriorityDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->SetExternalTaskResourcePriority");

            var localVarPath = "/external-task/{id}/priority";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (priorityDto != null && priorityDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priorityDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priorityDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExternalTaskResourcePriority", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns></returns>
        public void SetExternalTaskResourceRetries (string id, RetriesDto retriesDto = default(RetriesDto))
        {
             SetExternalTaskResourceRetriesWithHttpInfo(id, retriesDto);
        }

        /// <summary>
        ///  Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetExternalTaskResourceRetriesWithHttpInfo (string id, RetriesDto retriesDto = default(RetriesDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->SetExternalTaskResourceRetries");

            var localVarPath = "/external-task/{id}/retries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (retriesDto != null && retriesDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retriesDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retriesDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExternalTaskResourceRetries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetExternalTaskResourceRetriesAsync (string id, RetriesDto retriesDto = default(RetriesDto))
        {
             await SetExternalTaskResourceRetriesAsyncWithHttpInfo(id, retriesDto);

        }

        /// <summary>
        ///  Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskResourceRetriesAsyncWithHttpInfo (string id, RetriesDto retriesDto = default(RetriesDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->SetExternalTaskResourceRetries");

            var localVarPath = "/external-task/{id}/retries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (retriesDto != null && retriesDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retriesDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retriesDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExternalTaskResourceRetries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns></returns>
        public void SetExternalTaskRetries (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {
             SetExternalTaskRetriesWithHttpInfo(setRetriesForExternalTasksDto);
        }

        /// <summary>
        ///  Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetExternalTaskRetriesWithHttpInfo (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {

            var localVarPath = "/external-task/retries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setRetriesForExternalTasksDto != null && setRetriesForExternalTasksDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setRetriesForExternalTasksDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRetriesForExternalTasksDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExternalTaskRetries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetExternalTaskRetriesAsync (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {
             await SetExternalTaskRetriesAsyncWithHttpInfo(setRetriesForExternalTasksDto);

        }

        /// <summary>
        ///  Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskRetriesAsyncWithHttpInfo (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {

            var localVarPath = "/external-task/retries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setRetriesForExternalTasksDto != null && setRetriesForExternalTasksDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setRetriesForExternalTasksDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRetriesForExternalTasksDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExternalTaskRetries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto SetExternalTaskRetriesAsyncOperation (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {
             ApiResponse<BatchDto> localVarResponse = SetExternalTaskRetriesAsyncOperationWithHttpInfo(setRetriesForExternalTasksDto);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public ApiResponse<BatchDto> SetExternalTaskRetriesAsyncOperationWithHttpInfo (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {

            var localVarPath = "/external-task/retries-async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setRetriesForExternalTasksDto != null && setRetriesForExternalTasksDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setRetriesForExternalTasksDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRetriesForExternalTasksDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExternalTaskRetriesAsyncOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchDto)));
        }

        /// <summary>
        ///  Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> SetExternalTaskRetriesAsyncOperationAsync (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {
             ApiResponse<BatchDto> localVarResponse = await SetExternalTaskRetriesAsyncOperationAsyncWithHttpInfo(setRetriesForExternalTasksDto);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchDto>> SetExternalTaskRetriesAsyncOperationAsyncWithHttpInfo (SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {

            var localVarPath = "/external-task/retries-async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setRetriesForExternalTasksDto != null && setRetriesForExternalTasksDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setRetriesForExternalTasksDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRetriesForExternalTasksDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExternalTaskRetriesAsyncOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchDto)));
        }

        /// <summary>
        ///  Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns></returns>
        public void Unlock (string id)
        {
             UnlockWithHttpInfo(id);
        }

        /// <summary>
        ///  Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnlockWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->Unlock");

            var localVarPath = "/external-task/{id}/unlock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlockAsync (string id)
        {
             await UnlockAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnlockAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->Unlock");

            var localVarPath = "/external-task/{id}/unlock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
