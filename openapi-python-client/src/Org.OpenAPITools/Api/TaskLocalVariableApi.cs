/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskLocalVariableApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a local variable from a task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns></returns>
        void DeleteTaskLocalVariable (string id, string varName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a local variable from a task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskLocalVariableWithHttpInfo (string id, string varName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a variable from the context of a given task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>VariableValueDto</returns>
        VariableValueDto GetTaskLocalVariable (string id, string varName, bool? deserializeValue = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a variable from the context of a given task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of VariableValueDto</returns>
        ApiResponse<VariableValueDto> GetTaskLocalVariableWithHttpInfo (string id, string varName, bool? deserializeValue = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTaskLocalVariableBinary (string id, string varName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTaskLocalVariableBinaryWithHttpInfo (string id, string varName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all variables of a given task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetTaskLocalVariables (string id, bool? deserializeValues = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all variables of a given task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetTaskLocalVariablesWithHttpInfo (string id, bool? deserializeValues = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="patchVariablesDto"> (optional)</param>
        /// <returns></returns>
        void ModifyTaskLocalVariables (string id, PatchVariablesDto patchVariablesDto = default(PatchVariablesDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="patchVariablesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ModifyTaskLocalVariablesWithHttpInfo (string id, PatchVariablesDto patchVariablesDto = default(PatchVariablesDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets a variable in the context of a given task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="variableValueDto"> (optional)</param>
        /// <returns></returns>
        void PutTaskLocalVariable (string id, string varName, VariableValueDto variableValueDto = default(VariableValueDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets a variable in the context of a given task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="variableValueDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutTaskLocalVariableWithHttpInfo (string id, string varName, VariableValueDto variableValueDto = default(VariableValueDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the serialized value for a binary variable or the binary value for a file variable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data">The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)</param>
        /// <param name="valueType">The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)</param>
        /// <returns></returns>
        void SetBinaryTaskLocalVariable (string id, string varName, System.IO.Stream data = default(System.IO.Stream), string valueType = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the serialized value for a binary variable or the binary value for a file variable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data">The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)</param>
        /// <param name="valueType">The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetBinaryTaskLocalVariableWithHttpInfo (string id, string varName, System.IO.Stream data = default(System.IO.Stream), string valueType = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a local variable from a task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskLocalVariableAsync (string id, string varName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a local variable from a task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskLocalVariableAsyncWithHttpInfo (string id, string varName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a variable from the context of a given task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of VariableValueDto</returns>
        System.Threading.Tasks.Task<VariableValueDto> GetTaskLocalVariableAsync (string id, string varName, bool? deserializeValue = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a variable from the context of a given task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (VariableValueDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableValueDto>> GetTaskLocalVariableAsyncWithHttpInfo (string id, string varName, bool? deserializeValue = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTaskLocalVariableBinaryAsync (string id, string varName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTaskLocalVariableBinaryAsyncWithHttpInfo (string id, string varName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all variables of a given task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetTaskLocalVariablesAsync (string id, bool? deserializeValues = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all variables of a given task by id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetTaskLocalVariablesAsyncWithHttpInfo (string id, bool? deserializeValues = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="patchVariablesDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ModifyTaskLocalVariablesAsync (string id, PatchVariablesDto patchVariablesDto = default(PatchVariablesDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="patchVariablesDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModifyTaskLocalVariablesAsyncWithHttpInfo (string id, PatchVariablesDto patchVariablesDto = default(PatchVariablesDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets a variable in the context of a given task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="variableValueDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutTaskLocalVariableAsync (string id, string varName, VariableValueDto variableValueDto = default(VariableValueDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets a variable in the context of a given task.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="variableValueDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutTaskLocalVariableAsyncWithHttpInfo (string id, string varName, VariableValueDto variableValueDto = default(VariableValueDto));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the serialized value for a binary variable or the binary value for a file variable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data">The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)</param>
        /// <param name="valueType">The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetBinaryTaskLocalVariableAsync (string id, string varName, System.IO.Stream data = default(System.IO.Stream), string valueType = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the serialized value for a binary variable or the binary value for a file variable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data">The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)</param>
        /// <param name="valueType">The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetBinaryTaskLocalVariableAsyncWithHttpInfo (string id, string varName, System.IO.Stream data = default(System.IO.Stream), string valueType = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskLocalVariableApi : ITaskLocalVariableApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskLocalVariableApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskLocalVariableApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskLocalVariableApi"/> class
        /// </summary>
        /// <returns></returns>
        public TaskLocalVariableApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskLocalVariableApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskLocalVariableApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Removes a local variable from a task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns></returns>
        public void DeleteTaskLocalVariable (string id, string varName)
        {
             DeleteTaskLocalVariableWithHttpInfo(id, varName);
        }

        /// <summary>
        ///  Removes a local variable from a task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskLocalVariableWithHttpInfo (string id, string varName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->DeleteTaskLocalVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->DeleteTaskLocalVariable");

            var localVarPath = "/task/{id}/localVariables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskLocalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a local variable from a task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskLocalVariableAsync (string id, string varName)
        {
             await DeleteTaskLocalVariableAsyncWithHttpInfo(id, varName);

        }

        /// <summary>
        ///  Removes a local variable from a task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskLocalVariableAsyncWithHttpInfo (string id, string varName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->DeleteTaskLocalVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->DeleteTaskLocalVariable");

            var localVarPath = "/task/{id}/localVariables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskLocalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieves a variable from the context of a given task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>VariableValueDto</returns>
        public VariableValueDto GetTaskLocalVariable (string id, string varName, bool? deserializeValue = default(bool?))
        {
             ApiResponse<VariableValueDto> localVarResponse = GetTaskLocalVariableWithHttpInfo(id, varName, deserializeValue);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a variable from the context of a given task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of VariableValueDto</returns>
        public ApiResponse<VariableValueDto> GetTaskLocalVariableWithHttpInfo (string id, string varName, bool? deserializeValue = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->GetTaskLocalVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->GetTaskLocalVariable");

            var localVarPath = "/task/{id}/localVariables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (deserializeValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValue", deserializeValue)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskLocalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableValueDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableValueDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableValueDto)));
        }

        /// <summary>
        ///  Retrieves a variable from the context of a given task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of VariableValueDto</returns>
        public async System.Threading.Tasks.Task<VariableValueDto> GetTaskLocalVariableAsync (string id, string varName, bool? deserializeValue = default(bool?))
        {
             ApiResponse<VariableValueDto> localVarResponse = await GetTaskLocalVariableAsyncWithHttpInfo(id, varName, deserializeValue);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a variable from the context of a given task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (VariableValueDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableValueDto>> GetTaskLocalVariableAsyncWithHttpInfo (string id, string varName, bool? deserializeValue = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->GetTaskLocalVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->GetTaskLocalVariable");

            var localVarPath = "/task/{id}/localVariables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (deserializeValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValue", deserializeValue)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskLocalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableValueDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableValueDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableValueDto)));
        }

        /// <summary>
        ///  Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTaskLocalVariableBinary (string id, string varName)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTaskLocalVariableBinaryWithHttpInfo(id, varName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetTaskLocalVariableBinaryWithHttpInfo (string id, string varName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->GetTaskLocalVariableBinary");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->GetTaskLocalVariableBinary");

            var localVarPath = "/task/{id}/localVariables/{varName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskLocalVariableBinary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTaskLocalVariableBinaryAsync (string id, string varName)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTaskLocalVariableBinaryAsyncWithHttpInfo(id, varName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTaskLocalVariableBinaryAsyncWithHttpInfo (string id, string varName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->GetTaskLocalVariableBinary");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->GetTaskLocalVariableBinary");

            var localVarPath = "/task/{id}/localVariables/{varName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskLocalVariableBinary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Retrieves all variables of a given task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetTaskLocalVariables (string id, bool? deserializeValues = default(bool?))
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetTaskLocalVariablesWithHttpInfo(id, deserializeValues);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all variables of a given task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public ApiResponse<Dictionary<string, VariableValueDto>> GetTaskLocalVariablesWithHttpInfo (string id, bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->GetTaskLocalVariables");

            var localVarPath = "/task/{id}/localVariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deserializeValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValues", deserializeValues)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskLocalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        ///  Retrieves all variables of a given task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetTaskLocalVariablesAsync (string id, bool? deserializeValues = default(bool?))
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetTaskLocalVariablesAsyncWithHttpInfo(id, deserializeValues);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all variables of a given task by id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetTaskLocalVariablesAsyncWithHttpInfo (string id, bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->GetTaskLocalVariables");

            var localVarPath = "/task/{id}/localVariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deserializeValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValues", deserializeValues)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskLocalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        ///  Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="patchVariablesDto"> (optional)</param>
        /// <returns></returns>
        public void ModifyTaskLocalVariables (string id, PatchVariablesDto patchVariablesDto = default(PatchVariablesDto))
        {
             ModifyTaskLocalVariablesWithHttpInfo(id, patchVariablesDto);
        }

        /// <summary>
        ///  Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="patchVariablesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ModifyTaskLocalVariablesWithHttpInfo (string id, PatchVariablesDto patchVariablesDto = default(PatchVariablesDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->ModifyTaskLocalVariables");

            var localVarPath = "/task/{id}/localVariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (patchVariablesDto != null && patchVariablesDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchVariablesDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchVariablesDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyTaskLocalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="patchVariablesDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ModifyTaskLocalVariablesAsync (string id, PatchVariablesDto patchVariablesDto = default(PatchVariablesDto))
        {
             await ModifyTaskLocalVariablesAsyncWithHttpInfo(id, patchVariablesDto);

        }

        /// <summary>
        ///  Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="patchVariablesDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ModifyTaskLocalVariablesAsyncWithHttpInfo (string id, PatchVariablesDto patchVariablesDto = default(PatchVariablesDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->ModifyTaskLocalVariables");

            var localVarPath = "/task/{id}/localVariables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (patchVariablesDto != null && patchVariablesDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchVariablesDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchVariablesDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyTaskLocalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets a variable in the context of a given task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="variableValueDto"> (optional)</param>
        /// <returns></returns>
        public void PutTaskLocalVariable (string id, string varName, VariableValueDto variableValueDto = default(VariableValueDto))
        {
             PutTaskLocalVariableWithHttpInfo(id, varName, variableValueDto);
        }

        /// <summary>
        ///  Sets a variable in the context of a given task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="variableValueDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutTaskLocalVariableWithHttpInfo (string id, string varName, VariableValueDto variableValueDto = default(VariableValueDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->PutTaskLocalVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->PutTaskLocalVariable");

            var localVarPath = "/task/{id}/localVariables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (variableValueDto != null && variableValueDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variableValueDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variableValueDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTaskLocalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets a variable in the context of a given task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="variableValueDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutTaskLocalVariableAsync (string id, string varName, VariableValueDto variableValueDto = default(VariableValueDto))
        {
             await PutTaskLocalVariableAsyncWithHttpInfo(id, varName, variableValueDto);

        }

        /// <summary>
        ///  Sets a variable in the context of a given task.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="variableValueDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutTaskLocalVariableAsyncWithHttpInfo (string id, string varName, VariableValueDto variableValueDto = default(VariableValueDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->PutTaskLocalVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->PutTaskLocalVariable");

            var localVarPath = "/task/{id}/localVariables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (variableValueDto != null && variableValueDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variableValueDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variableValueDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTaskLocalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the serialized value for a binary variable or the binary value for a file variable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data">The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)</param>
        /// <param name="valueType">The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)</param>
        /// <returns></returns>
        public void SetBinaryTaskLocalVariable (string id, string varName, System.IO.Stream data = default(System.IO.Stream), string valueType = default(string))
        {
             SetBinaryTaskLocalVariableWithHttpInfo(id, varName, data, valueType);
        }

        /// <summary>
        ///  Sets the serialized value for a binary variable or the binary value for a file variable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data">The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)</param>
        /// <param name="valueType">The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetBinaryTaskLocalVariableWithHttpInfo (string id, string varName, System.IO.Stream data = default(System.IO.Stream), string valueType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->SetBinaryTaskLocalVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->SetBinaryTaskLocalVariable");

            var localVarPath = "/task/{id}/localVariables/{varName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (data != null) localVarFileParams.Add("data", this.Configuration.ApiClient.ParameterToFile("data", data));
            if (valueType != null) localVarFormParams.Add("valueType", this.Configuration.ApiClient.ParameterToString(valueType)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBinaryTaskLocalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the serialized value for a binary variable or the binary value for a file variable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data">The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)</param>
        /// <param name="valueType">The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetBinaryTaskLocalVariableAsync (string id, string varName, System.IO.Stream data = default(System.IO.Stream), string valueType = default(string))
        {
             await SetBinaryTaskLocalVariableAsyncWithHttpInfo(id, varName, data, valueType);

        }

        /// <summary>
        ///  Sets the serialized value for a binary variable or the binary value for a file variable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data">The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)</param>
        /// <param name="valueType">The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetBinaryTaskLocalVariableAsyncWithHttpInfo (string id, string varName, System.IO.Stream data = default(System.IO.Stream), string valueType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskLocalVariableApi->SetBinaryTaskLocalVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskLocalVariableApi->SetBinaryTaskLocalVariable");

            var localVarPath = "/task/{id}/localVariables/{varName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (data != null) localVarFileParams.Add("data", this.Configuration.ApiClient.ParameterToFile("data", data));
            if (valueType != null) localVarFormParams.Add("valueType", this.Configuration.ApiClient.ParameterToString(valueType)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBinaryTaskLocalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
