/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ExternalTaskApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ExternalTaskApiTests
    {
        private ExternalTaskApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExternalTaskApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExternalTaskApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ExternalTaskApi
            //Assert.IsInstanceOf(typeof(ExternalTaskApi), instance);
        }

        
        /// <summary>
        /// Test CompleteExternalTaskResource
        /// </summary>
        [Test]
        public void CompleteExternalTaskResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CompleteExternalTaskDto completeExternalTaskDto = null;
            //instance.CompleteExternalTaskResource(id, completeExternalTaskDto);
            
        }
        
        /// <summary>
        /// Test ExtendLock
        /// </summary>
        [Test]
        public void ExtendLockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = null;
            //instance.ExtendLock(id, extendLockOnExternalTaskDto);
            
        }
        
        /// <summary>
        /// Test FetchAndLock
        /// </summary>
        [Test]
        public void FetchAndLockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FetchExternalTasksDto fetchExternalTasksDto = null;
            //var response = instance.FetchAndLock(fetchExternalTasksDto);
            //Assert.IsInstanceOf(typeof(List<LockedExternalTaskDto>), response, "response is List<LockedExternalTaskDto>");
        }
        
        /// <summary>
        /// Test GetExternalTask
        /// </summary>
        [Test]
        public void GetExternalTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetExternalTask(id);
            //Assert.IsInstanceOf(typeof(ExternalTaskDto), response, "response is ExternalTaskDto");
        }
        
        /// <summary>
        /// Test GetExternalTaskErrorDetails
        /// </summary>
        [Test]
        public void GetExternalTaskErrorDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetExternalTaskErrorDetails(id);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetExternalTasks
        /// </summary>
        [Test]
        public void GetExternalTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalTaskId = null;
            //string externalTaskIdIn = null;
            //string topicName = null;
            //string workerId = null;
            //bool? locked = null;
            //bool? notLocked = null;
            //bool? withRetriesLeft = null;
            //bool? noRetriesLeft = null;
            //DateTime? lockExpirationAfter = null;
            //DateTime? lockExpirationBefore = null;
            //string activityId = null;
            //string activityIdIn = null;
            //string executionId = null;
            //string processInstanceId = null;
            //string processInstanceIdIn = null;
            //string processDefinitionId = null;
            //string tenantIdIn = null;
            //bool? active = null;
            //bool? suspended = null;
            //long? priorityHigherThanOrEquals = null;
            //long? priorityLowerThanOrEquals = null;
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //var response = instance.GetExternalTasks(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, sortBy, sortOrder, firstResult, maxResults);
            //Assert.IsInstanceOf(typeof(List<ExternalTaskDto>), response, "response is List<ExternalTaskDto>");
        }
        
        /// <summary>
        /// Test GetExternalTasksCount
        /// </summary>
        [Test]
        public void GetExternalTasksCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalTaskId = null;
            //string externalTaskIdIn = null;
            //string topicName = null;
            //string workerId = null;
            //bool? locked = null;
            //bool? notLocked = null;
            //bool? withRetriesLeft = null;
            //bool? noRetriesLeft = null;
            //DateTime? lockExpirationAfter = null;
            //DateTime? lockExpirationBefore = null;
            //string activityId = null;
            //string activityIdIn = null;
            //string executionId = null;
            //string processInstanceId = null;
            //string processInstanceIdIn = null;
            //string processDefinitionId = null;
            //string tenantIdIn = null;
            //bool? active = null;
            //bool? suspended = null;
            //long? priorityHigherThanOrEquals = null;
            //long? priorityLowerThanOrEquals = null;
            //var response = instance.GetExternalTasksCount(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals);
            //Assert.IsInstanceOf(typeof(CountResultDto), response, "response is CountResultDto");
        }
        
        /// <summary>
        /// Test GetTopicNames
        /// </summary>
        [Test]
        public void GetTopicNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? withLockedTasks = null;
            //bool? withUnlockedTasks = null;
            //bool? withRetriesLeft = null;
            //var response = instance.GetTopicNames(withLockedTasks, withUnlockedTasks, withRetriesLeft);
            //Assert.IsInstanceOf(typeof(List<string>), response, "response is List<string>");
        }
        
        /// <summary>
        /// Test HandleExternalTaskBpmnError
        /// </summary>
        [Test]
        public void HandleExternalTaskBpmnErrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ExternalTaskBpmnError externalTaskBpmnError = null;
            //instance.HandleExternalTaskBpmnError(id, externalTaskBpmnError);
            
        }
        
        /// <summary>
        /// Test HandleFailure
        /// </summary>
        [Test]
        public void HandleFailureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ExternalTaskFailureDto externalTaskFailureDto = null;
            //instance.HandleFailure(id, externalTaskFailureDto);
            
        }
        
        /// <summary>
        /// Test QueryExternalTasks
        /// </summary>
        [Test]
        public void QueryExternalTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? firstResult = null;
            //int? maxResults = null;
            //ExternalTaskQueryDto externalTaskQueryDto = null;
            //var response = instance.QueryExternalTasks(firstResult, maxResults, externalTaskQueryDto);
            //Assert.IsInstanceOf(typeof(List<ExternalTaskDto>), response, "response is List<ExternalTaskDto>");
        }
        
        /// <summary>
        /// Test QueryExternalTasksCount
        /// </summary>
        [Test]
        public void QueryExternalTasksCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExternalTaskQueryDto externalTaskQueryDto = null;
            //var response = instance.QueryExternalTasksCount(externalTaskQueryDto);
            //Assert.IsInstanceOf(typeof(CountResultDto), response, "response is CountResultDto");
        }
        
        /// <summary>
        /// Test SetExternalTaskResourcePriority
        /// </summary>
        [Test]
        public void SetExternalTaskResourcePriorityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PriorityDto priorityDto = null;
            //instance.SetExternalTaskResourcePriority(id, priorityDto);
            
        }
        
        /// <summary>
        /// Test SetExternalTaskResourceRetries
        /// </summary>
        [Test]
        public void SetExternalTaskResourceRetriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //RetriesDto retriesDto = null;
            //instance.SetExternalTaskResourceRetries(id, retriesDto);
            
        }
        
        /// <summary>
        /// Test SetExternalTaskRetries
        /// </summary>
        [Test]
        public void SetExternalTaskRetriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = null;
            //instance.SetExternalTaskRetries(setRetriesForExternalTasksDto);
            
        }
        
        /// <summary>
        /// Test SetExternalTaskRetriesAsyncOperation
        /// </summary>
        [Test]
        public void SetExternalTaskRetriesAsyncOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = null;
            //var response = instance.SetExternalTaskRetriesAsyncOperation(setRetriesForExternalTasksDto);
            //Assert.IsInstanceOf(typeof(BatchDto), response, "response is BatchDto");
        }
        
        /// <summary>
        /// Test Unlock
        /// </summary>
        [Test]
        public void UnlockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.Unlock(id);
            
        }
        
    }

}
