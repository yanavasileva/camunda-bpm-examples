/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DeploymentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DeploymentApiTests
    {
        private DeploymentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeploymentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeploymentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DeploymentApi
            //Assert.IsInstanceOf(typeof(DeploymentApi), instance);
        }

        
        /// <summary>
        /// Test CreateDeployment
        /// </summary>
        [Test]
        public void CreateDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string deploymentSource = null;
            //bool? deployChangedOnly = null;
            //bool? enableDuplicateFiltering = null;
            //string deploymentName = null;
            //System.IO.Stream data = null;
            //var response = instance.CreateDeployment(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, data);
            //Assert.IsInstanceOf(typeof(DeploymentWithDefinitionsDto), response, "response is DeploymentWithDefinitionsDto");
        }
        
        /// <summary>
        /// Test DeleteDeployment
        /// </summary>
        [Test]
        public void DeleteDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? cascade = null;
            //bool? skipCustomListeners = null;
            //bool? skipIoMappings = null;
            //instance.DeleteDeployment(id, cascade, skipCustomListeners, skipIoMappings);
            
        }
        
        /// <summary>
        /// Test GetDeployment
        /// </summary>
        [Test]
        public void GetDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDeployment(id);
            //Assert.IsInstanceOf(typeof(List<DeploymentDto>), response, "response is List<DeploymentDto>");
        }
        
        /// <summary>
        /// Test GetDeploymentResource
        /// </summary>
        [Test]
        public void GetDeploymentResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string resourceId = null;
            //var response = instance.GetDeploymentResource(id, resourceId);
            //Assert.IsInstanceOf(typeof(DeploymentResourceDto), response, "response is DeploymentResourceDto");
        }
        
        /// <summary>
        /// Test GetDeploymentResourceData
        /// </summary>
        [Test]
        public void GetDeploymentResourceDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string resourceId = null;
            //var response = instance.GetDeploymentResourceData(id, resourceId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDeploymentResources
        /// </summary>
        [Test]
        public void GetDeploymentResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDeploymentResources(id);
            //Assert.IsInstanceOf(typeof(List<DeploymentResourceDto>), response, "response is List<DeploymentResourceDto>");
        }
        
        /// <summary>
        /// Test GetDeployments
        /// </summary>
        [Test]
        public void GetDeploymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string nameLike = null;
            //string source = null;
            //bool? withoutSource = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //bool? includeDeploymentsWithoutTenantId = null;
            //DateTime? after = null;
            //DateTime? before = null;
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //var response = instance.GetDeployments(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults);
            //Assert.IsInstanceOf(typeof(List<DeploymentDto>), response, "response is List<DeploymentDto>");
        }
        
        /// <summary>
        /// Test GetDeploymentsCount
        /// </summary>
        [Test]
        public void GetDeploymentsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string nameLike = null;
            //string source = null;
            //bool? withoutSource = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //bool? includeDeploymentsWithoutTenantId = null;
            //DateTime? after = null;
            //DateTime? before = null;
            //var response = instance.GetDeploymentsCount(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before);
            //Assert.IsInstanceOf(typeof(CountResultDto), response, "response is CountResultDto");
        }
        
        /// <summary>
        /// Test Redeploy
        /// </summary>
        [Test]
        public void RedeployTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //RedeploymentDto redeploymentDto = null;
            //var response = instance.Redeploy(id, redeploymentDto);
            //Assert.IsInstanceOf(typeof(DeploymentWithDefinitionsDto), response, "response is DeploymentWithDefinitionsDto");
        }
        
    }

}
