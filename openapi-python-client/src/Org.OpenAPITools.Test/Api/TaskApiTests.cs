/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TaskApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TaskApiTests
    {
        private TaskApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaskApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaskApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TaskApi
            //Assert.IsInstanceOf(typeof(TaskApi), instance);
        }

        
        /// <summary>
        /// Test Claim
        /// </summary>
        [Test]
        public void ClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserIdDto userIdDto = null;
            //instance.Claim(id, userIdDto);
            
        }
        
        /// <summary>
        /// Test Complete
        /// </summary>
        [Test]
        public void CompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CompleteTaskDto completeTaskDto = null;
            //var response = instance.Complete(id, completeTaskDto);
            //Assert.IsInstanceOf(typeof(Dictionary<string, VariableValueDto>), response, "response is Dictionary<string, VariableValueDto>");
        }
        
        /// <summary>
        /// Test CreateTask
        /// </summary>
        [Test]
        public void CreateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskDto taskDto = null;
            //instance.CreateTask(taskDto);
            
        }
        
        /// <summary>
        /// Test DelegateTask
        /// </summary>
        [Test]
        public void DelegateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserIdDto userIdDto = null;
            //instance.DelegateTask(id, userIdDto);
            
        }
        
        /// <summary>
        /// Test DeleteTask
        /// </summary>
        [Test]
        public void DeleteTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteTask(id);
            
        }
        
        /// <summary>
        /// Test GetDeployedForm
        /// </summary>
        [Test]
        public void GetDeployedFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDeployedForm(id);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetForm
        /// </summary>
        [Test]
        public void GetFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetForm(id);
            //Assert.IsInstanceOf(typeof(FormDto), response, "response is FormDto");
        }
        
        /// <summary>
        /// Test GetFormVariables
        /// </summary>
        [Test]
        public void GetFormVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string variableNames = null;
            //bool? deserializeValues = null;
            //var response = instance.GetFormVariables(id, variableNames, deserializeValues);
            //Assert.IsInstanceOf(typeof(Dictionary<string, VariableValueDto>), response, "response is Dictionary<string, VariableValueDto>");
        }
        
        /// <summary>
        /// Test GetRenderedForm
        /// </summary>
        [Test]
        public void GetRenderedFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetRenderedForm(id);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetTask
        /// </summary>
        [Test]
        public void GetTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetTask(id);
            //Assert.IsInstanceOf(typeof(TaskDto), response, "response is TaskDto");
        }
        
        /// <summary>
        /// Test GetTasks
        /// </summary>
        [Test]
        public void GetTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string processInstanceIdIn = null;
            //string processInstanceBusinessKey = null;
            //string processInstanceBusinessKeyExpression = null;
            //string processInstanceBusinessKeyIn = null;
            //string processInstanceBusinessKeyLike = null;
            //string processInstanceBusinessKeyLikeExpression = null;
            //string processDefinitionId = null;
            //string processDefinitionKey = null;
            //string processDefinitionKeyIn = null;
            //string processDefinitionName = null;
            //string processDefinitionNameLike = null;
            //string executionId = null;
            //string caseInstanceId = null;
            //string caseInstanceBusinessKey = null;
            //string caseInstanceBusinessKeyLike = null;
            //string caseDefinitionId = null;
            //string caseDefinitionKey = null;
            //string caseDefinitionName = null;
            //string caseDefinitionNameLike = null;
            //string caseExecutionId = null;
            //string activityInstanceIdIn = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //string assignee = null;
            //string assigneeExpression = null;
            //string assigneeLike = null;
            //string assigneeLikeExpression = null;
            //string assigneeIn = null;
            //string owner = null;
            //string ownerExpression = null;
            //string candidateGroup = null;
            //string candidateGroupExpression = null;
            //string candidateUser = null;
            //string candidateUserExpression = null;
            //bool? includeAssignedTasks = null;
            //string involvedUser = null;
            //string involvedUserExpression = null;
            //bool? assigned = null;
            //bool? unassigned = null;
            //string taskDefinitionKey = null;
            //string taskDefinitionKeyIn = null;
            //string taskDefinitionKeyLike = null;
            //string name = null;
            //string nameNotEqual = null;
            //string nameLike = null;
            //string nameNotLike = null;
            //string description = null;
            //string descriptionLike = null;
            //int? priority = null;
            //int? maxPriority = null;
            //int? minPriority = null;
            //string dueDate = null;
            //string dueDateExpression = null;
            //string dueAfter = null;
            //string dueAfterExpression = null;
            //string dueBefore = null;
            //string dueBeforeExpression = null;
            //string followUpDate = null;
            //string followUpDateExpression = null;
            //string followUpAfter = null;
            //string followUpAfterExpression = null;
            //string followUpBefore = null;
            //string followUpBeforeExpression = null;
            //string followUpBeforeOrNotExistent = null;
            //string followUpBeforeOrNotExistentExpression = null;
            //string createdOn = null;
            //string createdOnExpression = null;
            //string createdAfter = null;
            //string createdAfterExpression = null;
            //string createdBefore = null;
            //string createdBeforeExpression = null;
            //string delegationState = null;
            //string candidateGroups = null;
            //string candidateGroupsExpression = null;
            //bool? withCandidateGroups = null;
            //bool? withoutCandidateGroups = null;
            //bool? withCandidateUsers = null;
            //bool? withoutCandidateUsers = null;
            //bool? active = null;
            //bool? suspended = null;
            //string taskVariables = null;
            //string processVariables = null;
            //string caseInstanceVariables = null;
            //bool? variableNamesIgnoreCase = null;
            //bool? variableValuesIgnoreCase = null;
            //string parentTaskId = null;
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //var response = instance.GetTasks(processInstanceId, processInstanceIdIn, processInstanceBusinessKey, processInstanceBusinessKeyExpression, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, processInstanceBusinessKeyLikeExpression, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, executionId, caseInstanceId, caseInstanceBusinessKey, caseInstanceBusinessKeyLike, caseDefinitionId, caseDefinitionKey, caseDefinitionName, caseDefinitionNameLike, caseExecutionId, activityInstanceIdIn, tenantIdIn, withoutTenantId, assignee, assigneeExpression, assigneeLike, assigneeLikeExpression, assigneeIn, owner, ownerExpression, candidateGroup, candidateGroupExpression, candidateUser, candidateUserExpression, includeAssignedTasks, involvedUser, involvedUserExpression, assigned, unassigned, taskDefinitionKey, taskDefinitionKeyIn, taskDefinitionKeyLike, name, nameNotEqual, nameLike, nameNotLike, description, descriptionLike, priority, maxPriority, minPriority, dueDate, dueDateExpression, dueAfter, dueAfterExpression, dueBefore, dueBeforeExpression, followUpDate, followUpDateExpression, followUpAfter, followUpAfterExpression, followUpBefore, followUpBeforeExpression, followUpBeforeOrNotExistent, followUpBeforeOrNotExistentExpression, createdOn, createdOnExpression, createdAfter, createdAfterExpression, createdBefore, createdBeforeExpression, delegationState, candidateGroups, candidateGroupsExpression, withCandidateGroups, withoutCandidateGroups, withCandidateUsers, withoutCandidateUsers, active, suspended, taskVariables, processVariables, caseInstanceVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, parentTaskId, sortBy, sortOrder, firstResult, maxResults);
            //Assert.IsInstanceOf(typeof(List<TaskDto>), response, "response is List<TaskDto>");
        }
        
        /// <summary>
        /// Test GetTasksCount
        /// </summary>
        [Test]
        public void GetTasksCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string processInstanceIdIn = null;
            //string processInstanceBusinessKey = null;
            //string processInstanceBusinessKeyExpression = null;
            //string processInstanceBusinessKeyIn = null;
            //string processInstanceBusinessKeyLike = null;
            //string processInstanceBusinessKeyLikeExpression = null;
            //string processDefinitionId = null;
            //string processDefinitionKey = null;
            //string processDefinitionKeyIn = null;
            //string processDefinitionName = null;
            //string processDefinitionNameLike = null;
            //string executionId = null;
            //string caseInstanceId = null;
            //string caseInstanceBusinessKey = null;
            //string caseInstanceBusinessKeyLike = null;
            //string caseDefinitionId = null;
            //string caseDefinitionKey = null;
            //string caseDefinitionName = null;
            //string caseDefinitionNameLike = null;
            //string caseExecutionId = null;
            //string activityInstanceIdIn = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //string assignee = null;
            //string assigneeExpression = null;
            //string assigneeLike = null;
            //string assigneeLikeExpression = null;
            //string assigneeIn = null;
            //string owner = null;
            //string ownerExpression = null;
            //string candidateGroup = null;
            //string candidateGroupExpression = null;
            //string candidateUser = null;
            //string candidateUserExpression = null;
            //bool? includeAssignedTasks = null;
            //string involvedUser = null;
            //string involvedUserExpression = null;
            //bool? assigned = null;
            //bool? unassigned = null;
            //string taskDefinitionKey = null;
            //string taskDefinitionKeyIn = null;
            //string taskDefinitionKeyLike = null;
            //string name = null;
            //string nameNotEqual = null;
            //string nameLike = null;
            //string nameNotLike = null;
            //string description = null;
            //string descriptionLike = null;
            //int? priority = null;
            //int? maxPriority = null;
            //int? minPriority = null;
            //string dueDate = null;
            //string dueDateExpression = null;
            //string dueAfter = null;
            //string dueAfterExpression = null;
            //string dueBefore = null;
            //string dueBeforeExpression = null;
            //string followUpDate = null;
            //string followUpDateExpression = null;
            //string followUpAfter = null;
            //string followUpAfterExpression = null;
            //string followUpBefore = null;
            //string followUpBeforeExpression = null;
            //string followUpBeforeOrNotExistent = null;
            //string followUpBeforeOrNotExistentExpression = null;
            //string createdOn = null;
            //string createdOnExpression = null;
            //string createdAfter = null;
            //string createdAfterExpression = null;
            //string createdBefore = null;
            //string createdBeforeExpression = null;
            //string delegationState = null;
            //string candidateGroups = null;
            //string candidateGroupsExpression = null;
            //bool? withCandidateGroups = null;
            //bool? withoutCandidateGroups = null;
            //bool? withCandidateUsers = null;
            //bool? withoutCandidateUsers = null;
            //bool? active = null;
            //bool? suspended = null;
            //string taskVariables = null;
            //string processVariables = null;
            //string caseInstanceVariables = null;
            //bool? variableNamesIgnoreCase = null;
            //bool? variableValuesIgnoreCase = null;
            //string parentTaskId = null;
            //var response = instance.GetTasksCount(processInstanceId, processInstanceIdIn, processInstanceBusinessKey, processInstanceBusinessKeyExpression, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, processInstanceBusinessKeyLikeExpression, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, executionId, caseInstanceId, caseInstanceBusinessKey, caseInstanceBusinessKeyLike, caseDefinitionId, caseDefinitionKey, caseDefinitionName, caseDefinitionNameLike, caseExecutionId, activityInstanceIdIn, tenantIdIn, withoutTenantId, assignee, assigneeExpression, assigneeLike, assigneeLikeExpression, assigneeIn, owner, ownerExpression, candidateGroup, candidateGroupExpression, candidateUser, candidateUserExpression, includeAssignedTasks, involvedUser, involvedUserExpression, assigned, unassigned, taskDefinitionKey, taskDefinitionKeyIn, taskDefinitionKeyLike, name, nameNotEqual, nameLike, nameNotLike, description, descriptionLike, priority, maxPriority, minPriority, dueDate, dueDateExpression, dueAfter, dueAfterExpression, dueBefore, dueBeforeExpression, followUpDate, followUpDateExpression, followUpAfter, followUpAfterExpression, followUpBefore, followUpBeforeExpression, followUpBeforeOrNotExistent, followUpBeforeOrNotExistentExpression, createdOn, createdOnExpression, createdAfter, createdAfterExpression, createdBefore, createdBeforeExpression, delegationState, candidateGroups, candidateGroupsExpression, withCandidateGroups, withoutCandidateGroups, withCandidateUsers, withoutCandidateUsers, active, suspended, taskVariables, processVariables, caseInstanceVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, parentTaskId);
            //Assert.IsInstanceOf(typeof(CountResultDto), response, "response is CountResultDto");
        }
        
        /// <summary>
        /// Test HandleBpmnError
        /// </summary>
        [Test]
        public void HandleBpmnErrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TaskBpmnErrorDto taskBpmnErrorDto = null;
            //instance.HandleBpmnError(id, taskBpmnErrorDto);
            
        }
        
        /// <summary>
        /// Test HandleEscalation
        /// </summary>
        [Test]
        public void HandleEscalationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TaskEscalationDto taskEscalationDto = null;
            //instance.HandleEscalation(id, taskEscalationDto);
            
        }
        
        /// <summary>
        /// Test QueryTasks
        /// </summary>
        [Test]
        public void QueryTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? firstResult = null;
            //int? maxResults = null;
            //TaskQueryDto taskQueryDto = null;
            //var response = instance.QueryTasks(firstResult, maxResults, taskQueryDto);
            //Assert.IsInstanceOf(typeof(List<TaskDto>), response, "response is List<TaskDto>");
        }
        
        /// <summary>
        /// Test QueryTasksCount
        /// </summary>
        [Test]
        public void QueryTasksCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskQueryDto taskQueryDto = null;
            //var response = instance.QueryTasksCount(taskQueryDto);
            //Assert.IsInstanceOf(typeof(CountResultDto), response, "response is CountResultDto");
        }
        
        /// <summary>
        /// Test Resolve
        /// </summary>
        [Test]
        public void ResolveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CompleteTaskDto completeTaskDto = null;
            //instance.Resolve(id, completeTaskDto);
            
        }
        
        /// <summary>
        /// Test SetAssignee
        /// </summary>
        [Test]
        public void SetAssigneeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserIdDto userIdDto = null;
            //instance.SetAssignee(id, userIdDto);
            
        }
        
        /// <summary>
        /// Test Submit
        /// </summary>
        [Test]
        public void SubmitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CompleteTaskDto completeTaskDto = null;
            //var response = instance.Submit(id, completeTaskDto);
            //Assert.IsInstanceOf(typeof(Dictionary<string, VariableValueDto>), response, "response is Dictionary<string, VariableValueDto>");
        }
        
        /// <summary>
        /// Test Unclaim
        /// </summary>
        [Test]
        public void UnclaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.Unclaim(id);
            
        }
        
        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Test]
        public void UpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TaskDto taskDto = null;
            //instance.UpdateTask(id, taskDto);
            
        }
        
    }

}
