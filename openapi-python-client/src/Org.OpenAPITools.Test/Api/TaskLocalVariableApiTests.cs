/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TaskLocalVariableApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TaskLocalVariableApiTests
    {
        private TaskLocalVariableApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaskLocalVariableApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaskLocalVariableApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TaskLocalVariableApi
            //Assert.IsInstanceOf(typeof(TaskLocalVariableApi), instance);
        }

        
        /// <summary>
        /// Test DeleteTaskLocalVariable
        /// </summary>
        [Test]
        public void DeleteTaskLocalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //instance.DeleteTaskLocalVariable(id, varName);
            
        }
        
        /// <summary>
        /// Test GetTaskLocalVariable
        /// </summary>
        [Test]
        public void GetTaskLocalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //bool? deserializeValue = null;
            //var response = instance.GetTaskLocalVariable(id, varName, deserializeValue);
            //Assert.IsInstanceOf(typeof(VariableValueDto), response, "response is VariableValueDto");
        }
        
        /// <summary>
        /// Test GetTaskLocalVariableBinary
        /// </summary>
        [Test]
        public void GetTaskLocalVariableBinaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //var response = instance.GetTaskLocalVariableBinary(id, varName);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetTaskLocalVariables
        /// </summary>
        [Test]
        public void GetTaskLocalVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? deserializeValues = null;
            //var response = instance.GetTaskLocalVariables(id, deserializeValues);
            //Assert.IsInstanceOf(typeof(Dictionary<string, VariableValueDto>), response, "response is Dictionary<string, VariableValueDto>");
        }
        
        /// <summary>
        /// Test ModifyTaskLocalVariables
        /// </summary>
        [Test]
        public void ModifyTaskLocalVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PatchVariablesDto patchVariablesDto = null;
            //instance.ModifyTaskLocalVariables(id, patchVariablesDto);
            
        }
        
        /// <summary>
        /// Test PutTaskLocalVariable
        /// </summary>
        [Test]
        public void PutTaskLocalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //VariableValueDto variableValueDto = null;
            //instance.PutTaskLocalVariable(id, varName, variableValueDto);
            
        }
        
        /// <summary>
        /// Test SetBinaryTaskLocalVariable
        /// </summary>
        [Test]
        public void SetBinaryTaskLocalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //System.IO.Stream data = null;
            //string valueType = null;
            //instance.SetBinaryTaskLocalVariable(id, varName, data, valueType);
            
        }
        
    }

}
